<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ESP.Core</name>
    </assembly>
    <members>
        <member name="M:ESP.UserPoint.DataAccess.IUserPointRecordDataProvider.Add(ESP.UserPoint.Entity.UserPointRecordInfo)">
            <summary>
            增加一条数据
            </summary>
        </member>
        <member name="M:ESP.UserPoint.DataAccess.IUserPointRecordDataProvider.GetList(System.String)">
            <summary>
            获得数据列表
            </summary>
        </member>
        <member name="M:ESP.UserPoint.SqlDataAccess.UserPointRecordDataProvider.Add(ESP.UserPoint.Entity.UserPointRecordInfo)">
            <summary>
            增加一条数据
            </summary>
        </member>
        <member name="M:ESP.UserPoint.SqlDataAccess.UserPointRecordDataProvider.GetList(System.String)">
            <summary>
            获得数据列表
            </summary>
        </member>
        <member name="M:ESP.UserPoint.DataAccess.IUserPointDataProvider.Add(ESP.UserPoint.Entity.UserPointInfo)">
            <summary>
            增加一条数据
            </summary>
        </member>
        <member name="M:ESP.UserPoint.DataAccess.IUserPointDataProvider.Update(ESP.UserPoint.Entity.UserPointInfo)">
            <summary>
            更新一条数据
            </summary>
        </member>
        <member name="M:ESP.UserPoint.DataAccess.IUserPointDataProvider.Delete(System.Int32)">
            <summary>
            删除一条数据
            </summary>
        </member>
        <member name="M:ESP.UserPoint.DataAccess.IUserPointDataProvider.GetModel(System.Int32)">
            <summary>
            得到一个对象实体
            </summary>
        </member>
        <member name="M:ESP.UserPoint.DataAccess.IUserPointDataProvider.GetList(System.String)">
            <summary>
            获得数据列表
            </summary>
        </member>
        <member name="M:ESP.UserPoint.SqlDataAccess.UserPointDataProvider.Add(ESP.UserPoint.Entity.UserPointInfo)">
            <summary>
            增加一条数据
            </summary>
        </member>
        <member name="M:ESP.UserPoint.SqlDataAccess.UserPointDataProvider.Update(ESP.UserPoint.Entity.UserPointInfo)">
            <summary>
            更新一条数据
            </summary>
        </member>
        <member name="M:ESP.UserPoint.SqlDataAccess.UserPointDataProvider.Delete(System.Int32)">
            <summary>
            删除一条数据
            </summary>
        </member>
        <member name="M:ESP.UserPoint.SqlDataAccess.UserPointDataProvider.GetModel(System.Int32)">
            <summary>
            得到一个对象实体
            </summary>
        </member>
        <member name="M:ESP.UserPoint.SqlDataAccess.UserPointDataProvider.GetList(System.String)">
            <summary>
            获得数据列表
            </summary>
        </member>
        <member name="M:ESP.UserPoint.BusinessLogic.UserPointRecordManager.Add(ESP.UserPoint.Entity.UserPointRecordInfo)">
            <summary>
            增加一条数据
            </summary>
        </member>
        <member name="M:ESP.UserPoint.BusinessLogic.UserPointRecordManager.GetList(System.String)">
            <summary>
            获得数据列表
            </summary>
        </member>
        <member name="T:ESP.Mail.MailException">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESP.Mail.MailException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the System.ApplicationException class with
            a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="T:ESP.Framework.BusinessLogic.DepartmentTypeManager">
            <summary>
            部门类型控制
            </summary>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.DepartmentTypeManager.Get(System.Int32)">
            <summary>
            获取指定ID的部门类型
            </summary>
            <param name="id">类型ID</param>
            <returns>部门类型信息对象</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.DepartmentTypeManager.GetAll">
            <summary>
            获取所有部门类型列表
            </summary>
            <returns>所有部门类型信息的列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.DepartmentTypeManager.Update(ESP.Framework.Entity.DepartmentTypeInfo)">
            <summary>
            更新部门类型信息
            </summary>
            <param name="departmentType">新的部门类型信息</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.DepartmentTypeManager.Create(ESP.Framework.Entity.DepartmentTypeInfo)">
            <summary>
            创建新的部门类型
            </summary>
            <param name="departmentType">要创建的部门类型对象</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.DepartmentTypeManager.Delete(System.Int32)">
            <summary>
            删除指定ID的部门类型
            </summary>
            <param name="id">要删除的部门类型的ID</param>
        </member>
        <member name="T:ESP.Framework.Entity.AuditBackUpInfo">
            <summary>
            代理人设置信息
            </summary>
        </member>
        <member name="M:ESP.Framework.Entity.AuditBackUpInfo.#ctor">
            <summary>
            初始化 <see cref="T:ESP.Framework.Entity.AuditBackUpInfo"/> 类实例。
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.AuditBackUpInfo.ID">
            <summary>
            流水号
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.AuditBackUpInfo.UserID">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.AuditBackUpInfo.BackupUserID">
            <summary>
            候补UserID
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.AuditBackUpInfo.BeginDate">
            <summary>
            开始时间
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.AuditBackUpInfo.EndDate">
            <summary>
            结束时间
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.AuditBackUpInfo.Status">
            <summary>
            委托是否有效，1为有效，0为无效
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.AuditBackUpInfo.Type">
            <summary>
            委托类型：1为代理 2为离职接收
            </summary>
        </member>
        <member name="T:ESP.DataAccessAuthorization.SqlDataAccess.DataAccessAction">
            <summary>
            操作权限 SQL Server 操作类
            </summary>
        </member>
        <member name="T:ESP.DataAccessAuthorization.DataAccess.IDataAccessAction">
            <summary>
            操作权限数据操作
            </summary>
        </member>
        <member name="M:ESP.DataAccessAuthorization.DataAccess.IDataAccessAction.Add(ESP.DataAccessAuthorization.Entity.DataAccessAction)">
            <summary>
            增加一条数据
            </summary>
        </member>
        <member name="M:ESP.DataAccessAuthorization.DataAccess.IDataAccessAction.Update(ESP.DataAccessAuthorization.Entity.DataAccessAction)">
            <summary>
            更新一条数据
            返回实际更新的数据数量
            </summary>
        </member>
        <member name="M:ESP.DataAccessAuthorization.DataAccess.IDataAccessAction.Delete(System.Int32)">
            <summary>
            删除一条数据
            </summary>
        </member>
        <member name="M:ESP.DataAccessAuthorization.DataAccess.IDataAccessAction.GetModel(System.Int32)">
            <summary>
            得到一个对象实体
            </summary>
        </member>
        <member name="M:ESP.DataAccessAuthorization.DataAccess.IDataAccessAction.GetList(System.String)">
            <summary>
            获得数据列表
            </summary>
        </member>
        <member name="M:ESP.DataAccessAuthorization.DataAccess.IDataAccessAction.GetDataAccessMemberList(System.Int32)">
            <summary>
            获取当前Action的Member列表
            </summary>
            <param name="actionId"></param>
            <returns></returns>
        </member>
        <member name="M:ESP.DataAccessAuthorization.SqlDataAccess.DataAccessAction.Add(ESP.DataAccessAuthorization.Entity.DataAccessAction)">
            <summary>
            添加一条记录
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ESP.DataAccessAuthorization.SqlDataAccess.DataAccessAction.Update(ESP.DataAccessAuthorization.Entity.DataAccessAction)">
            <summary>
            更新一条记录
            </summary>
            <param name="model"></param>
            <returns>返回更新数据数量</returns>
        </member>
        <member name="M:ESP.DataAccessAuthorization.SqlDataAccess.DataAccessAction.Delete(System.Int32)">
            <summary>
            删除一条记录
            </summary>
            <param name="DataAccessActionID"></param>
            <returns>返回删除数据数量</returns>
        </member>
        <member name="M:ESP.DataAccessAuthorization.SqlDataAccess.DataAccessAction.GetModel(System.Int32)">
            <summary>
            获取某个对象
            </summary>
            <param name="DataAccessActionID">某个主键值</param>
            <returns>返回拥有指定主键的对象</returns>
        </member>
        <member name="M:ESP.DataAccessAuthorization.SqlDataAccess.DataAccessAction.GetList(System.String)">
            <summary>
            根据查询条件获取对象的List
            </summary>
            <param name="strWhere">条件参数（这个函数有安全漏洞，需要严格控制strWhere，不能把用户的输入直接传递给strWhere变量）</param>
            <returns>返回对象List</returns>
        </member>
        <member name="M:ESP.DataAccessAuthorization.SqlDataAccess.DataAccessAction.GetDataAccessMemberList(System.Int32)">
            <summary>
            获取Action的Member列表
            </summary>
            <param name="actionId"></param>
            <returns></returns>
        </member>
        <member name="T:ESP.DataAccessAuthorization.Entity.WebPageDataAccess">
            <summary>
            数据表单操作权限描述
            </summary>
        </member>
        <member name="P:ESP.DataAccessAuthorization.Entity.WebPageDataAccess.WebPageDataAccessID">
            <summary>
            数据表单包含的操作类型序号
            </summary>
        </member>
        <member name="P:ESP.DataAccessAuthorization.Entity.WebPageDataAccess.WebPageID">
            <summary>
            网页序号
            </summary>
        </member>
        <member name="P:ESP.DataAccessAuthorization.Entity.WebPageDataAccess.DataAccessActionID">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESP.DataAccessAuthorization.Entity.WebPageDataAccess.WorkFlowVersion">
            <summary>
            工作流版本，暂时不起作用
            </summary>
        </member>
        <member name="P:ESP.DataAccessAuthorization.Entity.WebPageDataAccess.CreateTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESP.DataAccessAuthorization.Entity.WebPageDataAccess.Creator">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESP.DataAccessAuthorization.Entity.WebPageDataAccess.CreatorName">
            <summary>
            
            </summary>
        </member>
        <member name="T:ESP.Web.CaptchaImage">
            <summary>
            CAPTCHA 图像生成类
            </summary>
        </member>
        <member name="M:ESP.Web.CaptchaImage.CreateRandomText">
            <summary>
            生成一个随机的CAPTCHA文本数组。
            </summary>
            <returns>随机的CAPTCHA文本数组。</returns>
        </member>
        <member name="M:ESP.Web.CaptchaImage.RenderImage(System.Char[]@)">
            <summary>
            生成图像
            </summary>
            <param name="text">文本字符数组。</param>
            <returns>生成的图像。</returns>
        </member>
        <member name="P:ESP.Web.CaptchaImage.BackgroundNoise">
            <summary>
            背景噪音幅度
            </summary>
        </member>
        <member name="P:ESP.Web.CaptchaImage.FontWarp">
            <summary>
            扭曲幅度
            </summary>
        </member>
        <member name="P:ESP.Web.CaptchaImage.Fontlist">
            <summary>
            可供选取的字体列表
            </summary>
        </member>
        <member name="P:ESP.Web.CaptchaImage.Height">
            <summary>
            图像高度（大于等于30，小于等于500）
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            值超出范围，必须大于等于30且小于等于500
            </exception>
        </member>
        <member name="P:ESP.Web.CaptchaImage.Width">
            <summary>
            图像宽度（大于等于60，小于等于1000）
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            值超出范围，必须大于等于30且小于等于1000
            </exception>
        </member>
        <member name="P:ESP.Web.CaptchaImage.LineNoise">
            <summary>
            随机线条幅度
            </summary>
        </member>
        <member name="T:ESP.Web.CaptchaImage.BackgroundNoiseLevel">
            <summary>
            背景噪音幅度
            </summary>
        </member>
        <member name="F:ESP.Web.CaptchaImage.BackgroundNoiseLevel.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:ESP.Web.CaptchaImage.BackgroundNoiseLevel.Low">
            <summary>
            低
            </summary>
        </member>
        <member name="F:ESP.Web.CaptchaImage.BackgroundNoiseLevel.Medium">
            <summary>
            中
            </summary>
        </member>
        <member name="F:ESP.Web.CaptchaImage.BackgroundNoiseLevel.High">
            <summary>
            高
            </summary>
        </member>
        <member name="F:ESP.Web.CaptchaImage.BackgroundNoiseLevel.Extreme">
            <summary>
            非常高
            </summary>
        </member>
        <member name="T:ESP.Web.CaptchaImage.FontWarpFactor">
            <summary>
            扭曲幅度
            </summary>
        </member>
        <member name="F:ESP.Web.CaptchaImage.FontWarpFactor.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:ESP.Web.CaptchaImage.FontWarpFactor.Low">
            <summary>
            低
            </summary>
        </member>
        <member name="F:ESP.Web.CaptchaImage.FontWarpFactor.Medium">
            <summary>
            中
            </summary>
        </member>
        <member name="F:ESP.Web.CaptchaImage.FontWarpFactor.High">
            <summary>
            高
            </summary>
        </member>
        <member name="F:ESP.Web.CaptchaImage.FontWarpFactor.Extreme">
            <summary>
            非常高
            </summary>
        </member>
        <member name="T:ESP.Web.CaptchaImage.LineNoiseLevel">
            <summary>
            随机线条幅度
            </summary>
        </member>
        <member name="F:ESP.Web.CaptchaImage.LineNoiseLevel.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:ESP.Web.CaptchaImage.LineNoiseLevel.Low">
            <summary>
            低
            </summary>
        </member>
        <member name="F:ESP.Web.CaptchaImage.LineNoiseLevel.Medium">
            <summary>
            中
            </summary>
        </member>
        <member name="F:ESP.Web.CaptchaImage.LineNoiseLevel.High">
            <summary>
            高
            </summary>
        </member>
        <member name="F:ESP.Web.CaptchaImage.LineNoiseLevel.Extreme">
            <summary>
            非常高
            </summary>
        </member>
        <member name="T:ESP.UserPoint.DataAccess.Utilities.CBOUtil">
            <summary>
            OR转换辅助类
            </summary>
        </member>
        <member name="M:ESP.UserPoint.DataAccess.Utilities.CBOUtil.GetBoolean(System.Data.IDataReader,System.String,System.Boolean)">
            <summary>
            从DataReader中指定字段读取Boolean型值，如果该字段为空，返回默认值
            </summary>
            <param name="reader">DataReader对象</param>
            <param name="field">要读取的字段</param>
            <param name="defaultValue">默认值</param>
            <returns>字段的值</returns>
        </member>
        <member name="M:ESP.UserPoint.DataAccess.Utilities.CBOUtil.GetByte(System.Data.IDataReader,System.String,System.Byte)">
            <summary>
            从DataReader中指定字段读取Byte型值，如果该字段为空，返回默认值
            </summary>
            <param name="reader">DataReader对象</param>
            <param name="field">要读取的字段</param>
            <param name="defaultValue">默认值</param>
            <returns>字段的值</returns>
        </member>
        <member name="M:ESP.UserPoint.DataAccess.Utilities.CBOUtil.GetBytes(System.Data.IDataReader,System.String,System.Byte[])">
            <summary>
            从DataReader中指定字段读取Byte型数组，如果该字段为空，返回默认值
            </summary>
            <param name="reader">DataReader对象</param>
            <param name="field">要读取的字段</param>
            <param name="defaultValue">默认值</param>
            <returns>字段的值</returns>
        </member>
        <member name="M:ESP.UserPoint.DataAccess.Utilities.CBOUtil.GetChar(System.Data.IDataReader,System.String,System.Char)">
            <summary>
            从DataReader中指定字段读取Char型值，如果该字段为空，返回默认值
            </summary>
            <param name="reader">DataReader对象</param>
            <param name="field">要读取的字段</param>
            <param name="defaultValue">默认值</param>
            <returns>字段的值</returns>
        </member>
        <member name="M:ESP.UserPoint.DataAccess.Utilities.CBOUtil.GetChars(System.Data.IDataReader,System.String,System.Char[])">
            <summary>
            从DataReader中指定字段读取Char型数组，如果该字段为空，返回默认值
            </summary>
            <param name="reader">DataReader对象</param>
            <param name="field">要读取的字段</param>
            <param name="defaultValue">默认值</param>
            <returns>字段的值</returns>
        </member>
        <member name="M:ESP.UserPoint.DataAccess.Utilities.CBOUtil.GetDateTime(System.Data.IDataReader,System.String,System.DateTime)">
            <summary>
            从DataReader中指定字段读取DateTime型值，如果该字段为空，返回默认值
            </summary>
            <param name="reader">DataReader对象</param>
            <param name="field">要读取的字段</param>
            <param name="defaultValue">默认值</param>
            <returns>字段的值</returns>
        </member>
        <member name="M:ESP.UserPoint.DataAccess.Utilities.CBOUtil.GetDecimal(System.Data.IDataReader,System.String,System.Decimal)">
            <summary>
            从DataReader中指定字段读取Decimal型值，如果该字段为空，返回默认值
            </summary>
            <param name="reader">DataReader对象</param>
            <param name="field">要读取的字段</param>
            <param name="defaultValue">默认值</param>
            <returns>字段的值</returns>
        </member>
        <member name="M:ESP.UserPoint.DataAccess.Utilities.CBOUtil.GetDouble(System.Data.IDataReader,System.String,System.Double)">
            <summary>
            从DataReader中指定字段读取Double型值，如果该字段为空，返回默认值
            </summary>
            <param name="reader">DataReader对象</param>
            <param name="field">要读取的字段</param>
            <param name="defaultValue">默认值</param>
            <returns>字段的值</returns>
        </member>
        <member name="M:ESP.UserPoint.DataAccess.Utilities.CBOUtil.GetFloat(System.Data.IDataReader,System.String,System.Single)">
            <summary>
            从DataReader中指定字段读取Single型值，如果该字段为空，返回默认值
            </summary>
            <param name="reader">DataReader对象</param>
            <param name="field">要读取的字段</param>
            <param name="defaultValue">默认值</param>
            <returns>字段的值</returns>
        </member>
        <member name="M:ESP.UserPoint.DataAccess.Utilities.CBOUtil.GetGuid(System.Data.IDataReader,System.String,System.Guid)">
            <summary>
            从DataReader中指定字段读取Guid型值，如果该字段为空，返回默认值
            </summary>
            <param name="reader">DataReader对象</param>
            <param name="field">要读取的字段</param>
            <param name="defaultValue">默认值</param>
            <returns>字段的值</returns>
        </member>
        <member name="M:ESP.UserPoint.DataAccess.Utilities.CBOUtil.GetInt16(System.Data.IDataReader,System.String,System.Int16)">
            <summary>
            从DataReader中指定字段读取Int16型值，如果该字段为空，返回默认值
            </summary>
            <param name="reader">DataReader对象</param>
            <param name="field">要读取的字段</param>
            <param name="defaultValue">默认值</param>
            <returns>字段的值</returns>
        </member>
        <member name="M:ESP.UserPoint.DataAccess.Utilities.CBOUtil.GetInt32(System.Data.IDataReader,System.String,System.Int32)">
            <summary>
            从DataReader中指定字段读取Int32型值，如果该字段为空，返回默认值
            </summary>
            <param name="reader">DataReader对象</param>
            <param name="field">要读取的字段</param>
            <param name="defaultValue">默认值</param>
            <returns>字段的值</returns>
        </member>
        <member name="M:ESP.UserPoint.DataAccess.Utilities.CBOUtil.GetInt64(System.Data.IDataReader,System.String,System.Int64)">
            <summary>
            从DataReader中指定字段读取Int64型值，如果该字段为空，返回默认值
            </summary>
            <param name="reader">DataReader对象</param>
            <param name="field">要读取的字段</param>
            <param name="defaultValue">默认值</param>
            <returns>字段的值</returns>
        </member>
        <member name="M:ESP.UserPoint.DataAccess.Utilities.CBOUtil.GetString(System.Data.IDataReader,System.String,System.String)">
            <summary>
            从DataReader中指定字段读取String型值，如果该字段为空，返回默认值
            </summary>
            <param name="reader">DataReader对象</param>
            <param name="field">要读取的字段</param>
            <param name="defaultValue">默认值</param>
            <returns>字段的值</returns>
        </member>
        <member name="M:ESP.UserPoint.DataAccess.Utilities.CBOUtil.GetValue(System.Data.IDataReader,System.String)">
            <summary>
            从DataReader中指定字段读取任意类型的值，如果该字段为空，返回默认值
            </summary>
            <param name="reader">DataReader对象</param>
            <param name="field">要读取的字段</param>
            <returns>字段的值</returns>
        </member>
        <member name="T:ESP.Framework.DataAccess.ITaskItemDataProvider">
            <summary>
            待办事宜抽象数据访问接口
            </summary>
        </member>
        <member name="M:ESP.Framework.DataAccess.ITaskItemDataProvider.GetTaskItems(System.String,System.Int32)">
            <summary>
            获取指定ID的用户的待办事宜列表
            从Web缓存中
            </summary>
            <param name="key">缓存Key</param>
            <param name="userId">用户ID</param>
            <returns>待办事宜列表</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.ITaskItemDataProvider.GetAllTaskItems">
            <summary>
            获取所有人的所有代办事宜
            存入Web缓存中
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESP.Framework.DataAccess.IModuleDataProvider">
            <summary>
            功能模块抽象数据访问接口
            </summary>
        </member>
        <member name="M:ESP.Framework.DataAccess.IModuleDataProvider.Get(System.Int32)">
            <summary>
            获取指定ID的模块信息
            </summary>
            <param name="id">模块ID</param>
            <returns>模块信息对象</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IModuleDataProvider.GetByWebSite(System.Int32)">
            <summary>
            获取指定站点的模块列表
            </summary>
            <param name="webSiteId">站点ID</param>
            <returns>模块列表</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IModuleDataProvider.Update(ESP.Framework.Entity.ModuleInfo)">
            <summary>
            更新模块信息
            </summary>
            <param name="module">要更新的模块信息对象</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IModuleDataProvider.Create(ESP.Framework.Entity.ModuleInfo)">
            <summary>
            创建新的模块
            </summary>
            <param name="module">要创建的模块信息对象</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IModuleDataProvider.Delete(System.Int32)">
            <summary>
            删除模块
            </summary>
            <param name="id">要删除的模块的ID</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IModuleDataProvider.GetByUser(System.Int32,System.Int32)">
            <summary>
            获取指定用户在指定站点有权限访问的模块的列表
            </summary>
            <param name="webSiteId">站点ID</param>
            <param name="userId">用户ID</param>
            <returns>模块列表</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IModuleDataProvider.GetAll">
            <summary>
            获取所有站点的所有模块的列表
            </summary>
            <returns>模块列表</returns>
        </member>
        <member name="T:ESP.DataAccessAuthorization.SqlDataAccess.WebPageDataAccess">
            <summary>
            数据表单操作权限SQL Server数据操作
            </summary>
        </member>
        <member name="T:ESP.DataAccessAuthorization.DataAccess.IWebPageDataAccess">
            <summary>
            数据表单操作权限数据操作
            </summary>
        </member>
        <member name="M:ESP.DataAccessAuthorization.DataAccess.IWebPageDataAccess.Add(ESP.DataAccessAuthorization.Entity.WebPageDataAccess)">
            <summary>
            增加一条数据
            </summary>
        </member>
        <member name="M:ESP.DataAccessAuthorization.DataAccess.IWebPageDataAccess.Update(ESP.DataAccessAuthorization.Entity.WebPageDataAccess)">
            <summary>
            更新一条数据
            </summary>
        </member>
        <member name="M:ESP.DataAccessAuthorization.DataAccess.IWebPageDataAccess.Delete(System.Int32)">
            <summary>
            删除一条数据
            </summary>
        </member>
        <member name="M:ESP.DataAccessAuthorization.DataAccess.IWebPageDataAccess.GetModel(System.Int32)">
            <summary>
            得到一个对象实体
            </summary>
        </member>
        <member name="M:ESP.DataAccessAuthorization.DataAccess.IWebPageDataAccess.GetList(System.String)">
            <summary>
            获得数据列表
            </summary>
        </member>
        <member name="M:ESP.DataAccessAuthorization.DataAccess.IWebPageDataAccess.GetDataAccessActionList(System.Int32)">
            <summary>
            获取当前页DataAccessAction列表
            </summary>
            <param name="webPageId"></param>
            <returns></returns>
        </member>
        <member name="M:ESP.DataAccessAuthorization.SqlDataAccess.WebPageDataAccess.Add(ESP.DataAccessAuthorization.Entity.WebPageDataAccess)">
            <summary>
            添加一条记录
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ESP.DataAccessAuthorization.SqlDataAccess.WebPageDataAccess.Update(ESP.DataAccessAuthorization.Entity.WebPageDataAccess)">
            <summary>
            更新一条记录
            </summary>
            <param name="model"></param>
            <returns>返回更新数据数量</returns>
        </member>
        <member name="M:ESP.DataAccessAuthorization.SqlDataAccess.WebPageDataAccess.Delete(System.Int32)">
            <summary>
            删除一条记录
            </summary>
            <param name="WebPageDataAccessID"></param>
            <returns>返回删除数据数量</returns>
        </member>
        <member name="M:ESP.DataAccessAuthorization.SqlDataAccess.WebPageDataAccess.GetModel(System.Int32)">
            <summary>
            获取某个对象
            </summary>
            <param name="WebPageDataAccessID">某个主键值</param>
            <returns>返回拥有指定主键的对象</returns>
        </member>
        <member name="M:ESP.DataAccessAuthorization.SqlDataAccess.WebPageDataAccess.GetList(System.String)">
            <summary>
            根据查询条件获取对象的List
            </summary>
            <param name="strWhere"></param>
            <returns>返回对象List</returns>
        </member>
        <member name="M:ESP.DataAccessAuthorization.SqlDataAccess.WebPageDataAccess.GetDataAccessActionList(System.Int32)">
            <summary>
            获取当前页的Action列表
            </summary>
            <param name="webPageId"></param>
            <returns></returns>
        </member>
        <member name="P:ESP.UserPoint.Entity.UserPointRuleInfo.RuleID">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESP.UserPoint.Entity.UserPointRuleInfo.RuleName">
            <summary>
            积分规则的名称
            </summary>
        </member>
        <member name="P:ESP.UserPoint.Entity.UserPointRuleInfo.RuleKey">
            <summary>
            积分规则的Key，用来在程序中起到标志作用（例如在XML中可以使用一个英文标识来说明这个积分设定，这样可以避免使用ID的数字和Name的中文来当作字段或属性的名称）
            </summary>
        </member>
        <member name="P:ESP.UserPoint.Entity.UserPointRuleInfo.Description">
            <summary>
            积分规则的解释说明
            </summary>
        </member>
        <member name="P:ESP.UserPoint.Entity.UserPointRuleInfo.Points">
            <summary>
            分数设置
            </summary>
        </member>
        <member name="T:ESP.Security.PassportAuthenticationTicket">
            <summary>
            Passport认证票据类
            </summary>
        </member>
        <member name="M:ESP.Security.PassportAuthenticationTicket.#ctor">
            <summary>
            构造空的票据
            </summary>
        </member>
        <member name="M:ESP.Security.PassportAuthenticationTicket.FromBytes(System.Byte[])">
            <summary>
            从字节数组还原票据
            </summary>
            <param name="buf">包含票据信息的字节数组</param>
            <returns></returns>
        </member>
        <member name="M:ESP.Security.PassportAuthenticationTicket.ToBytes">
            <summary>
            序列化为字节数组
            </summary>
            <returns>序列化后的字节数组</returns>
        </member>
        <member name="M:ESP.Security.PassportAuthenticationTicket.IsExpired(System.Int32)">
            <summary>
            是否过期
            </summary>
            <param name="seconds">过期时间</param>
            <returns>如果票据已过期返回true，否则返回false</returns>
        </member>
        <member name="P:ESP.Security.PassportAuthenticationTicket.UserID">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="P:ESP.Security.PassportAuthenticationTicket.Expired">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="P:ESP.Security.PassportAuthenticationTicket.UserName">
            <summary>
            用户名。
            </summary>
        </member>
        <member name="P:ESP.Security.PassportAuthenticationTicket.Empty">
            <summary>
            空票据
            </summary>
        </member>
        <member name="T:ESP.Mail.MailManager">
            <summary>
            邮件操作类
            </summary>
            <remarks>
            Aspx文件格式的邮件模板页面必须使用<see cref="T:ESP.Mail.AspxMail"/>类或其派生类作为基类，
            可以邮件模板中使用 .Master 模板页，但无论邮件模板文件还是 .Master 文件中都不支持任何
            runat="server" 的标记，也无法访问 Http 上下文对象、请求对象、响应对象等。
            </remarks>
            <example>
            <code>
            MailAddress recipient = new MailAddress("nobody@codeshop.com.cn", "Nobody");
            ESP.Mail.MailManager.Send("~/MailTemplates/PasswordReset.aspx", "http://xpassport.shunyagoup.com", recipient);
            </code>
            文件 ~/MailTemplates/Mail.Master
            <code>
            &lt;%@ Master Language="C#" %&gt;
            &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
            
            &lt;html xmlns="http://www.w3.org/1999/xhtml" &gt;
            &lt;head&gt;
                &lt;title&gt;&lt;%= this.Page.Title %&gt;&lt;/title&gt;
            &lt;/head&gt;
            &lt;body style="font-size:80%"&gt;
                &lt;div&gt;
                    &lt;asp:ContentPlaceHolder ID="ContentPlaceHolder" runat="server"&gt;
                    
                    &lt;/asp:ContentPlaceHolder&gt;
                &lt;/div&gt;
                &lt;br /&gt;
                &lt;div&gt;感谢您使用 &lt;b&gt;星言云汇企业服务系统&lt;/b&gt;，如果你有任务疑问，请及时与我们联系。&lt;/div&gt;
                &lt;br /&gt;
                &lt;br /&gt;
                &lt;div&gt;版权所有 &amp;copy; 2024 星言云汇&lt;/div&gt;
            &lt;/body&gt;
            &lt;/html&gt;
            </code>
            文件 ~/MailTemplates/PasswordReset.aspx
            <code>
            &lt;%@ Page Language="C#" Title="密码重置" MasterPageFile="~/MailTemplates/Mail.Master"
                Inherits="ESP.Mail.AspxMail,ESP.Core" %&gt;
            
            &lt;%@ Assembly Name="ESP.Core" %&gt;
            &lt;%@ Import Namespace="ESP.Framework.BusinessLogic" %&gt;
            &lt;asp:Content ContentPlaceHolderID="ContentPlaceHolder" runat="server"&gt;
                &lt;%
                    string webSiteName = WebSiteManager.Get().WebSiteName;
                    this.Title += " - " + webSiteName;
            
                    string username = null;
                    if (this.MailMessage != null &amp;&amp; this.MailMessage.To.Count &gt; 0)
                    {
                        username = this.MailMessage.To[0].DisplayName;
                    }
                    if (string.IsNullOrEmpty(username))
                        username = "用户";
            
                    object url = this.DataSource;
                %&gt;
                &lt;div&gt;
                    &lt;p&gt;
                        尊敬的&lt;% = username %&gt;，
                    &lt;/p&gt;
                    &lt;br /&gt;
                    &lt;p&gt;
                        欢迎使用重置密码功能。要重置您的密码，请点击下面的链接，
                    &lt;/p&gt;
                    &lt;p&gt;
                        &lt;a href="&lt;%=url %&gt;"&gt;点击此处，重置密码。&lt;/a&gt;
                    &lt;/p&gt;
                    &lt;p&gt;
                        如果点击以上链接没有效果，请尝试将下面的 URL 复制到你的浏览器地址栏。&lt;/p&gt;
                    &lt;p&gt;
                        &lt;%=url %&gt;&lt;/p&gt;
                    &lt;p&gt;
                        如果您并未进行过密码重置操作，请忽略本邮件。
                    &lt;/p&gt;
                    &lt;p&gt;
                        请不要直接回复本邮件地址，你的任何回复都会被忽略。
                    &lt;/p&gt;
                &lt;/div&gt;
            &lt;/asp:Content&gt;
            </code>
            </example>
        </member>
        <member name="M:ESP.Mail.MailManager.Send(System.String,System.Object,System.Net.Mail.MailAddress[])">
            <summary>
            根据模板和数据源生成邮件并发送
            </summary>
            <param name="template">邮件模板的虚拟路径。</param>
            <param name="dataSource">单数据源对象，使用默认键值 DataSource。</param>
            <param name="recipients">收件人地址。</param>
        </member>
        <member name="M:ESP.Mail.MailManager.Send(System.String,System.Object,System.String,System.Net.Mail.MailAddress[])">
            <summary>
            
            </summary>
            <param name="template">邮件模板的虚拟路径。</param>
            <param name="dataSource">单数据源对象，使用默认键值 DataSource。</param>
            <param name="attachment">要附加到附件中的文件的物理路径。</param>
            <param name="recipients">收件人地址。</param>
        </member>
        <member name="M:ESP.Mail.MailManager.Send(System.String,System.String,System.Boolean,System.Net.Mail.MailAddress[])">
            <summary>
            发送邮件
            </summary>
            <param name="subject">邮件标题。</param>
            <param name="body">邮件内容。</param>
            <param name="isHtml">邮件内容是否为 Html 格式。</param>
            <param name="recipients">邮件收件人列表。</param>
        </member>
        <member name="M:ESP.Mail.MailManager.Send(System.String,System.Object,System.Net.Mail.MailAddress,System.Net.Mail.MailAddress[],System.Net.Mail.MailAddress[],System.Net.Mail.MailAddress[],System.Net.Mail.Attachment[])">
            <summary>
            根据模板和数据源生成邮件并发送
            </summary>
            <param name="template">邮件模板的虚拟路径。</param>
            <param name="dataSource">数据源对象。</param>
            <param name="replyTo">邮件回复地址。</param>
            <param name="recipients">邮件收件人列表。</param>
            <param name="carbonCopes">邮件抄送列表。</param>
            <param name="blindCarbonCopes">邮件暗送列表。</param>
            <param name="attachments">附件列表</param>
        </member>
        <member name="M:ESP.Mail.MailManager.Send(System.String,System.Object,System.Net.Mail.MailAddress,System.Net.Mail.MailAddress,System.Net.Mail.MailAddress[],System.Net.Mail.MailAddress[],System.Net.Mail.MailAddress[],System.Net.Mail.Attachment[])">
            <summary>
            根据模板和数据源生成邮件并发送
            </summary>
            <param name="template">邮件模板的虚拟路径。</param>
            <param name="dataSource">数据源对象。</param>
            <param name="from">发件人地址。</param>
            <param name="replyTo">邮件回复地址。</param>
            <param name="recipients">邮件收件人列表。</param>
            <param name="carbonCopes">邮件抄送列表。</param>
            <param name="blindCarbonCopes">邮件暗送列表。</param>
            <param name="attachments">附件列表</param>
        </member>
        <member name="M:ESP.Mail.MailManager.Send(System.String,System.String,System.Boolean,System.Net.Mail.MailAddress,System.Net.Mail.MailAddress[],System.Net.Mail.MailAddress[],System.Net.Mail.MailAddress[],System.Net.Mail.Attachment[])">
            <summary>
            发送邮件
            </summary>
            <param name="subject">邮件标题。</param>
            <param name="body">邮件内容。</param>
            <param name="isHtml">邮件内容是否为 Html 格式。</param>
            <param name="replyTo">邮件回复地址。</param>
            <param name="recipients">邮件收件人列表。</param>
            <param name="carbonCopes">邮件抄送列表。</param>
            <param name="blindCarbonCopes">邮件暗送列表。</param>
            <param name="attachments">附件列表</param>
        </member>
        <member name="M:ESP.Mail.MailManager.Send(System.String,System.String,System.Boolean,System.Net.Mail.MailAddress,System.Net.Mail.MailAddress,System.Net.Mail.MailAddress[],System.Net.Mail.MailAddress[],System.Net.Mail.MailAddress[],System.Net.Mail.Attachment[])">
            <summary>
            发送邮件
            </summary>
            <param name="subject">邮件标题。</param>
            <param name="body">邮件内容。</param>
            <param name="isHtml">邮件内容是否为 Html 格式。</param>
            <param name="from">发件人地址。。</param>
            <param name="replyTo">邮件回复地址。</param>
            <param name="recipients">邮件收件人列表。</param>
            <param name="carbonCopes">邮件抄送列表。</param>
            <param name="blindCarbonCopes">邮件暗送列表。</param>
            <param name="attachments">附件列表</param>
        </member>
        <member name="M:ESP.Mail.MailManager.RenderTemplate(System.String,System.Object,System.Net.Mail.MailMessage,System.String@)">
            <summary>
            根据模板和数据源生成 HTML 代码。
            </summary>
            <param name="template">邮件模板的虚拟路径。</param>
            <param name="dataSource">单数据源对象，使用默认键值 DataSource。</param>
            <param name="mailMessage">邮件消息对象。</param>
            <param name="subject">邮件的标题。</param>
            <returns>生成的 HTML 代码。</returns>
        </member>
        <member name="T:ESP.Framework.Entity.WebSiteInfo">
            <summary>
            站点表
            </summary>
        </member>
        <member name="M:ESP.Framework.Entity.WebSiteInfo.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.WebSiteInfo.WebSiteID">
            <summary>
            站点ID
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.WebSiteInfo.WebSiteName">
            <summary>
            站点名字
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.WebSiteInfo.Description">
            <summary>
            站点描述
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.WebSiteInfo.UrlPrefix">
            <summary>
            站点的URL前辍（即 主机名:端口/应用程序路径）
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.WebSiteInfo.Ordinal">
            <summary>
            在管理界面上的显示次序
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.WebSiteInfo.Creator">
            <summary>
            创建者
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.WebSiteInfo.LastModifier">
            <summary>
            最后修改者
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.WebSiteInfo.CreatedTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.WebSiteInfo.LastModifiedTime">
            <summary>
            最后修改时间
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.WebSiteInfo.CreatorName">
            <summary>
            创建人用户名
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.WebSiteInfo.LastModifierName">
            <summary>
            最后修改人用户名
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.WebSiteInfo.RowVersion">
            <summary>
            行版本
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.WebSiteInfo.FramePagePath">
            <summary>
            统一的框架页面的路径
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.WebSiteInfo.HttpRootUrl">
            <summary>
            站点的Http根Url
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.WebSiteInfo.HttpsRootUrl">
            <summary>
            站点的Https根Url
            </summary>
        </member>
        <member name="T:ESP.Framework.BusinessLogic.RoleGroupManager">
            <summary>
            角色控制类
            </summary>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.RoleGroupManager.Get(System.Int32)">
            <summary>
            获取指定ID的角色组
            </summary>
            <param name="id">角色组ID</param>
            <returns>角色组信息</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.RoleGroupManager.GetAll">
            <summary>
            获取所有角色组的列表
            </summary>
            <returns>角色组信息列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.RoleGroupManager.Update(ESP.Framework.Entity.RoleGroupInfo)">
            <summary>
            更新角色组信息
            </summary>
            <param name="roleGroup">要更新的角色组</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.RoleGroupManager.Create(ESP.Framework.Entity.RoleGroupInfo)">
            <summary>
            创建新的角色组
            </summary>
            <param name="roleGroup">要创建的角色组</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.RoleGroupManager.Delete(System.Int32)">
            <summary>
            删除指定ID的角色组
            </summary>
            <param name="id">要删除的角色组的ID</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.RoleGroupManager.GetRoleGroupTree">
            <summary>
            获取所有角色组的列表，并以树形结构返回
            </summary>
            <returns>所有角色组的树形集合</returns>
        </member>
        <member name="T:ESP.Framework.DataAccess.IRoleGroupDataProvider">
            <summary>
            角色数据访问接口
            </summary>
        </member>
        <member name="M:ESP.Framework.DataAccess.IRoleGroupDataProvider.Get(System.Int32)">
            <summary>
            获取指定ID的角色组
            </summary>
            <param name="id">角色组ID</param>
            <returns>角色组信息</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IRoleGroupDataProvider.GetAll">
            <summary>
            获取所有角色组的列表
            </summary>
            <returns>角色组信息列表</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IRoleGroupDataProvider.Update(ESP.Framework.Entity.RoleGroupInfo)">
            <summary>
            更新角色组信息
            </summary>
            <param name="roleGroup">要更新的角色组</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IRoleGroupDataProvider.Create(ESP.Framework.Entity.RoleGroupInfo)">
            <summary>
            创建新的角色组
            </summary>
            <param name="roleGroup">要创建的角色组</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IRoleGroupDataProvider.Delete(System.Int32)">
            <summary>
            删除指定ID的角色组
            </summary>
            <param name="id">要删除的角色组的ID</param>
        </member>
        <member name="T:ESP.Framework.SqlDataAccess.PermissionDataProvider">
            <summary>
            权限数据访问类
            </summary>
        </member>
        <member name="T:ESP.Framework.DataAccess.IPermissionDataProvider">
            <summary>
            权限数据访问接口
            </summary>
        </member>
        <member name="M:ESP.Framework.DataAccess.IPermissionDataProvider.Get(System.Int32)">
            <summary>
            获得取指定ID的权限的详细信息
            </summary>
            <param name="id">权限ID</param>
            <returns>权限信息对象</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IPermissionDataProvider.Add(ESP.Framework.Entity.PermissionInfo)">
            <summary>
            添加新的权限，即将指定的权限分配给指定的权限持有者（角色、用户等）
            </summary>
            <param name="permission">权限对象</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IPermissionDataProvider.Remove(System.Int32)">
            <summary>
            删除指定的权限分配
            </summary>
            <param name="id">要删除的权限分配的ID</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IPermissionDataProvider.GetDefinition(System.Int32)">
            <summary>
            获取指定ID的权限定义
            </summary>
            <param name="id">权限定义的ID</param>
            <returns>权限定义</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IPermissionDataProvider.GetDefinitions(ESP.Framework.Entity.EntityType,System.Int32)">
            <summary>
            获取指定实体的权限定义列表
            </summary>
            <param name="entityType">实体类型</param>
            <param name="entityId">实体ID</param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IPermissionDataProvider.RemoveDefinition(System.Int32)">
            <summary>
            删除指定ID的权限定义
            </summary>
            <param name="id">要删除的权限定义的ID</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IPermissionDataProvider.AddDefinition(ESP.Framework.Entity.PermissionDefinitionInfo)">
            <summary>
            添加新的权限定义
            </summary>
            <param name="permissionDefinition">要添加的权限定义</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IPermissionDataProvider.GetAllDefinitions">
            <summary>
            获取所有的权限定义
            </summary>
            <returns>所有权限定义的列表</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IPermissionDataProvider.GetPermissions(ESP.Framework.Entity.EntityType,System.Int32,ESP.Framework.Entity.PermissionOwnerTypes,System.Int32)">
            <summary>
            获取指定的权限持有者（角色、用户等）对指定的实体对象拥有的权限列表
            </summary>
            <param name="entityType">权限控制的实体的类型</param>
            <param name="entityId">权限控制的实体的ID</param>
            <param name="ownerType">权限持有者类型</param>
            <param name="ownerId">权限持有者ID</param>
            <returns>权限名字的列表</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IPermissionDataProvider.GetRolePermisssions(System.Int32,System.Boolean)">
            <summary>
            获取角色拥有的权限（只针对模块）
            </summary>
            <param name="roleId">角色</param>
            <param name="isFakeRole">是否为内置的伪角色</param>
            <returns>角色拥有的权限列表， key为权限定义， value为模块ID</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IPermissionDataProvider.UpdateRolePermissions(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.Int32,System.Int32}},System.Int32,System.Boolean)">
            <summary>
            更新角色的权限（只针对模块）
            </summary>
            <param name="list">权限列表， key为权限定义， value为模块ID</param>
            <param name="roleId">角色的ID</param>
            <param name="isFakeRole">roleId是否为系统内置的伪角色</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.PermissionDataProvider.Get(System.Int32)">
            <summary>
            获得取指定ID的权限的详细信息
            </summary>
            <param name="id">权限ID</param>
            <returns>权限信息对象</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.PermissionDataProvider.Add(ESP.Framework.Entity.PermissionInfo)">
            <summary>
            添加新的权限，即将指定的权限分配给指定的权限持有者（角色、用户等）
            </summary>
            <param name="permission">权限对象</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.PermissionDataProvider.GetPermissions(ESP.Framework.Entity.EntityType,System.Int32,ESP.Framework.Entity.PermissionOwnerTypes,System.Int32)">
            <summary>
            获取指定的权限持有者（角色、用户等）对指定的实体对象拥有的权限列表
            </summary>
            <param name="entityType">权限控制的实体的类型</param>
            <param name="entityID">权限控制的实体的ID</param>
            <param name="ownerType">权限持有者类型</param>
            <param name="ownerID">权限持有者ID</param>
            <returns>权限名字的列表</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.PermissionDataProvider.Remove(System.Int32)">
            <summary>
            删除指定的权限分配
            </summary>
            <param name="id">要删除的权限分配的ID</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.PermissionDataProvider.GetAllDefinitions">
            <summary>
            获取所有的权限定义
            </summary>
            <returns>所有权限定义的列表</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.PermissionDataProvider.GetDefinition(System.Int32)">
            <summary>
            获取指定ID的权限定义
            </summary>
            <param name="id">权限定义的ID</param>
            <returns>权限定义</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.PermissionDataProvider.GetDefinitions(ESP.Framework.Entity.EntityType,System.Int32)">
            <summary>
            获取指定实体的权限定义列表
            </summary>
            <param name="entityType">实体类型</param>
            <param name="entityID">实体ID</param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.PermissionDataProvider.RemoveDefinition(System.Int32)">
            <summary>
            删除指定ID的权限定义
            </summary>
            <param name="id">要删除的权限定义的ID</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.PermissionDataProvider.AddDefinition(ESP.Framework.Entity.PermissionDefinitionInfo)">
            <summary>
            添加新的权限定义
            </summary>
            <param name="permissionDefinition">要添加的权限定义</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.PermissionDataProvider.GetRolePermisssions(System.Int32,System.Boolean)">
            <summary>
            获取角色拥有的权限（只针对模块）
            </summary>
            <param name="roleId">角色</param>
            <param name="isFakeRole">是否为内置的伪角色</param>
            <returns>角色拥有的权限列表， key为权限定义， value为模块ID</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.PermissionDataProvider.UpdateRolePermissions(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.Int32,System.Int32}},System.Int32,System.Boolean)">
            <summary>
            更新角色的权限（只针对模块）
            </summary>
            <param name="list">权限列表， key为权限定义， value为模块ID</param>
            <param name="roleId">角色的ID</param>
            <param name="isFakeRole">roleId是否为系统内置的伪角色</param>
        </member>
        <member name="T:ESP.Framework.SqlDataAccess.DepartmentDataProvider">
            <summary>
            部门数据访问类
            </summary>
        </member>
        <member name="T:ESP.Framework.DataAccess.IDepartmentDataProvider">
            <summary>
            部门数据访问接口
            </summary>
        </member>
        <member name="M:ESP.Framework.DataAccess.IDepartmentDataProvider.Get(System.Int32)">
            <summary>
            获取指定ID的部门信息
            </summary>
            <param name="id">部门ID</param>
            <returns>部门信息</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IDepartmentDataProvider.GetAll">
            <summary>
            获取所有部门的信息列表
            </summary>
            <returns>所有部门列表</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IDepartmentDataProvider.Create(ESP.Framework.Entity.DepartmentInfo)">
            <summary>
            创建新的部门
            </summary>
            <param name="department">要创建的部门的信息</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IDepartmentDataProvider.Update(ESP.Framework.Entity.DepartmentInfo)">
            <summary>
            更新部门信息
            </summary>
            <param name="department">新的部门信息</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IDepartmentDataProvider.Delete(System.Int32)">
            <summary>
            删除部门
            </summary>
            <param name="id">部门的ID</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IDepartmentDataProvider.GetChildren(System.Int32)">
            <summary>
            获取指定ID的部门的所有直接子级部门的信息列表
            </summary>
            <param name="id">部门ID</param>
            <returns>所有直接子级部门的信息列表</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IDepartmentDataProvider.GetChildrenRecursion(System.Int32)">
            <summary>
            获取部门所有子孙部门
            </summary>
            <param name="parentId">部门ID</param>
            <returns>所有部门列表</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IDepartmentDataProvider.Get(System.String)">
            <summary>
            获取指定名称的部门信息
            </summary>
            <param name="name">部门名称</param>
            <returns>部门信息</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IDepartmentDataProvider.GetEmployeesByDepartment(System.Int32)">
            <summary>
            根据部门获取员工
            </summary>
            <param name="departmentId">部门ID</param>
            <returns>员工列表</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IDepartmentDataProvider.GetByCode(System.String)">
            <summary>
            根据部门代码获取部门信息
            </summary>
            <param name="code">部门代码</param>
            <returns>部门信息</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IDepartmentDataProvider.CodeExists(System.String)">
            <summary>
            检查部门代码是否已经存在
            </summary>
            <param name="code">部门代码</param>
            <returns>存在则返回 true，否则返回 false</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.DepartmentDataProvider.Get(System.Int32)">
            <summary>
            获取指定ID的部门信息
            </summary>
            <param name="id">部门ID</param>
            <returns>部门信息</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.DepartmentDataProvider.GetAll">
            <summary>
            获取所有部门的信息列表
            </summary>
            <returns>所有部门列表</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.DepartmentDataProvider.CodeExists(System.String)">
            <summary>
            检查部门代码是否已经存在
            </summary>
            <param name="code">部门代码</param>
            <returns>存在则返回 true，否则返回 false</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.DepartmentDataProvider.Update(ESP.Framework.Entity.DepartmentInfo)">
            <summary>
            更新部门信息
            </summary>
            <param name="department">新的部门信息</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.DepartmentDataProvider.Create(ESP.Framework.Entity.DepartmentInfo)">
            <summary>
            创建新的部门
            </summary>
            <param name="department">要创建的部门的信息</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.DepartmentDataProvider.Delete(System.Int32)">
            <summary>
            删除部门
            </summary>
            <param name="id">部门的ID</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.DepartmentDataProvider.GetChildren(System.Int32)">
            <summary>
            获取指定ID的部门的所有直接子级部门的信息列表
            </summary>
            <param name="id">部门ID</param>
            <returns>所有直接子级部门的信息列表</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.DepartmentDataProvider.GetChildrenRecursion(System.Int32)">
            <summary>
            获取部门所有子孙部门
            </summary>
            <param name="parentId">部门ID</param>
            <returns>所有部门列表</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.DepartmentDataProvider.Get(System.String)">
            <summary>
            获取指定名称的部门信息
            </summary>
            <param name="name">部门名称</param>
            <returns>部门信息</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.DepartmentDataProvider.GetByCode(System.String)">
            <summary>
            根据部门代码获取部门信息
            </summary>
            <param name="code">部门代码</param>
            <returns>部门信息</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.DepartmentDataProvider.GetEmployeesByDepartment(System.Int32)">
            <summary>
            根据部门获取员工
            </summary>
            <param name="departmentId">部门ID</param>
            <returns>员工列表</returns>
        </member>
        <member name="T:ESP.Framework.DataAccess.Utilities.SqlUtil">
            <summary>
            SQL操作工具
            </summary>
        </member>
        <member name="M:ESP.Framework.DataAccess.Utilities.SqlUtil.SetParameters(System.Data.Common.DbCommand,System.Data.Common.DbParameter[])">
            <summary>
            向DbCommand内添加DbParameter数组
            </summary>
            <param name="cmd"></param>
            <param name="dbps"></param>
        </member>
        <member name="T:ESP.Framework.BusinessLogic.SettingManager">
            <summary>
            系统设置控制类
            </summary>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.SettingManager.Get">
            <summary>
            获取系统设置信息
            </summary>
            <returns>系统设置信息对象</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.SettingManager.GetSettings(System.Int32,System.Boolean)">
            <summary>
            获取站点的所有设置
            </summary>
            <param name="webSiteId">设置所属的站点ID，如果为0表示返回公共设置</param>
            <param name="includeSystemSettings">如果站点不为0， 该参数指定是否同时返回公共设置</param>
            <returns>站点的所有设置项</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.SettingManager.GetSettings(System.Int32)">
            <summary>
            返回站点的所有设置，包括公共设置
            </summary>
            <param name="webSiteId"></param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.SettingManager.GetSetting(System.Int32,System.String,System.Boolean)">
            <summary>
            获取站点指定名称的设置项
            </summary>
            <param name="webSiteId">设置所属的站点ID，如果为0表示返回公共设置</param>
            <param name="settingName">设置的名称</param>
            <param name="includeSystemSettings">如果站点不为0， 该参数指定是否同时返回公共设置</param>
            <returns>站点指定名称的设置项</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.SettingManager.AddDefinition(ESP.Framework.Entity.SettingDefinitionInfo)">
            <summary>
            添加设置定义
            </summary>
            <param name="definition">设置定义</param>
            <return>新定义的标识ID</return>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.SettingManager.GetDefinitions(System.Int32)">
            <summary>
            获取站点的所有设置定义
            </summary>
            <param name="webSiteId">站点ID</param>
            <returns>所有设置定义的列表</returns>
            <remarks>
            返回值中包括公共设置定义中可重载的定义。
            </remarks>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.SettingManager.SaveSetting(ESP.Framework.Entity.SettingInfo,System.Int32)">
            <summary>
            保存设置
            </summary>
            <param name="value">设置项信息</param>
            <param name="webSiteId">设置所属的站点的ID，如果为0， 则表示是公共设置</param>
        </member>
        <member name="T:ESP.DataAccessAuthorization.BusinessLogic.WebPageDataAccess">
            <summary>
            数据表单权限操作业务类
            </summary>
        </member>
        <member name="M:ESP.DataAccessAuthorization.BusinessLogic.WebPageDataAccess.NewMember(ESP.DataAccessAuthorization.Entity.WebPageDataAccess)">
            <summary>
            新建权限操作
            如果新建重复的权限操作会捕捉到相应的异常，并返回（-1）
            </summary>
            <param name="model"></param>
            <returns>如果新建成功返回新建立的权限操作序号，如果新建失败也没有引发异常则返回（0），插入重复数据则会引发异常返回（-1）</returns>
        </member>
        <member name="M:ESP.DataAccessAuthorization.BusinessLogic.WebPageDataAccess.UpdateAction(ESP.DataAccessAuthorization.Entity.WebPageDataAccess)">
            <summary>
            更新权限操作
            如果更新的数据量不等于1都视为失败，由于没有规范的处理方法，所以抛出异常
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:ESP.DataAccessAuthorization.BusinessLogic.WebPageDataAccess.GetWebPageDataAccessActionList(System.Int32)">
            <summary>
            获取页面的数据权限配置列表
            </summary>
            <param name="webPageId"></param>
            <returns></returns>
        </member>
        <member name="T:ESP.DataAccessAuthorization.BusinessLogic.DataAccessMember">
            <summary>
            权限成员业务类
            </summary>
        </member>
        <member name="M:ESP.DataAccessAuthorization.BusinessLogic.DataAccessMember.NewMember(ESP.DataAccessAuthorization.Entity.DataAccessMember)">
            <summary>
            新建权限操作
            如果新建重复的权限操作会捕捉到相应的异常，并返回（-1）
            </summary>
            <param name="model"></param>
            <returns>如果新建成功返回新建立的权限操作序号，如果新建失败也没有引发异常则返回（0），插入重复数据则会引发异常返回（-1）</returns>
        </member>
        <member name="M:ESP.DataAccessAuthorization.BusinessLogic.DataAccessMember.UpdateAction(ESP.DataAccessAuthorization.Entity.DataAccessMember)">
            <summary>
            更新权限操作
            如果更新的数据量不等于1都视为失败，由于没有规范的处理方法，所以抛出异常
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:ESP.DataAccessAuthorization.BusinessLogic.DataAccessMember.Get(System.Int32)">
            <summary>
            根据主键获取一个权限操作实例对象
            </summary>
            <param name="memberId"></param>
            <returns></returns>
        </member>
        <member name="M:ESP.DataAccessAuthorization.BusinessLogic.DataAccessMember.GetMemberListBySettings(System.Collections.Generic.IList{System.Int32})">
            <summary>
            根据设定获取AccessMemberList
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="T:ESP.Utilities.UrlUtility">
            <summary>
            URL操作辅助类
            </summary>
        </member>
        <member name="M:ESP.Utilities.UrlUtility.RemoveQuery(System.String,System.String)">
            <summary>
            从Url字符串中移除指定的查询参数
            </summary>
            <param name="url">Url字符串</param>
            <param name="queryName">要移除的参数的名字</param>
            <returns>移除的指定的参数后的Url</returns>
        </member>
        <member name="M:ESP.Utilities.UrlUtility.GetPathAndQuery(System.String)">
            <summary>
            将Url从 http(s)://domain/path_and_query 转为 /path_and_query 形式
            </summary>
            <param name="url">原始Url</param>
            <returns>Path and Query</returns>
        </member>
        <member name="M:ESP.Utilities.UrlUtility.GetRelativePath(System.String,System.String,System.Boolean)">
            <summary>
            获取 path 相对于 basePath 的相对路径
            </summary>
            <param name="path">原始路径</param>
            <param name="basePath">基本路径</param>
            <param name="startWithSlash">结果路径是否以'/'开头</param>
            <returns>相对路径</returns>
        </member>
        <member name="M:ESP.Utilities.UrlUtility.AddQuery(System.String,System.String,System.String)">
            <summary>
            将指定的查询参数添加到Url字符串中
            </summary>
            <param name="url">Url字符串</param>
            <param name="queryName">查询参数的名字</param>
            <param name="queryValue">查询参数的值（已经进行了Url编码）</param>
            <returns>添加了指定参数后的Url</returns>
        </member>
        <member name="M:ESP.Utilities.UrlUtility.ConcatUrl(System.String,System.String)">
            <summary>
            将两个Url片段连接成一个Url，如果Left后边和right前边都有“/”，则删除其中一个，如果都没有，则添加一个。
            </summary>
            <param name="left">Url的左半部分</param>
            <param name="right">Url的右半部分</param>
            <returns>拼接后的Url</returns>
        </member>
        <member name="T:ESP.Security.DefaultUrlAuthorizationProvider">
            <summary>
            对Url进行授权检验的默认提供程序实现
            </summary>
        </member>
        <member name="T:ESP.Security.IUrlAuthorizationProvider">
            <summary>
            对Url进行授权检验的提供程序的抽象接口
            </summary>
        </member>
        <member name="M:ESP.Security.IUrlAuthorizationProvider.IsUserAllowed(System.Security.Principal.IPrincipal,System.Uri,System.String)">
            <summary>
            判断用户对指定的Url是否有权进行指定的动作
            </summary>
            <param name="user">用户</param>
            <param name="url">要访问的Url</param>
            <param name="verb">对Url的动作（GET, POST....）</param>
            <returns>如果用户有权访问，返回true，否则返回false。</returns>
        </member>
        <member name="M:ESP.Security.DefaultUrlAuthorizationProvider.IsUserAllowed(System.Security.Principal.IPrincipal,System.Uri,System.String)">
            <summary>
            判断用户对指定的Url是否有权进行指定的动作
            </summary>
            <param name="user">用户</param>
            <param name="url">要访问的Url</param>
            <param name="verb">对Url的动作（GET, POST....）</param>
            <returns>如果用户有权访问，返回true，否则返回false。</returns>
        </member>
        <member name="T:ESP.Tree`1">
            <summary>
            树型数据结构
            </summary>
            <typeparam name="T">树节点的值的类型</typeparam>
        </member>
        <member name="M:ESP.Tree`1.RemoveChild(ESP.Tree{`0})">
            <summary>
            删除子节点
            </summary>
            <param name="node">要删除的子节点</param>
        </member>
        <member name="M:ESP.Tree`1.RemoveChildAt(System.Int32)">
            <summary>
            删除指定位置的子节点
            </summary>
            <param name="index">要删除的子节点的位置索引</param>
        </member>
        <member name="M:ESP.Tree`1.AddChild(ESP.Tree{`0})">
            <summary>
            添加一个子节点
            </summary>
            <param name="node">要添加的子节点</param>
        </member>
        <member name="M:ESP.Tree`1.InsertChild(System.Int32,ESP.Tree{`0})">
            <summary>
            插入一个子节点
            </summary>
            <param name="index">插入位置</param>
            <param name="node">要插入的子节点</param>
        </member>
        <member name="M:ESP.Tree`1.ToXml">
            <summary>
            生成Xml
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESP.Tree`1.#ctor(System.Object,System.String,`0)">
            <summary>
            构造一个树节点
            </summary>
            <param name="key">节点的键</param>
            <param name="text">节点的文本</param>
            <param name="value">节点的值</param>
        </member>
        <member name="M:ESP.Tree`1.GetEnumerator">
            <summary>
            获取子节点的枚举器
            </summary>
            <returns>枚举器对象</returns>
        </member>
        <member name="P:ESP.Tree`1.Parent">
            <summary>
            父节点
            </summary>
        </member>
        <member name="P:ESP.Tree`1.Item(System.Int32)">
            <summary>
            按索引获取子节点
            </summary>
            <param name="index">子节点的索引</param>
            <returns>子节点</returns>
        </member>
        <member name="P:ESP.Tree`1.Count">
            <summary>
            当前节点的子节点的数量
            </summary>
        </member>
        <member name="P:ESP.Tree`1.Key">
            <summary>
            树节点的键
            </summary>
        </member>
        <member name="P:ESP.Tree`1.Text">
            <summary>
            树节点的文本
            </summary>
        </member>
        <member name="P:ESP.Tree`1.Value">
            <summary>
            树节点的值
            </summary>
        </member>
        <member name="T:ESP.Framework.DataAccess.IDepartmentTypeDataProvider">
            <summary>
            部门类别数据提供程序抽象接口
            </summary>
        </member>
        <member name="M:ESP.Framework.DataAccess.IDepartmentTypeDataProvider.Get(System.Int32)">
            <summary>
            获取指定ID的部门类型
            </summary>
            <param name="id">类型ID</param>
            <returns>部门类型信息对象</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IDepartmentTypeDataProvider.GetAll">
            <summary>
            获取所有部门类型列表
            </summary>
            <returns>所有部门类型信息的列表</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IDepartmentTypeDataProvider.Create(ESP.Framework.Entity.DepartmentTypeInfo)">
            <summary>
            创建新的部门类型
            </summary>
            <param name="departmentType">要创建的部门类型对象</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IDepartmentTypeDataProvider.Update(ESP.Framework.Entity.DepartmentTypeInfo)">
            <summary>
            更新部门类型信息
            </summary>
            <param name="departmentType">新的部门类型信息</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IDepartmentTypeDataProvider.Delete(System.Int32)">
            <summary>
            删除指定ID的部门类型
            </summary>
            <param name="id">要删除的部门类型的ID</param>
        </member>
        <member name="T:ESP.Framework.Entity.AuditorInfo">
            <summary>
            部门审核人、负责人信息
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.AuditorInfo.RecordId">
            <summary>
            记录流水号
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.AuditorInfo.DepartmentId">
            <summary>
            部门 ID
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.AuditorInfo.AuditorType">
            <summary>
            记录类型，如 Director, Manager, CEO, etc.
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.AuditorInfo.AuditorId">
            <summary>
            用户 ID
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.AuditorInfo.AuditorName">
            <summary>
            用户中文全名
            </summary>
        </member>
        <member name="T:ESP.Configuration.ProviderHelper`1">
            <summary>
            用于创建指定的提供程序类实例
            </summary>
            <typeparam name="T">要获取的 Provider 的接口类型。</typeparam>
        </member>
        <member name="P:ESP.Configuration.ProviderHelper`1.Instance">
            <summary>
            以获取TProviderInterface类型提供程序实现类的实例
            </summary>
        </member>
        <member name="T:ESP.Configuration.ProviderAttribute">
            <summary>
            将接口标记为 Provider 接口。
            </summary>
        </member>
        <member name="P:ESP.UserPoint.Entity.GiftInfo.GiftID">
            <summary>
            礼品编号
            </summary>
        </member>
        <member name="P:ESP.UserPoint.Entity.GiftInfo.Code">
            <summary>
            礼品代码
            </summary>
        </member>
        <member name="P:ESP.UserPoint.Entity.GiftInfo.Name">
            <summary>
            礼品名称
            </summary>
        </member>
        <member name="P:ESP.UserPoint.Entity.GiftInfo.Description">
            <summary>
            礼品描述
            </summary>
        </member>
        <member name="P:ESP.UserPoint.Entity.GiftInfo.Points">
            <summary>
            所需积分
            </summary>
        </member>
        <member name="P:ESP.UserPoint.Entity.GiftInfo.Count">
            <summary>
            剩余数量
            </summary>
        </member>
        <member name="P:ESP.UserPoint.Entity.GiftInfo.State">
            <summary>
            当前状态
            </summary>
        </member>
        <member name="P:ESP.UserPoint.Entity.GiftInfo.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:ESP.UserPoint.Entity.GiftInfo.Creator">
            <summary>
            创建人
            </summary>
        </member>
        <member name="P:ESP.UserPoint.Entity.GiftInfo.TimeStamp">
            <summary>
            时间戳，为了避免商品购买并发产生的脏数据
            </summary>
        </member>
        <member name="T:ESP.Logging.LogEntry">
            <summary>
            日志项
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntry.LogID">
            <summary>
            日志的自动编号
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntry.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntry.Category">
            <summary>
            类别
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntry.LogLevel">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntry.ProcessID">
            <summary>
            当前进程ID
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntry.ThreadID">
            <summary>
            当前线程ID
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntry.ApplicationName">
            <summary>
            当前应用程序名称
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntry.ApplicationVersion">
            <summary>
            当前应用程序版本
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntry.Url">
            <summary>
            当前请求的Url
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntry.PagePath">
            <summary>
            当前正在执行的页面的路径（建议使用相对于应用程序根的虚拟路径）
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntry.UserID">
            <summary>
            当前用户的ID
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntry.ServerIP">
            <summary>
            服务器IP
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntry.serverName">
            <summary>
            服务器地址
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntry.ServerPort">
            <summary>
            服务器站点
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntry.IsSecure">
            <summary>
            是否安全连接
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntry.ClientAddress">
            <summary>
            客户端地址
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntry.ClientPort">
            <summary>
            客户端端口
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntry.UserAgent">
            <summary>
            客户端浏览器
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntry.RequestMethod">
            <summary>
            HTTP 动作(GET, POST, ...)
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntry.ExceptionType">
            <summary>
            异常类型
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntry.ExceptionInfo">
            <summary>
            异常的具体信息
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntry.ExtendedProperties">
            <summary>
            其它相关信息
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntry.LogTime">
            <summary>
            日志的记录时间
            </summary>
        </member>
        <member name="T:ESP.Logging.LogLevel">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="F:ESP.Logging.LogLevel.None">
            <summary>
            无效，在查询时表示不过滤级别
            </summary>
        </member>
        <member name="F:ESP.Logging.LogLevel.Information">
            <summary>
            一般性信息
            </summary>
        </member>
        <member name="F:ESP.Logging.LogLevel.Warning">
            <summary>
            警告
            </summary>
        </member>
        <member name="F:ESP.Logging.LogLevel.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="F:ESP.Logging.LogLevel.Fatal">
            <summary>
            致使错误
            </summary>
        </member>
        <member name="T:ESP.Framework.Entity.UserInfo">
            <summary>
            用户信息表
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.UserInfo.UserID">
            <summary>
            标识列
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.UserInfo.Username">
            <summary>
            用户名，全局唯一
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.UserInfo.FirstNameCN">
            <summary>
            中文名字
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.UserInfo.LastNameCN">
            <summary>
            中文姓氏
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.UserInfo.FullNameCN">
            <summary>
            中文全名
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.UserInfo.FirstNameEN">
            <summary>
            英文名字
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.UserInfo.LastNameEN">
            <summary>
            英文姓氏
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.UserInfo.FullNameEN">
            <summary>
            英文命名
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.UserInfo.Email">
            <summary>
            邮件地址
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.UserInfo.CreatedDate">
            <summary>
            创建日期/注册日期
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.UserInfo.LastActivityDate">
            <summary>
            最后一次活动时间
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.UserInfo.Status">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.UserInfo.IsApproved">
            <summary>
            是否已通过审核
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.UserInfo.IsLockedOut">
            <summary>
            是否被锁定
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.UserInfo.LastLoginDate">
            <summary>
            最后登录时间
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.UserInfo.LastPasswordChangedDate">
            <summary>
            最后密码修改时间
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.UserInfo.LastLockoutDate">
            <summary>
            最后锁定时间
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.UserInfo.Comment">
            <summary>
            备注
            </summary>
        </member>
        <member name="T:ESP.Framework.BusinessLogic.WebSiteManager">
            <summary>
            站点控制类
            </summary>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.WebSiteManager.Get(System.Int32)">
            <summary>
            获取指定ID的站点的信息
            </summary>
            <param name="id">站点的ID</param>
            <returns>站点信息</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.WebSiteManager.GetAll">
            <summary>
            获取所有站点的列表
            </summary>
            <returns>站点列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.WebSiteManager.Delete(System.Int32)">
            <summary>
            删除指定ID的站点
            </summary>
            <param name="id">要删除的站点的ID</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.WebSiteManager.Get">
            <summary>
            获取当前站点的信息
            </summary>
            <returns>当前站点的信息</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.WebSiteManager.Create(ESP.Framework.Entity.WebSiteInfo)">
            <summary>
            创建新的站点
            </summary>
            <param name="webSite">要创建的站点</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.WebSiteManager.Update(ESP.Framework.Entity.WebSiteInfo)">
            <summary>
            更新站点信息
            </summary>
            <param name="webSite">要更新的站点的信息</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.WebSiteManager.GetByUrlPrefix(System.String)">
            <summary>
            获取指定Url前缀的站点
            </summary>
            <param name="urlPrefix">站点的Url前缀(不包含http://或https://，也不包含最后的反斜杠)</param>
            <returns>站点信息对象</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.WebSiteManager.GetByUser(System.Int32)">
            <summary>
            获取指定ID的用户可以访问的站点的列表
            </summary>
            <param name="userId">用户ID</param>
            <returns>可访问的站点列表</returns>
        </member>
        <member name="T:ESP.Framework.SqlDataAccess.UserDataProvider">
            <summary>
            用户信息数据访问类
            </summary>
        </member>
        <member name="T:ESP.Framework.DataAccess.IUserDataProvider">
            <summary>
            用户信息数据访问接口
            </summary>
        </member>
        <member name="M:ESP.Framework.DataAccess.IUserDataProvider.Get(System.String)">
            <summary>
            获取指定用户名的用户信息
            </summary>
            <param name="userName">用户名</param>
            <returns>用户信息</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IUserDataProvider.GetAll">
            <summary>
            获取所有注册用户的信息列表
            </summary>
            <returns>系统中所有用户的信息列表</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IUserDataProvider.Delete(System.Int32)">
            <summary>
            删除指定ID的用户
            </summary>
            <param name="id">要删除的用户ID</param>
            <remarks>
            该操作并不执行实际的删除操作，
            仅设置IsDeleted标志字段
            </remarks>
        </member>
        <member name="M:ESP.Framework.DataAccess.IUserDataProvider.Create(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Int32@)">
            <summary>
            创建新用户
            </summary>
            <param name="userName">用户名</param>
            <param name="firstNameCN">中文名</param>
            <param name="lastNameCN">中文姓氏</param>
            <param name="firstNameEN">英文名</param>
            <param name="lastNameEN">英文姓氏</param>
            <param name="email">用户的安全email</param>
            <param name="isApproved">新用户是否通过审核</param>
            <param name="password">密码</param>
            <param name="newUserId">返回新用户的ID</param>
            <returns>
            操作错误状态
            如果创建用户成功，返回 UserCreateStatus.Success;
            如果用户名效，返回 UserCreateStatus.InvalidUserName;
            如果密码无效，返回 UserCreateStatus.InvalidPassword;
            如果Email无效，返回 UserCreateStatus.InvalidEmail;
            如果用户名已经存在，返回 UserCreateStatus.DuplicateUserName;
            如果Email已经存在且配置了Email唯一，返回 UserCreateStatus.DuplicateEmail;
            如果发生未知错误，返回 UserCreateStatus.ProviderError;
            </returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IUserDataProvider.Update(ESP.Framework.Entity.UserInfo)">
            <summary>
            更新用户信息
            </summary>
            <param name="user">新的用户信息</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IUserDataProvider.ValidateUser(System.String,System.String)">
            <summary>
            验证用户名密码是否匹配
            </summary>
            <param name="userName">用户名</param>
            <param name="password">密码</param>
            <returns>
            如果用户名密码不匹配则返回 UserErrorCodes.UnmatchedUserPassword;
            如果用户已经被锁定，则返回 UserErrorCodes.UserLockedOut;
            否则返回成功 UserErrorCodes.Success
            </returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IUserDataProvider.ChangePassword(System.String,System.String,System.String)">
            <summary>
            变更用户密码
            要检查用户原始密码正确性
            更新用户密码时还要检测userName、userid和old password是否全部一致
            </summary>
            <param name="userName">要修改密码的用户名</param>
            <param name="oldPassword">旧密码</param>
            <param name="newPassword">新密码</param>
            <returns>
            如果用户名密码不匹配则返回 UserErrorCodes.UnmatchedUserPassword;
            如果用户已经被锁定，则返回 UserErrorCodes.UserLockedOut;
            否则返回成功 UserErrorCodes.Success
            </returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IUserDataProvider.ResetPassword(System.String,System.String)">
            <summary>
            强制修改用户密码，用于管理员操作，或密码重置操作
            </summary>
            <param name="userName">用户名</param>
            <param name="password">新的密码</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IUserDataProvider.SetResetPasswordCode(System.String,System.String)">
            <summary>
            设置重置密码操作中的验证码
            </summary>
            <param name="userName">用户名</param>
            <param name="code">验证码</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IUserDataProvider.GetResetPasswordCode(System.String)">
            <summary>
            获取最后一封重置密码邮件中使用的验证码
            </summary>
            <param name="userName">用户名</param>
            <returns>验证码</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IUserDataProvider.GetLatestSignedIn(System.Int32)">
            <summary>
            获取最后登录过的count名用户
            </summary>
            <param name="count">要获取的用户数量</param>
            <returns>用户列表</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IUserDataProvider.GetLatestActivity(System.Int32)">
            <summary>
            获取最后活动过的count名用户
            </summary>
            <param name="count">要获取的用户数量</param>
            <returns>用户列表</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IUserDataProvider.GetLatestRegistered(System.Int32)">
            <summary>
            获取最后注册的count名用户
            </summary>
            <param name="count">要获取的用户数量</param>
            <returns>用户列表</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IUserDataProvider.Search(System.Int32,System.Int32,System.String,System.String,ESP.Framework.DataAccess.Utilities.DbDataParameter[])">
            <summary>
            搜索用户
            </summary>
            <param name="pageSize">分页大小</param>
            <param name="pageIndex">页索引</param>
            <param name="orderBy">排序规则</param>
            <param name="where">查询条件</param>
            <param name="paras">查询条件中使用的参数</param>
            <returns>匹配条件的用户的列表</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IUserDataProvider.Get(System.Int32,System.Boolean)">
            <summary>
            获取指定ID的用户信息
            </summary>
            <param name="id">用户ID</param>
            <param name="isUserOnline">是否更新用户的最后活动时间</param>
            <returns>用户信息</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IUserDataProvider.LockUser(System.Int32)">
            <summary>
            锁定用户
            </summary>
        </member>
        <member name="M:ESP.Framework.DataAccess.IUserDataProvider.UnlockUser(System.Int32)">
            <summary>
            取消锁定用户
            </summary>
        </member>
        <member name="M:ESP.Framework.DataAccess.IUserDataProvider.GetLockedOutUsers">
            <summary>
            获取所有被锁定用户
            </summary>
            <returns>所有被锁定用户的列表</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IUserDataProvider.SearchUsersByChineseName(System.String)">
            <summary>
            根据中文名模糊查询用户
            </summary>
            <param name="nameKeyword">中文名关键字</param>
            <returns>用户列表</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.UserDataProvider.Get(System.Int32,System.Boolean)">
            <summary>
            获取指定ID的用户信息
            </summary>
            <param name="id">用户ID</param>
            <param name="isUserOnline">是否更新用户的最后活动时间</param>
            <returns>用户信息</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.UserDataProvider.GetAll">
            <summary>
            获取所有注册用户的信息列表
            </summary>
            <returns>系统中所有用户的信息列表</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.UserDataProvider.Update(ESP.Framework.Entity.UserInfo)">
            <summary>
            更新用户信息
            </summary>
            <param name="user">新的用户信息</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.UserDataProvider.Delete(System.Int32)">
            <summary>
            删除指定ID的用户
            </summary>
            <param name="id">要删除的用户ID</param>
            <remarks>
            该操作并不执行实际的删除操作，
            仅设置IsDeleted标志字段
            </remarks>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.UserDataProvider.Get(System.String)">
            <summary>
            获取指定用户名的用户信息
            </summary>
            <param name="username">用户名</param>
            <returns>用户信息</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.UserDataProvider.ValidateUser(System.String,System.String)">
            <summary>
            验证用户名密码是否匹配
            </summary>
            <param name="username">用户名</param>
            <param name="password">密码</param>
            <returns>
            如果用户名密码不匹配则返回 UserErrorCodes.UnmatchedUserPassword;
            如果用户已经被锁定，则返回 UserErrorCodes.UserLockedOut;
            否则返回成功 UserErrorCodes.Success
            </returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.UserDataProvider.Create(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Int32@)">
            <summary>
            创建新用户
            </summary>
            <param name="username">用户名</param>
            <param name="firstNameCN">中文名</param>
            <param name="lastNameCN">中文姓氏</param>
            <param name="firstNameEN">英文名</param>
            <param name="lastNameEN">英文姓氏</param>
            <param name="email">用户的安全email</param>
            <param name="isApproved">新用户是否通过审核</param>
            <param name="password">密码</param>
            <param name="newUserID">返回新用户的ID</param>
            <returns>
            操作错误状态
            如果创建用户成功，返回 UserCreateStatus.Success;
            如果用户名效，返回 UserCreateStatus.InvalidUserName;
            如果密码无效，返回 UserCreateStatus.InvalidPassword;
            如果Email无效，返回 UserCreateStatus.InvalidEmail;
            如果用户名已经存在，返回 UserCreateStatus.DuplicateUserName;
            如果Email已经存在且配置了Email唯一，返回 UserCreateStatus.DuplicateEmail;
            如果发生未知错误，返回 UserCreateStatus.ProviderError;
            </returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.UserDataProvider.ChangePassword(System.String,System.String,System.String)">
            <summary>
            变更用户密码
            要检查用户原始密码正确性
            更新用户密码时还要检测username、userid和old password是否全部一致
            </summary>
            <param name="username">要修改密码的用户名</param>
            <param name="oldPassword">旧密码</param>
            <param name="newPassword">新密码</param>
            <returns>
            如果用户名密码不匹配则返回 UserErrorCodes.UnmatchedUserPassword;
            如果用户已经被锁定，则返回 UserErrorCodes.UserLockedOut;
            否则返回成功 UserErrorCodes.Success
            </returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.UserDataProvider.ResetPassword(System.String,System.String)">
            <summary>
            强制修改用户密码，用于管理员操作，或密码重置操作
            </summary>
            <param name="username">用户名</param>
            <param name="password">新的密码</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.UserDataProvider.SetResetPasswordCode(System.String,System.String)">
            <summary>
            设置重置密码操作中的验证码
            </summary>
            <param name="username">用户名</param>
            <param name="code">验证码</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.UserDataProvider.GetResetPasswordCode(System.String)">
            <summary>
            获取最后一封重置密码邮件中使用的验证码
            </summary>
            <param name="username">用户名</param>
            <returns>验证码</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.UserDataProvider.Search(System.Int32,System.Int32,System.String,System.String,ESP.Framework.DataAccess.Utilities.DbDataParameter[])">
            <summary>
            搜索用户
            </summary>
            <param name="pageSize">分页大小</param>
            <param name="pageIndex">要获取的页的索引</param>
            <param name="orderBy">排序规则</param>
            <param name="where">过滤条件</param>
            <param name="paras">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.UserDataProvider.GetLatestActivity(System.Int32)">
            <summary>
            获取最后活动的指定数量的用户
            </summary>
            <param name="count">结果的数量</param>
            <returns>最后活动的用户的列表</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.UserDataProvider.GetLatestSignedIn(System.Int32)">
            <summary>
            获取最后登录过的指定数量的用户
            </summary>
            <param name="count">结果的数量</param>
            <returns>最后登录过的用户的列表</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.UserDataProvider.GetLatestRegistered(System.Int32)">
            <summary>
            获取最后注册的指定数量的用户
            </summary>
            <param name="count">结果的数量</param>
            <returns>最后注册的用户的列表</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.UserDataProvider.LockUser(System.Int32)">
            <summary>
            锁定用户
            </summary>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.UserDataProvider.UnlockUser(System.Int32)">
            <summary>
            取消锁定用户
            </summary>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.UserDataProvider.GetLockedOutUsers">
            <summary>
            获取所有被锁定了的用户
            </summary>
            <returns>所有被锁定的用户的列表</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.UserDataProvider.SearchUsersByChineseName(System.String)">
            <summary>
            根据中文名模糊查询用户
            </summary>
            <param name="nameKeyword">中文名关键字</param>
            <returns>用户列表</returns>
        </member>
        <member name="T:ESP.Framework.DataAccess.IAuditorDataProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESP.Framework.DataAccess.IAuditorDataProvider.GetAuditor(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="departmentId"></param>
            <param name="auditorType"></param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IAuditorDataProvider.GetAuditorId(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="departmentId"></param>
            <param name="auditorType"></param>
            <returns></returns>
        </member>
        <member name="T:ESP.Framework.BusinessLogic.ModuleManager">
            <summary>
            模块控制类
            </summary>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.ModuleManager.MakeKey(ESP.Framework.Entity.ModuleType,System.Int32)">
            <summary>
            生成模块定义的唯一标识
            </summary>
            <param name="type">模块定义的类型</param>
            <param name="id">模块的ID</param>
            <returns>唯一标识</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.ModuleManager.MakeKey(ESP.Framework.Entity.ModuleInfo)">
            <summary>
            生成模块定义的唯一标识
            </summary>
            <param name="m">模块定义</param>
            <returns>唯一标识</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.ModuleManager.Get(System.Int32)">
            <summary>
            获取指定ID的模块
            </summary>
            <param name="id">模块ID</param>
            <returns>模块信息对象</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.ModuleManager.GetByWebSite(System.Int32)">
            <summary>
            获取指定站点ID的所有模块的列表
            </summary>
            <param name="webSiteId">站点ID</param>
            <returns>模块列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.ModuleManager.GetAll">
            <summary>
            获取所有模块的列表
            </summary>
            <returns>模块列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.ModuleManager.Update(ESP.Framework.Entity.ModuleInfo)">
            <summary>
            更新模块信息
            </summary>
            <param name="module">要更新的模块信息</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.ModuleManager.Create(ESP.Framework.Entity.ModuleInfo)">
            <summary>
            创建新的模块记录
            </summary>
            <param name="module">要创建的模块信息对象</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.ModuleManager.Delete(System.Int32)">
            <summary>
            删除指定ID的模块
            </summary>
            <param name="id">要删除的模块的ID</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.ModuleManager.GetWebSiteTree(System.Int32)">
            <summary>
            获取指定ID的站点的所有模块的列表，并以树形结构返回
            </summary>
            <param name="webSiteId">站点ID</param>
            <returns>模块的树形结构对象</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.ModuleManager.GetUserTree(System.Int32,System.Int32)">
            <summary>
            获取指定ID的用户拥有访问权的模块的列表，并以树形结构返回
            </summary>
            <param name="webSiteId">站点的ID</param>
            <param name="userId">用户的ID</param>
            <returns>模块的树形结构对象</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.ModuleManager.GetByUser(System.Int32,System.Int32)">
            <summary>
            获取指定ID的用户拥有访问权的模块的列表
            </summary>
            <param name="webSiteId">站点的ID</param>
            <param name="userId">用户的ID</param>
            <returns>模块的列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.ModuleManager.GetEntireTree">
            <summary>
            获取所有模块的树状列表
            </summary>
            <returns>所有模块的树形列表</returns>
            <remarks>
            树节点对象的 Key 字段为模块类型与模块 ID 的组合
            其中高 32 位为模块类型，低 32 位为模块 ID
            </remarks>
        </member>
        <member name="T:ESP.Framework.BusinessLogic.EmployeeManager">
            <summary>
            员工操作类
            </summary>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.EmployeeManager.Get(System.Int32)">
            <summary>
            获取指定ID的员工信息
            </summary>
            <param name="id">员工ID</param>
            <returns>员工信息</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.EmployeeManager.GetAll">
            <summary>
            获取所有的员工信息
            </summary>
            <returns>所有员工信息的列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.EmployeeManager.GetByType(System.Int32)">
            <summary>
            获取指定类型的员工列表
            </summary>
            <param name="typeId">员工类型ID</param>
            <returns>员工列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.EmployeeManager.Search(System.Int32,System.Int32,System.String,System.String,ESP.Framework.DataAccess.Utilities.DbDataParameter[])">
            <summary>
            查询符合相关条件的员工记录，并按指定的排序规则排序后分页返回
            </summary>
            <param name="pageSize">分页大小</param>
            <param name="pageIndex">要返回的页码，索引从0开始</param>
            <param name="orderBy">
            排序规则（对用户表中列的引用须使用u.前缀，
            对员工表中列的引用须使用e.前缀，
            如 “u.Username ASC” 即按Username列升序排列）
            </param>
            <param name="where">
            查询条件（对Users表中列名的引用须使用u.前缀，对员工表中列的引用须使用e.前缀）
            </param>
            <param name="paras">
            查询条件中要使用到的参数，对于SQL Server，这里的参数名不带前辍符号 "@"，
            例如对于命名参数 @EmployeeName， 只需标识为 EmployeeName 即可。
            _PageIndex和_PageSize两个参数为本方法内部分页保留使用。
            </param>
            <returns>查询到的员工记录列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.EmployeeManager.Update(ESP.Framework.Entity.EmployeeInfo)">
            <summary>
            更新员工信息
            </summary>
            <param name="info">员工信息</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.EmployeeManager.Delete(System.Int32)">
            <summary>
            删除指定ID的员工信息
            </summary>
            <param name="id">要删除的员工信息的ID</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.EmployeeManager.Create(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,ESP.Framework.Entity.EmployeeInfo)">
            <summary>
            创建新员工，同时创建关联用户
            </summary>
            <param name="username">用户名</param>
            <param name="firstNameCN">中文名</param>
            <param name="lastNameCN">中文姓氏</param>
            <param name="firstNameEN">英文名</param>
            <param name="lastNameEN">英文姓氏</param>
            <param name="email">安全Email</param>
            <param name="isApproved">用户是否通过审核</param>
            <param name="password">密码</param>
            <param name="employee">员工信息</param>
            <returns>
            操作错误状态
            如果创建用户成功，返回 EmployeeCreateStatus.Success;
            如果用户名效，返回 EmployeeCreateStatus.InvalidUserName;
            如果密码无效，返回 EmployeeCreateStatus.InvalidPassword;
            如果Email无效，返回 EmployeeCreateStatus.InvalidEmail;
            如果用户名已经存在，返回 EmployeeCreateStatus.DuplicateUserName;
            如果Email已经存在且配置了Email唯一，返回 EmployeeCreateStatus.DuplicateEmail;
            如果员工类型ID无效，返回 EmployeeCreateStatus.InvalidTypeID;
            如果员工代码无效，返回 EmployeeCreateStatus.InvalidCode;
            如果员工代码已经存在，返回 EmployeeCreateStatus.DuplicateCode;
            如果发生未知错误，返回 EmployeeCreateStatus.ProviderError;
            </returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.EmployeeManager.CreateEmployeeCode">
            <summary>
            生成员工代码
            </summary>
            <returns>员工代码</returns>
            <remarks>
            员工代码的生成根据配置文件中 ESP 节的 employeeCodePattern 生成，
            employeeCodePattern 中包含的由"{"和"}"声明的占位符会被自动替换
            </remarks>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.EmployeeManager.CreateEmployeeCode(System.String,System.String)">
            <summary>
            生成员工代码
            </summary>
            <param name="pattern">员工代码的生成模式，其中由"{"和"}"界定的令牌会被替换个时间或自动编号。</param>
            <param name="numberType">编号类型。</param>
            <returns>员工代码</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.EmployeeManager.GetByCode(System.String)">
            <summary>
            获取指定员工编号的员工信息
            </summary>
            <param name="code">员工编号</param>
            <returns>员工信息</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.EmployeeManager.GetTypes">
            <summary>
            获取职工类型列表
            </summary>
            <returns>职工类型列表，Key为类型ID，Value为类型名称</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.EmployeeManager.AddType(System.String)">
            <summary>
            添加职工类型
            </summary>
            <param name="type">类型名称</param>
            <returns>类型ID</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.EmployeeManager.GetTypeName(System.Int32)">
            <summary>
            获得职工类型
            </summary>
            <param name="typeId">类型ID</param>
            <returns>类型名称</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.EmployeeManager.RemoveType(System.String)">
            <summary>
            删除职工类型
            </summary>
            <param name="type">要删除的类型名称</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.EmployeeManager.RemoveType(System.Int32)">
            <summary>
            删除职工类型
            </summary>
            <param name="typeId">要删除的类型ID</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.EmployeeManager.GetDictionary">
            <summary>
            获取所有员工的列表，并以字典返回
            </summary>
            <returns>所有员工的字典列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.EmployeeManager.GetEmployeesByDepartment(System.Int32)">
            <summary>
            根据部门ID获取员工列表
            </summary>
            <param name="departmentId">部门ID</param>
            <returns>员工列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.EmployeeManager.Search(System.String)">
            <summary>
            搜索员工
            </summary>
            <param name="keyword">关键字</param>
            <returns>匹配的员工列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.EmployeeManager.Search(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            搜索员工，并分页返回记录集合
            </summary>
            <param name="keyword">关键字</param>
            <param name="pageIndex">要获取的记录的页码</param>
            <param name="pageSize">分页大小</param>
            <param name="recordCount">总记录数，用于计算总页数</param>
            <returns>匹配的员工列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.EmployeeManager.SearchByChineseName(System.String)">
            <summary>
            根据中文名字搜索员工
            </summary>
            <param name="name">关键字</param>
            <returns>匹配的员工列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.EmployeeManager.SearchByChineseName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            根据中文名字搜索员工，并分页返回记录集合
            </summary>
            <param name="name">关键字</param>
            <param name="pageIndex">要获取的记录的页码</param>
            <param name="pageSize">分页大小</param>
            <param name="recordCount">总记录数，用于计算总页数</param>
            <returns>匹配的员工列表</returns>
        </member>
        <member name="T:ESP.Framework.BusinessLogic.EmployeeCreateStatus">
            <summary>
            员工创建结果
            </summary>
        </member>
        <member name="F:ESP.Framework.BusinessLogic.EmployeeCreateStatus.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:ESP.Framework.BusinessLogic.EmployeeCreateStatus.InvalidUserName">
            <summary>
            无效的用户名
            </summary>
        </member>
        <member name="F:ESP.Framework.BusinessLogic.EmployeeCreateStatus.InvalidPassword">
            <summary>
            无效的密码
            </summary>
        </member>
        <member name="F:ESP.Framework.BusinessLogic.EmployeeCreateStatus.InvalidEmail">
            <summary>
            无效的邮件
            </summary>
        </member>
        <member name="F:ESP.Framework.BusinessLogic.EmployeeCreateStatus.DuplicateUserName">
            <summary>
            用户名已经存在
            </summary>
        </member>
        <member name="F:ESP.Framework.BusinessLogic.EmployeeCreateStatus.DuplicateEmail">
            <summary>
            邮件已经被使用
            </summary>
        </member>
        <member name="F:ESP.Framework.BusinessLogic.EmployeeCreateStatus.UserRejected">
            <summary>
            用户被驳回
            </summary>
        </member>
        <member name="F:ESP.Framework.BusinessLogic.EmployeeCreateStatus.InvalidTypeID">
            <summary>
            无效的员工类型
            </summary>
        </member>
        <member name="F:ESP.Framework.BusinessLogic.EmployeeCreateStatus.InvalidCode">
            <summary>
            无效的员工编号
            </summary>
        </member>
        <member name="F:ESP.Framework.BusinessLogic.EmployeeCreateStatus.DuplicateCode">
            <summary>
            员工编号已经存在
            </summary>
        </member>
        <member name="F:ESP.Framework.BusinessLogic.EmployeeCreateStatus.ProviderError">
            <summary>
            未知的数据提供程序错误
            </summary>
        </member>
        <member name="T:ESP.DataAccessAuthorization.Entity.DataAccessAction">
            <summary>
            操作权限描述
            </summary>
        </member>
        <member name="P:ESP.DataAccessAuthorization.Entity.DataAccessAction.DataAccessActionID">
            <summary>
            许可操作序号
            </summary>
        </member>
        <member name="P:ESP.DataAccessAuthorization.Entity.DataAccessAction.ActionName">
            <summary>
            操作名称，用于显示
            </summary>
        </member>
        <member name="P:ESP.DataAccessAuthorization.Entity.DataAccessAction.Action">
            <summary>
            动作代号
            </summary>
        </member>
        <member name="P:ESP.DataAccessAuthorization.Entity.DataAccessAction.ActionIdentity">
            <summary>
            操作唯一编码
            </summary>
        </member>
        <member name="P:ESP.DataAccessAuthorization.Entity.DataAccessAction.ActionType">
            <summary>
            操作类型：当非自定义操作类型时，（0）查看；（1）更新；（2）删除；（3）新建。自定义操作类型时根据定义来确定。所有>（0）的操作类型均附带（0）的权限。特殊的权限（Int32的MaxValue）代表完全控制。
            </summary>
        </member>
        <member name="P:ESP.DataAccessAuthorization.Entity.DataAccessAction.CustomAction">
            <summary>
            自定义操作类型
            </summary>
        </member>
        <member name="P:ESP.DataAccessAuthorization.Entity.DataAccessAction.Description">
            <summary>
            操作权限说明，将业务逻辑详细描述与此。例如：PR任何人可以创建；自己创建的PR单自己可以查看；等等。“自己”从具体的单据数据中来，不存储在这几张表内，由业务逻辑控制。
            </summary>
        </member>
        <member name="P:ESP.DataAccessAuthorization.Entity.DataAccessAction.AccessService">
            <summary>
            权限判定服务，提供服务的类名，通过反射可以实例化；需要实现IAccessService接口
            </summary>
        </member>
        <member name="P:ESP.DataAccessAuthorization.Entity.DataAccessAction.CreateTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESP.DataAccessAuthorization.Entity.DataAccessAction.Creator">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESP.DataAccessAuthorization.Entity.DataAccessAction.CreatorName">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESP.DataAccessAuthorization.Entity.DataAccessAction.DataAccessMemberList">
            <summary>
            当前Action的Member列表
            </summary>
        </member>
        <member name="T:ESP.Logging.ILogProvider">
            <summary>
            日志操作接口
            </summary>
        </member>
        <member name="M:ESP.Logging.ILogProvider.Add(System.String,System.String,ESP.Logging.LogLevel,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            记录一条日志，该方法的实现应避免抛出任务异常
            </summary>
            <param name="message">消息</param>
            <param name="category">日志类别</param>
            <param name="logLevel">日志级别</param>
            <param name="processId">当前进程ID</param>
            <param name="threadId">当前线程ID</param>
            <param name="applicationName">当前应用程序名称</param>
            <param name="applicationVersion">当前应用程序版本</param>
            <param name="url">当前请求的Url</param>
            <param name="pagePath">当前正在执行的页面的路径</param>
            <param name="userId">当前用户ID</param>
            <param name="serverHostName">服务器名称</param>
            <param name="serverAddress">服务器站IP，如果主机为多IP配置，则该参数指定当前请求发生的IP</param>
            <param name="serverPort">当前请求的端口号</param>
            <param name="clientHostName">客户机名称</param>
            <param name="clientAddress">客户机IP地址</param>
            <param name="clientPort">客户端端口</param>
            <param name="userAgent">客户端浏览器</param>
            <param name="requestMethod">HTTP请求方法（GET, POST, ...）</param>
            <param name="exceptionType">异常类型</param>
            <param name="exceptionInfo">异常的详细信息</param>
            <param name="extendedProperties">其它信息</param>
        </member>
        <member name="M:ESP.Logging.ILogProvider.Search(System.Int64,System.Int32,System.String,ESP.Logging.LogLevel,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.DateTime,System.DateTime,System.Int64@)">
            <summary>
            搜索日志条目
            </summary>
            <param name="pageIndex">分码，从0开始</param>
            <param name="pageSize">分页大小</param>
            <param name="category">日志类别</param>
            <param name="logLevel">要检索的日志的级别</param>
            <param name="applicationName">应用程序名称（模糊匹配）</param>
            <param name="applicationVersion">应用程序版本</param>
            <param name="pagePath">页面路径（模糊匹配）</param>
            <param name="userId">用户ID</param>
            <param name="serverAddress">服务器站IP</param>
            <param name="serverPort">当前请求的端口号</param>
            <param name="clientAddress">客户端地址</param>
            <param name="clientPort">客户端端口</param>
            <param name="userAgent">客户端浏览器（模糊匹配）</param>
            <param name="requestMethod">HTTP请求方法（GET, POST, ...）</param>
            <param name="exceptionType">异常类型（模糊匹配）</param>
            <param name="logTimeStart">要检索的日志记录的起始时间</param>
            <param name="logTimeEnd">要检索的日志记录的结束时间</param>
            <param name="recordCount">当前总记录数</param>
            <returns>检索到的日志列表</returns>
            <remarks>
            除userId外对于所有的过滤条件参数，如果为0或空引用或空字符串或
            ESP.Framework.DataAccess.Utilities.NullValues.DateTime，则忽略该参数。
            userId 为 -1 时忽略 userId 参数。
            
            recordCount 用于保持分页状态。因为日志表中的数据可能会快速增长，在
            查询完第一次后再次查询第二页时，需要知道第一页的位置，以免快速增长
            的日志将第一页淹没，而使第二页返回更晚的记录。在第一次查询时使用0作
            为recordCount参数的值，后序翻页调用使用第一次调用返回的recordCount，
            即可在多次翻页中保持分页的相对位置。
            </remarks>
        </member>
        <member name="M:ESP.Logging.ILogProvider.Get(System.Int64)">
            <summary>
            根据ID获取日志条目
            </summary>
            <param name="logId">日志条目的ID</param>
            <returns>日志条目</returns>
        </member>
        <member name="T:ESP.Quaternary`4">
            <summary>
            用于存储三个相关元素的类。
            </summary>
            <typeparam name="TFirst">第一个元素的类型</typeparam>
            <typeparam name="TSecond">第二个元素的类型</typeparam>
            <typeparam name="TThird">第三个元素的类型</typeparam>
            <typeparam name="TFourth">第四个元素的类型</typeparam>
        </member>
        <member name="M:ESP.Quaternary`4.#ctor">
            <summary>
            默认构造方法
            </summary>
        </member>
        <member name="M:ESP.Quaternary`4.#ctor(`0,`1,`2,`3)">
            <summary>
            构造一个三元对象
            </summary>
            <param name="first">第一个元素</param>
            <param name="second">第二个元素</param>
            <param name="third">第三个元素</param>
            <param name="fourth">第四个元素</param>
        </member>
        <member name="P:ESP.Quaternary`4.First">
            <summary>
            获取或设置第一个元素
            </summary>
        </member>
        <member name="P:ESP.Quaternary`4.Second">
            <summary>
            获取或设置第二个元素
            </summary>
        </member>
        <member name="P:ESP.Quaternary`4.Third">
            <summary>
            获取或设置第三个元素
            </summary>
        </member>
        <member name="P:ESP.Quaternary`4.Fourth">
            <summary>
            获取或设置第四个元素
            </summary>
        </member>
        <member name="T:ESP.Web.UI.PageBase">
            <summary>
            页面基类
            </summary>
        </member>
        <member name="M:ESP.Web.UI.PageBase.GetDepartmentListByParentID(System.Int32)">
            <summary>
            根据部门ID获取所有直接子部门
            </summary>
            <param name="parentId">部门ID</param>
            <returns>所有直接子部门</returns>
        </member>
        <member name="M:ESP.Web.UI.PageBase.GetLeafChildDepartments(System.Int32)">
            <summary>
            获取指定ID的部门下所有叶子部门结点
            </summary>
            <param name="parentId">部门ID</param>
            <returns>所有叶子部门结点</returns>
        </member>
        <member name="M:ESP.Web.UI.PageBase.ShowMessage(System.String,System.String,System.String)">
            <summary>
            导航到显示信息页面
            </summary>
            <param name="title">标题</param>
            <param name="message">显示信息</param>
            <param name="backUrl">返回Url</param>
            <remarks>
              信息显示结束后返回该功能首页
            </remarks>
        </member>
        <member name="M:ESP.Web.UI.PageBase.HasWebSitePermission(System.String)">
            <summary>
            判断当前用户是否拥有指定的站点级权限
            </summary>
            <param name="permission">权限名字</param>
            <returns>如果当前用户有指定的权限，返回true；否则返回false。</returns>
        </member>
        <member name="M:ESP.Web.UI.PageBase.HasWebPagePermission(System.String)">
            <summary>
            判断当前用户是否拥有指定的页面级权限
            </summary>
            <param name="permission">权限名字</param>
            <returns>如果当前用户有指定的权限，返回true；否则返回false。</returns>
        </member>
        <member name="M:ESP.Web.UI.PageBase.EvalX(System.String)">
            <summary>
            根据当前数据绑定上下文计算表达式的值，如果值为日期类型
            且等于ESP.Framework.DataAccess.Utilities.NullValues，则返回空字符串
            </summary>
            <param name="expression">表达式</param>
            <returns>表达示的值</returns>
        </member>
        <member name="M:ESP.Web.UI.PageBase.EvalX(System.String,System.String)">
            <summary>
            根据当前数据绑定上下文计算表达式的值，如果值为日期类型
            且等于ESP.Framework.DataAccess.Utilities.NullValues，则返回空字符串
            </summary>
            <param name="expression">表达式</param>
            <param name="format">格式化字符串</param>
            <returns>表达示的值</returns>
        </member>
        <member name="M:ESP.Web.UI.PageBase.ShowCompleteMessage(System.String,System.String)">
            <summary>
            输出脚本在客户端显示提示对话框并跳转到指定Url
            </summary>
            <param name="message">提示信息</param>
            <param name="redirectTo">目标Url</param>
        </member>
        <member name="M:ESP.Web.UI.PageBase.OnError(System.EventArgs)">
            <summary>
            默认错误处理
            </summary>
            <param name="e">默认事件参数</param>
        </member>
        <member name="M:ESP.Web.UI.PageBase.OnInit(System.EventArgs)">
            <summary>
            页面初始化
            </summary>
            <param name="e">事件参数。</param>
        </member>
        <member name="M:ESP.Web.UI.PageBase.GetUserInfo(System.Int32)">
            <summary>
            获取人员信息
            </summary>
            <param name="userId">用户ID</param>
            <returns>人员信息描述</returns>
        </member>
        <member name="M:ESP.Web.UI.PageBase.GetUserInfo(System.Int32,System.String)">
            <summary>
            获取人员信息
            </summary>
            <param name="userId">用户ID</param>
            <param name="auditDesc">审核备注</param>
            <returns>人员信息描述</returns>
        </member>
        <member name="P:ESP.Web.UI.PageBase.CurrentUser">
            <summary>
            当前员工
            </summary>
        </member>
        <member name="P:ESP.Web.UI.PageBase.CurrentUserID">
            <summary>
            当前用户ID
            </summary>
        </member>
        <member name="P:ESP.Web.UI.PageBase.CurrentUserCode">
            <summary>
            当前用户登录名
            </summary>
        </member>
        <member name="P:ESP.Web.UI.PageBase.CurrentUserName">
            <summary>
            当前用户中文名
            </summary>
        </member>
        <member name="P:ESP.Web.UI.PageBase.UserInfo">
            <summary>
            当前用户的用户信息，如果当前用户为匿名用户，则为空引用(null)
            </summary>
        </member>
        <member name="P:ESP.Web.UI.PageBase.MemberInfo">
            <summary>
            当前用户（特指员工）的完整信息
            包含UserInfo、EmployeeInfo和EmployeePositionList
            </summary>
        </member>
        <member name="P:ESP.Web.UI.PageBase.UserID">
            <summary>
            当前用户的ID，如果用户为匿名用户，则为 0
            </summary>
        </member>
        <member name="P:ESP.Web.UI.PageBase.WebSiteInfo">
            <summary>
            当前站点的信息
            </summary>
        </member>
        <member name="P:ESP.Web.UI.PageBase.WebPageInfo">
            <summary>
            当前页面的信息
            </summary>
        </member>
        <member name="P:ESP.Web.UI.PageBase.ModuleInfo">
            <summary>
            当前页面所属模块的信息
            </summary>
        </member>
        <member name="P:ESP.Web.UI.PageBase.SkipLogging">
             <summary>
            是否跳过日志记录
            因为有些系统操作，不需要记录日志
             </summary>
        </member>
        <member name="P:ESP.Web.UI.PageBase.IsAdministrator">
            <summary>
            当前用户是否是管理员
            </summary>
        </member>
        <member name="T:ESP.Web.UI.PageSecurityMode">
            <summary>
            页面安全模式
            </summary>
        </member>
        <member name="F:ESP.Web.UI.PageSecurityMode.None">
            <summary>
            关闭安全检查
            </summary>
        </member>
        <member name="T:ESP.Utilities.JavascriptUtility">
            <summary>
            Javascript辅助类
            </summary>
        </member>
        <member name="M:ESP.Utilities.JavascriptUtility.QuoteJScriptString(System.String,System.Boolean)">
            <summary>
            将字符串的内容置于引号中以便Javascript使用
            </summary>
            <param name="value">字符串值</param>
            <param name="forUrl">是否用于Url中</param>
            <returns>可以在Javascript中使用的字段串</returns>
        </member>
        <member name="M:ESP.Utilities.JavascriptUtility.QuoteJScriptString(System.String,System.Boolean,System.Boolean)">
            <summary>
            将字符串的内容置于引号中以便Javascript使用
            </summary>
            <param name="value">字符串值</param>
            <param name="forUrl">是否用于Url中</param>
            <param name="addQuotes">是否在字符串的两端添加双引号</param>
            <returns>可以在Javascript中使用的字段串</returns>
            <example>
            string s = "a string \" - ";
            Response.Write("var s = " + JavascriptHelper.QuoteJScriptString(s, false, true));
            
            输出结果： var s = "a string \" - "
            </example>
        </member>
        <member name="T:ESP.Framework.SqlDataAccess.RoleDataProvider">
            <summary>
            角色数据访问类
            </summary>
        </member>
        <member name="T:ESP.Framework.DataAccess.IRoleDataProvider">
            <summary>
            角色数据接口
            </summary>
        </member>
        <member name="M:ESP.Framework.DataAccess.IRoleDataProvider.Get(System.Int32)">
            <summary>
            获取指定ID的角色
            </summary>
            <param name="id">角色ID</param>
            <returns>角色信息</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IRoleDataProvider.GetAll">
            <summary>
            获取所有角色
            </summary>
            <returns>所有角色的列表</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IRoleDataProvider.Create(ESP.Framework.Entity.RoleInfo)">
            <summary>
            创建新角色
            </summary>
            <param name="role">新角色信息</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IRoleDataProvider.Update(ESP.Framework.Entity.RoleInfo)">
            <summary>
            更新角色
            </summary>
            <param name="role">要更新的角色信息</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IRoleDataProvider.Delete(System.Int32)">
            <summary>
            删除指定的角色
            </summary>
            <param name="id">角色ID</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IRoleDataProvider.GetUserRoleIDs(System.Int32)">
            <summary>
            获取指定用户直接或间接隶属的角色的ID列表
            </summary>
            <param name="userId">用户ID</param>
            <returns>角色ID列表</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IRoleDataProvider.AddEntityToRole(System.Int32,System.Int32,ESP.Framework.Entity.RoleOwnerType)">
            <summary>
            将指定的实体添加到角色中
            </summary>
            <param name="entityId">实体ID</param>
            <param name="roleId">角色ID</param>
            <param name="type">实体类型</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IRoleDataProvider.RemoveEntityFromRole(System.Int32,System.Int32,ESP.Framework.Entity.RoleOwnerType)">
            <summary>
            将指定的实体从角色中移除
            </summary>
            <param name="entityId">实体ID</param>
            <param name="roleId">角色ID</param>
            <param name="type">实体类型</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IRoleDataProvider.GetByEntity(System.Int32,ESP.Framework.Entity.RoleOwnerType)">
            <summary>
            获取指定实体所属的角色列表
            </summary>
            <param name="entityId">实体ID</param>
            <param name="entityType">实体类型</param>
            <returns>实体所属于的角色的列表</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IRoleDataProvider.GetUsersInRole(System.Int32)">
            <summary>
            获取属于指定角色的所有部门
            </summary>
            <param name="roleId">角色ID</param>
            <returns>属于该角色的所有部门</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IRoleDataProvider.GetEmployeesInRole(System.Int32)">
            <summary>
            获取直接属于指定角色的所有用户
            </summary>
            <param name="roleId">角色ID</param>
            <returns>直接属于该角色的所有用户</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IRoleDataProvider.GetDepartmentsInRole(System.Int32)">
            <summary>
            获取直接属于指定角色的所有员工
            </summary>
            <param name="roleId">角色ID</param>
            <returns>直接属于该角色的所有员工</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IRoleDataProvider.GetUserRoles(System.Int32)">
            <summary>
            获取指定用户的所有的角色，包括直接和间接角色。
            </summary>
            <param name="userId">用户的ID</param>
            <returns>用户所属的所有角色信息的列表。</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.RoleDataProvider.Get(System.Int32)">
            <summary>
            获取指定ID的角色
            </summary>
            <param name="id">角色ID</param>
            <returns>角色信息</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.RoleDataProvider.GetAll">
            <summary>
            获取所有角色
            </summary>
            <returns>所有角色的列表</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.RoleDataProvider.Create(ESP.Framework.Entity.RoleInfo)">
            <summary>
            创建新角色
            </summary>
            <param name="role">新角色信息</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.RoleDataProvider.Update(ESP.Framework.Entity.RoleInfo)">
            <summary>
            更新角色
            </summary>
            <param name="role">要更新的角色信息</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.RoleDataProvider.Delete(System.Int32)">
            <summary>
            删除指定的角色
            </summary>
            <param name="id">角色ID</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.RoleDataProvider.GetUserRoleIDs(System.Int32)">
            <summary>
            获取指定用户直接或间接隶属的角色的ID列表
            </summary>
            <param name="userId">用户ID</param>
            <returns>角色ID列表</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.RoleDataProvider.AddEntityToRole(System.Int32,System.Int32,ESP.Framework.Entity.RoleOwnerType)">
            <summary>
            将指定的实体添加到角色中
            </summary>
            <param name="entityID">实体ID</param>
            <param name="roleId">角色ID</param>
            <param name="type">实体类型</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.RoleDataProvider.RemoveEntityFromRole(System.Int32,System.Int32,ESP.Framework.Entity.RoleOwnerType)">
            <summary>
            将指定的实体从角色中移除
            </summary>
            <param name="entityID">实体ID</param>
            <param name="roleId">角色ID</param>
            <param name="type">实体类型</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.RoleDataProvider.GetByEntity(System.Int32,ESP.Framework.Entity.RoleOwnerType)">
            <summary>
            获取指定实体所属的角色列表
            </summary>
            <param name="entityID">实体ID</param>
            <param name="entityType">实体类型</param>
            <returns>实体所属于的角色的列表</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.RoleDataProvider.GetDepartmentsInRole(System.Int32)">
            <summary>
            获取属于指定角色的所有部门
            </summary>
            <param name="roleId">角色ID</param>
            <returns>属于该角色的所有部门</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.RoleDataProvider.GetUsersInRole(System.Int32)">
            <summary>
            获取直接属于指定角色的所有用户
            </summary>
            <param name="roleId">角色ID</param>
            <returns>直接属于该角色的所有用户</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.RoleDataProvider.GetEmployeesInRole(System.Int32)">
            <summary>
            获取直接属于指定角色的所有员工
            </summary>
            <param name="roleId">角色ID</param>
            <returns>直接属于该角色的所有员工</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.RoleDataProvider.GetUserRoles(System.Int32)">
            <summary>
            获取指定用户的所有的角色，包括直接和间接角色。
            </summary>
            <param name="userId">用户的ID</param>
            <returns>用户所属的所有角色信息的列表。</returns>
        </member>
        <member name="T:ESP.Compatible.Employee">
            <summary>
            员工
            </summary>
        </member>
        <member name="M:ESP.Compatible.Employee.#ctor">
            <summary>
            默认构造方法
            </summary>
        </member>
        <member name="M:ESP.Compatible.Employee.#ctor(System.Int32)">
            <summary>
            根据用户ID构造一个当前类实例
            </summary>
            <param name="uid">用户ID</param>
        </member>
        <member name="M:ESP.Compatible.Employee.CreateFromEmployeeInfo(ESP.Framework.Entity.EmployeeInfo)">
            <summary>
            从ESP.Framework.Entity.EmployeeInfo对象创建当前类实例
            </summary>
            <param name="info">ESP.Framework.Entity.EmployeeInfo对象</param>
            <returns>当前类实例</returns>
        </member>
        <member name="M:ESP.Compatible.Employee.GetDepartmentIDs">
            <summary>
            获取当前员工所属部门的ID列表
            </summary>
            <returns>当前员工所属部门的ID列表</returns>
        </member>
        <member name="M:ESP.Compatible.Employee.GetDepartmentNames">
            <summary>
            获取当前员工所属部门的名称列表
            </summary>
            <returns>当前员工所属部门的名称列表</returns>
        </member>
        <member name="M:ESP.Compatible.Employee.GetName(System.String)">
            <summary>
            根据ItCode得到用户中文名称
            </summary>
            <param name="userCode">用户ItCode</param>
            <returns>用户中文名称</returns>
        </member>
        <member name="M:ESP.Compatible.Employee.GetDepartments(System.Int32)">
            <summary>
            获取指定SysID的员工所属的部门列表
            </summary>
            <param name="sysId"></param>
            <returns></returns>
        </member>
        <member name="M:ESP.Compatible.Employee.GetDataSetByName(System.String)">
            <summary>
            通过中文名模糊查询员工
            </summary>
            <param name="name">搜索关键字</param>
            <returns>匹配的员工</returns>
        </member>
        <member name="M:ESP.Compatible.Employee.GetDataSetUserByKey(System.String,System.Int32[])">
            <summary>
            根据关键字和部门ID查询员工
            </summary>
            <param name="keyValue">关键字</param>
            <param name="depids">部门ID数组</param>
            <returns>匹配的员工</returns>
        </member>
        <member name="M:ESP.Compatible.Employee.GetDataSetUserByKey(System.String,System.Int32[],System.String)">
            <summary>
            根据关键字和部门ID及附加过滤条件查询员工
            </summary>
            <param name="keyValue">关键字</param>
            <param name="depids">部门ID数组</param>
            <param name="additionalFilter">附加过滤条件</param>
            <returns>匹配的员工</returns>
        </member>
        <member name="M:ESP.Compatible.Employee.GetDataSetUserByKey_Department(System.String,System.Int32)">
            <summary>
            根据关键字和部门ID查询员工
            </summary>
            <param name="keyValue">关键字</param>
            <param name="depid">部门ID</param>
            <returns>匹配的员工</returns>
        </member>
        <member name="P:ESP.Compatible.Employee.IntID">
            <summary>
            唯一ID
            </summary>
        </member>
        <member name="P:ESP.Compatible.Employee.SysID">
            <summary>
            唯一ID
            </summary>
        </member>
        <member name="P:ESP.Compatible.Employee.ITCode">
            <summary>
            代码(相当于ESP中的用户名)
            </summary>
        </member>
        <member name="P:ESP.Compatible.Employee.Name">
            <summary>
            名称(相当于ESP中的中文名)
            </summary>
        </member>
        <member name="P:ESP.Compatible.Employee.EMail">
            <summary>
            邮件地址
            </summary>
        </member>
        <member name="P:ESP.Compatible.Employee.Enable">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="P:ESP.Compatible.Employee.Mobile">
            <summary>
            移动电话
            </summary>
        </member>
        <member name="P:ESP.Compatible.Employee.Telephone">
            <summary>
            电话
            </summary>
        </member>
        <member name="P:ESP.Compatible.Employee.Address">
            <summary>
            地址
            </summary>
        </member>
        <member name="P:ESP.Compatible.Employee.ID">
            <summary>
            员工编号
            </summary>
        </member>
        <member name="P:ESP.Compatible.Employee.DimissionStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESP.Compatible.Employee.PositionDescription">
            <summary>
            员工职位描述
            </summary>
        </member>
        <member name="T:ESP.Compatible.ConfigManager">
            <summary>
            配置管理
            </summary>
        </member>
        <member name="F:ESP.Compatible.ConfigManager.MaxRecordCount">
            <summary>
            最大记录数
            </summary>
        </member>
        <member name="F:ESP.Compatible.ConfigManager._defaultErrorPage">
            <summary>
            LSF框架站点 出错页面
            </summary>
        </member>
        <member name="P:ESP.Compatible.ConfigManager.SiteLogonUrl">
            <summary>
            登录Url
            </summary>
        </member>
        <member name="P:ESP.Compatible.ConfigManager.DefaultSiteErrorPage">
            <summary>
            获取默认的错误页面名称
            </summary>
        </member>
        <member name="T:ESP.Compatible.Department">
            <summary>
            部门信息
            </summary>
        </member>
        <member name="M:ESP.Compatible.Department.#ctor(ESP.Framework.Entity.DepartmentInfo)">
            <summary>
            根据一个ESP.Framework.Entity.DepartmentInfo对象构造一个当前类实例
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:ESP.Compatible.Department.#ctor">
            <summary>
            默认构造方法
            </summary>
        </member>
        <member name="P:ESP.Compatible.Department.UniqID">
            <summary>
            唯一ID
            </summary>
        </member>
        <member name="P:ESP.Compatible.Department.DepartmentName">
            <summary>
            部门名称
            </summary>
        </member>
        <member name="P:ESP.Compatible.Department.NodeName">
            <summary>
            部门名称
            </summary>
        </member>
        <member name="P:ESP.Compatible.Department.Description">
            <summary>
            部门描述
            </summary>
        </member>
        <member name="P:ESP.Compatible.Department.Level">
            <summary>
            部门级别
            </summary>
        </member>
        <member name="P:ESP.Compatible.Department.Type">
            <summary>
            部门类型
            </summary>
        </member>
        <member name="P:ESP.Compatible.Department.Sort">
            <summary>
            部门排序
            </summary>
        </member>
        <member name="P:ESP.Compatible.Department.Status">
            <summary>
            部门状态
            </summary>
        </member>
        <member name="P:ESP.Compatible.Department.ParentID">
            <summary>
            父级部门ID
            </summary>
        </member>
        <member name="P:ESP.Compatible.Department.Parent">
            <summary>
            父级部门对象
            </summary>
        </member>
        <member name="T:ESP.Compatible.DepartmentManager">
            <summary>
            部门管理
            </summary>
        </member>
        <member name="M:ESP.Compatible.DepartmentManager.GetDepartmentByPK(System.Int32)">
            <summary>
            获取指定ID的部门
            </summary>
            <param name="departmentId">部门ID</param>
            <returns>部门信息</returns>
        </member>
        <member name="M:ESP.Compatible.DepartmentManager.GetByParent(System.Int32)">
            <summary>
            获取部门的所有直接子部门
            </summary>
            <param name="parentId">部门ID</param>
            <returns>所有直接子部门</returns>
        </member>
        <member name="M:ESP.Compatible.DepartmentManager.GetListForAJAX(System.Int32)">
            <summary>
            获取部门的所有直接子部门的ID和名称的对应列表，该方法用于AJAX加载数据
            </summary>
            <param name="parentId">部门ID</param>
            <returns>所有直接子部门的ID和名称的对应列表</returns>
        </member>
        <member name="M:ESP.Compatible.DepartmentManager.XmlEncode(System.String)">
            <summary>
             对字符串中的XML特殊字符做处理
            </summary>
            <param name="inStr">需要处理的字符串</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:ESP.Compatible.DepartmentManager.GetXml">
            <summary>
            获取部门树的XML
            </summary>
            <returns>部门树的XML</returns>
        </member>
        <member name="M:ESP.Compatible.DepartmentManager.GetHtml(System.String)">
            <summary>
            获取部门树的HTML
            </summary>
            <param name="url">XSLT文件的Url</param>
            <returns>部门树的HTML</returns>
        </member>
        <member name="T:ESP.Compatible.UserManager">
            <summary>
            用户管理
            </summary>
        </member>
        <member name="M:ESP.Compatible.UserManager.GetUserName(System.String)">
            <summary>
            根据用户登录名获取用户中文名
            </summary>
            <param name="userCode">用户登录名</param>
            <returns>用户中文名</returns>
        </member>
        <member name="M:ESP.Compatible.UserManager.GetUserName(System.Int32)">
            <summary>
            根据用户唯一ID获取用户的中文名
            </summary>
            <param name="sysId">唯一ID</param>
            <returns>用户中文名</returns>
        </member>
        <member name="T:ESP.Compatible.UserPrivilegeManager">
            <summary>
            用户权限管理
            </summary>
        </member>
        <member name="M:ESP.Compatible.UserPrivilegeManager.GetNavigateTreeDT(System.String)">
            <summary>
            获取用户可访问的导航列表
            </summary>
            <param name="itcode">用户的ITCode</param>
            <returns>用户可访问的导航列表</returns>
        </member>
        <member name="M:ESP.Compatible.UserPrivilegeManager.GetNavigateTreeDT(System.Int32)">
            <summary>
            获取用户可访问的导航列表
            </summary>
            <param name="sysId">用户的SysID</param>
            <returns>用户可访问的导航列表</returns>
        </member>
        <member name="T:ESP.Data.Linq.IQueryDescriptor">
            <summary>
            查询描述接口。
            </summary>
        </member>
        <member name="M:ESP.Data.Linq.IQueryDescriptor.CreateContext">
            <summary>
            创建一个查询上下文实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESP.Data.Linq.IQueryDescriptor.CreateQuery(System.Object)">
            <summary>
            创建查询对象。
            </summary>
            <param name="context">查询上下文。</param>
            <returns>当前查询描述对象表描述的查询。</returns>
        </member>
        <member name="T:ESP.Data.Linq.DelayedQuery">
            <summary>
            延迟查询控制类。
            </summary>
        </member>
        <member name="M:ESP.Data.Linq.DelayedQuery.FindIEnumerable(System.Type)">
            <summary>
            辅助类，目的不明。
            </summary>
            <param name="seqType"></param>
            <returns></returns>
        </member>
        <member name="M:ESP.Data.Linq.DelayedQuery.GetElementType(System.Type)">
            <summary>
            辅助类，目的不明。
            </summary>
            <param name="seqType"></param>
            <returns></returns>
        </member>
        <member name="M:ESP.Data.Linq.DelayedQuery.Create``1(ESP.Data.Linq.IQueryDescriptor)">
            <summary>
            创建延迟查询类实例，该查询实例在创建时不需要查询上下文对象， 可以
            随时执行查询，而不必被限制在查询上下文的生命周期内。
            </summary>
            <typeparam name="T">要查询的数据源中的数据项的类型。</typeparam>
            <param name="query">对描述的查询。</param>
            <returns>查询类实例。</returns>
            <remarks>
            因为创建查询类实例时并不需要查询上下文对象， 不会像一般查询类实例
            一样只能在其查询上下文对象的生命期内使用， 所以可以用来作为方法的
            返回值，并在任务时候执行查询。
            </remarks>
        </member>
        <member name="M:ESP.Data.Linq.DelayedQuery.Create``1">
            <summary>
            创建延迟查询类实例。
            </summary>
            <typeparam name="TEntity">要查询的实体的类型。</typeparam>
            <returns>延迟查询实例。</returns>
        </member>
        <member name="T:ESP.Data.Linq.DelayedQuery.FakeDataQuery`1">
            <summary>
            伪查询类， 用于进行延迟查询。
            </summary>
            <typeparam name="T">数据源中的数据项的类型。</typeparam>
        </member>
        <member name="M:ESP.Data.Linq.DelayedQuery.FakeDataQuery`1.CreateConstantExpressionWithoutValidation``1(System.Object)">
            <summary>
            强制创建一个值的类型与表达式类型不一致的常量表达式。
            </summary>
            <typeparam name="TExpression">表达式的类型。</typeparam>
            <param name="obj">表达式的值。</param>
            <returns>常量表达式， 其值的实际类型可能与该表达式的类型并不匹配。</returns>
        </member>
        <member name="M:ESP.Data.Linq.DelayedQuery.FakeDataQuery`1.#ctor(ESP.Data.Linq.IQueryDescriptor)">
            <summary>
            创建一个伪查询类。
            </summary>
            <param name="descriptor">对查询的描述。</param>
        </member>
        <member name="M:ESP.Data.Linq.DelayedQuery.FakeDataQuery`1.#ctor(ESP.Data.Linq.IQueryDescriptor,System.Linq.Expressions.Expression)">
            <summary>
            创建一个伪查询类。
            </summary>
            <param name="descriptor">初始查询的描述。</param>
            <param name="expression">查询表达式。</param>
        </member>
        <member name="F:ESP.Data.Linq.DelayedQuery.FakeDataQuery`1._expression">
            <summary>
            查询表达式。
            </summary>
        </member>
        <member name="F:ESP.Data.Linq.DelayedQuery.FakeDataQuery`1._descriptor">
            <summary>
            初始查询的描述。
            </summary>
        </member>
        <member name="M:ESP.Data.Linq.DelayedQuery.FakeDataQuery`1.GetResult">
            <summary>
            获取当前查询的结果。
            </summary>
            <returns>查询结果。</returns>
        </member>
        <member name="M:ESP.Data.Linq.DelayedQuery.FakeDataQuery`1.GetEnumerator">
            <summary>
            获取枚举器。
            </summary>
            <returns>枚举器。</returns>
        </member>
        <member name="M:ESP.Data.Linq.DelayedQuery.FakeDataQuery`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            获取枚举器。
            </summary>
            <returns>枚举器。</returns>
        </member>
        <member name="M:ESP.Data.Linq.DelayedQuery.FakeDataQuery`1.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            用指定的查询表达式创建新的查询实例。
            </summary>
            <typeparam name="TElement">新实例的数据项的类型。</typeparam>
            <param name="expression">新查询的查询表达式。</param>
            <returns>新的查询对象实例。</returns>
        </member>
        <member name="M:ESP.Data.Linq.DelayedQuery.FakeDataQuery`1.CreateQuery(System.Linq.Expressions.Expression)">
            <summary>
            用指定的查询表达式创建新的查询实例。
            </summary>
            <param name="expression">新查询的查询表达式。</param>
            <returns>新的查询对象实例。</returns>
        </member>
        <member name="M:ESP.Data.Linq.DelayedQuery.FakeDataQuery`1.Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            执行查询表达式并返回结果不支持）。
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:ESP.Data.Linq.DelayedQuery.FakeDataQuery`1.Execute(System.Linq.Expressions.Expression)">
            <summary>
            执行查询表达式并返回结果不支持）。
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:ESP.Data.Linq.DelayedQuery.FakeDataQuery`1.CreateRealQuery(System.Linq.Expressions.Expression,System.Object@)">
            <summary>
            创建实际执行查询的类的实例。
            </summary>
            <param name="expression">查询表达式。</param>
            <param name="context">查询上下文。</param>
            <returns>实际执行查询的类的实例。</returns>
        </member>
        <member name="M:ESP.Data.Linq.DelayedQuery.FakeDataQuery`1.GetList">
            <summary>
            获取当前列表源中的列表。
            </summary>
            <returns></returns>
        </member>
        <member name="P:ESP.Data.Linq.DelayedQuery.FakeDataQuery`1.ElementType">
            <summary>
            获取元素类型。
            </summary>
        </member>
        <member name="P:ESP.Data.Linq.DelayedQuery.FakeDataQuery`1.Expression">
            <summary>
            获取查询表达式。
            </summary>
        </member>
        <member name="P:ESP.Data.Linq.DelayedQuery.FakeDataQuery`1.Provider">
            <summary>
            获取提供程序。
            </summary>
        </member>
        <member name="P:ESP.Data.Linq.DelayedQuery.FakeDataQuery`1.ContainsListCollection">
            <summary>
            获取当前列表源是否包含列表的集合。
            </summary>
        </member>
        <member name="P:ESP.UserPoint.Entity.UserPointRecordInfo.UserID">
            <summary>
            用户编号
            </summary>
        </member>
        <member name="P:ESP.UserPoint.Entity.UserPointRecordInfo.RuleID">
            <summary>
            规则编号，根据哪个积分规则获取的积分
            </summary>
        </member>
        <member name="P:ESP.UserPoint.Entity.UserPointRecordInfo.GiftID">
            <summary>
            礼品编号，购买了哪个礼品消费了积分
            </summary>
        </member>
        <member name="P:ESP.UserPoint.Entity.UserPointRecordInfo.Points">
            <summary>
            获取或消费的积分，正整数则为获取，负整数则为消费
            </summary>
        </member>
        <member name="P:ESP.UserPoint.Entity.UserPointRecordInfo.Memo">
            <summary>
            用户获取或消费积分的描述，与什么单据、什么操作或什么礼品有关
            </summary>
        </member>
        <member name="P:ESP.UserPoint.Entity.UserPointRecordInfo.OperationTime">
            <summary>
            操作时间
            </summary>
        </member>
        <member name="P:ESP.UserPoint.Entity.UserPointRecordInfo.TimeStamp">
            <summary>
            时间戳
            </summary>
        </member>
        <member name="T:ESP.Security.PassportAuthenticationModule">
            <summary>
            Passport认证模块
            </summary>
        </member>
        <member name="M:ESP.Security.PassportAuthenticationModule.Dispose">
            <summary>
            处置当前实例
            </summary>
        </member>
        <member name="M:ESP.Security.PassportAuthenticationModule.Init(System.Web.HttpApplication)">
            <summary>
            初始化模块
            </summary>
            <param name="app">当前应用程序实例</param>
        </member>
        <member name="T:ESP.Logging.SqlLogProvider">
            <summary>
            日志操作提供程序类
            </summary>
        </member>
        <member name="M:ESP.Logging.SqlLogProvider.Add(System.String,System.String,ESP.Logging.LogLevel,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            记录一条日志
            </summary>
            <param name="message">消息</param>
            <param name="category">日志类别</param>
            <param name="logLevel">日志级别</param>
            <param name="processId">当前进程ID</param>
            <param name="threadId">当前线程ID</param>
            <param name="applicationName">当前应用程序名称</param>
            <param name="applicationVersion">当前应用程序版本</param>
            <param name="url">当前请求的Url</param>
            <param name="pagePath">当前正在执行的页面的路径</param>
            <param name="userId">当前用户ID</param>
            <param name="serverHostName">服务器名称</param>
            <param name="serverAddress">服务器站IP，如果主机为多IP配置，则该参数指定当前请求发生的IP</param>
            <param name="serverPort">当前请求的端口号</param>
            <param name="clientHostName">客户机名称</param>
            <param name="clientAddress">客户机IP地址</param>
            <param name="clientPort">客户端端口</param>
            <param name="userAgent">客户端浏览器</param>
            <param name="requestMethod">HTTP请求方法（GET, POST, ...）</param>
            <param name="exceptionType">异常类型</param>
            <param name="exceptionInfo">异常的详细信息</param>
            <param name="extendedProperties">其它信息</param>
        </member>
        <member name="M:ESP.Logging.SqlLogProvider.Search(System.Int64,System.Int32,System.String,ESP.Logging.LogLevel,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.DateTime,System.DateTime,System.Int64@)">
            <summary>
            搜索日志条目
            </summary>
            <param name="pageIndex">分码，从0开始</param>
            <param name="pageSize">分页大小</param>
            <param name="category">日志类别</param>
            <param name="logLevel">要检索的日志的级别</param>
            <param name="applicationName">应用程序名称（模糊匹配）</param>
            <param name="applicationVersion">应用程序版本</param>
            <param name="pagePath">页面路径（模糊匹配）</param>
            <param name="userId">用户ID</param>
            <param name="serverAddress">服务器站IP</param>
            <param name="serverPort">当前请求的端口号</param>
            <param name="clientAddress">客户端地址</param>
            <param name="clientPort">客户端端口</param>
            <param name="userAgent">客户端浏览器（模糊匹配）</param>
            <param name="requestMethod">HTTP请求方法（GET, POST, ...）</param>
            <param name="exceptionType">异常类型（模糊匹配）</param>
            <param name="logTimeStart">要检索的日志记录的起始时间</param>
            <param name="logTimeEnd">要检索的日志记录的结束时间</param>
            <param name="recordCount">当前总记录数</param>
            <returns>检索到的日志列表</returns>
            <remarks>
            除userId外对于所有的过滤条件参数，如果为0或空引用或空字符串或
            ESP.Framework.DataAccess.Utilities.NullValues.DateTime，则忽略该参数。
            userId 为 -1 时忽略 userId 参数。
            
            recordCount 用于保持分页状态。因为日志表中的数据可能会快速增长，在
            查询完第一次后再次查询第二页时，需要知道第一页的位置，以免快速增长
            的日志将第一页淹没，而使第二页返回更晚的记录。在第一次查询时使用0作
            为recordCount参数的值，后序翻页调用使用第一次调用返回的recordCount，
            即可在多次翻页中保持分页的相对位置。
            </remarks>
        </member>
        <member name="M:ESP.Logging.SqlLogProvider.Get(System.Int64)">
            <summary>
            根据ID获取日志条目
            </summary>
            <param name="logId">日志条目的ID</param>
            <returns>日志条目</returns>
        </member>
        <member name="T:ESP.Logging.Logger">
            <summary>
            日志操作类
            </summary>
        </member>
        <member name="F:ESP.Logging.Logger.DefaultCategory">
            <summary>
            默认日志类别
            </summary>
        </member>
        <member name="M:ESP.Logging.Logger.Add(System.String,System.String,ESP.Logging.LogLevel,System.Exception,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            记录一条日志
            </summary>
            <param name="message">消息</param>
            <param name="category">日志类别</param>
            <param name="level">日志级别</param>
            <param name="exception">异常</param>
            <param name="extendedProperties">其它信息</param>
            <param name="suppressTransaction">是否暂时抑制环境事务。</param>
        </member>
        <member name="M:ESP.Logging.Logger.Add(System.String,System.String,ESP.Logging.LogLevel,System.Exception,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            记录一条日志
            </summary>
            <param name="message">消息</param>
            <param name="category">日志类别</param>
            <param name="level">日志级别</param>
            <param name="exception">异常</param>
            <param name="extendedProperties">其它信息</param>
        </member>
        <member name="M:ESP.Logging.Logger.Add(System.String,System.String,ESP.Logging.LogLevel)">
            <summary>
            记录一条日志
            </summary>
            <param name="message">消息</param>
            <param name="category">日志类别</param>
            <param name="level">日志级别</param>
        </member>
        <member name="M:ESP.Logging.Logger.Add(System.String,System.String)">
            <summary>
            记录一条消息日志
            </summary>
            <param name="message">消息</param>
            <param name="category">日志类别</param>
        </member>
        <member name="M:ESP.Logging.Logger.Add(System.String)">
            <summary>
            记录一条消息日志
            </summary>
            <param name="message">消息</param>
        </member>
        <member name="M:ESP.Logging.Logger.Add(System.String,System.String,ESP.Logging.LogLevel,System.Exception)">
            <summary>
            记录一条日志
            </summary>
            <param name="message">消息</param>
            <param name="category">日志类别</param>
            <param name="level">日志级别</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:ESP.Logging.Logger.Add(System.String,System.String,ESP.Logging.LogLevel,System.Exception,System.Object)">
            <summary>
            记录一条日志
            </summary>
            <param name="message">消息</param>
            <param name="category">日志类别</param>
            <param name="level">日志级别</param>
            <param name="exception">异常</param>
            <param name="extendedProperties">扩展属性</param>
            <remarks>
            参数 extendedProperties 可以为匿名类型的本地变量，
            如 var obj = new { Property1:"value1", Property2:"value2" }
            也可以是非匿名类变量，如
            class Class1
            {
                public string Property1 { get; set; }
                public string Property2 { get; set; }
            }
            var obj = new Class1();
            obj.Property1 = "value1";
            obj.Property2 = "value2";
            </remarks>
        </member>
        <member name="M:ESP.Logging.Logger.Search(System.Int64,System.Int32,System.String,ESP.Logging.LogLevel,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.DateTime,System.DateTime,System.Int64@)">
            <summary>
            搜索日志条目
            </summary>
            <param name="pageIndex">分码，从0开始</param>
            <param name="pageSize">分页大小</param>
            <param name="category">日志类别</param>
            <param name="logLevel">要检索的日志的级别</param>
            <param name="applicationName">应用程序名称（模糊匹配）</param>
            <param name="applicationVersion">应用程序版本</param>
            <param name="pagePath">页面路径（模糊匹配）</param>
            <param name="userId">用户ID</param>
            <param name="serverAddress">服务器站IP</param>
            <param name="serverPort">当前请求的端口号</param>
            <param name="clientAddress">客户端地址</param>
            <param name="clientPort">客户端端口</param>
            <param name="userAgent">客户端浏览器（模糊匹配）</param>
            <param name="requestMethod">HTTP请求方法（GET, POST, ...）</param>
            <param name="exceptionType">异常类型（模糊匹配）</param>
            <param name="logTimeStart">要检索的日志记录的起始时间</param>
            <param name="logTimeEnd">要检索的日志记录的结束时间</param>
            <param name="recordCount">当前总记录数</param>
            <returns>检索到的日志列表</returns>
            <remarks>
            除userId外对于所有的过滤条件参数，如果为0或空引用或空字符串或
            ESP.Framework.DataAccess.Utilities.NullValues.DateTime，则忽略该参数。
            userId 为 -1 时忽略 userId 参数。
            
            recordCount 用于保持分页状态。因为日志表中的数据可能会快速增长，在
            查询完第一次后再次查询第二页时，需要知道第一页的位置，以免快速增长
            的日志将第一页淹没，而使第二页返回更晚的记录。在第一次查询时使用0作
            为recordCount参数的值，后序翻页调用使用第一次调用返回的recordCount，
            即可在多次翻页中保持分页的相对位置。
            </remarks>
        </member>
        <member name="M:ESP.Logging.Logger.Get(System.Int64)">
            <summary>
            根据ID获取日志条目
            </summary>
            <param name="logId">日志条目的ID</param>
            <returns>日志条目</returns>
        </member>
        <member name="T:ESP.Framework.Entity.WebPageInfo">
            <summary>
            页面表
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.WebPageInfo.WebPageID">
            <summary>
            标识列
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.WebPageInfo.WebSiteID">
            <summary>
            所属站点ID
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.WebPageInfo.ModuleID">
            <summary>
            所属模块ID
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.WebPageInfo.AppRelativePath">
            <summary>
            相对于应用程序根的路径
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.WebPageInfo.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.WebPageInfo.Creator">
            <summary>
            创建者
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.WebPageInfo.LastModifier">
            <summary>
            最后修改者
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.WebPageInfo.CreatedTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.WebPageInfo.LastModifiedTime">
            <summary>
            最后修改时间
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.WebPageInfo.CreatorName">
            <summary>
            创建人用户名
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.WebPageInfo.LastModifierName">
            <summary>
            最后修改人用户名
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.WebPageInfo.RowVersion">
            <summary>
            数据版本
            </summary>
        </member>
        <member name="T:ESP.Framework.Entity.TaskItemInfo">
            <summary>
            代办事宜工作项
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.TaskItemInfo.FormID">
            <summary>
            单据标识ID
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.TaskItemInfo.ApplicantID">
            <summary>
            申请人ID
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.TaskItemInfo.ApplicantName">
            <summary>
            申请人姓名
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.TaskItemInfo.ApproverID">
            <summary>
            待审批人ID
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.TaskItemInfo.ApproverName">
            <summary>
            待审批人姓名
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.TaskItemInfo.AppliedTime">
            <summary>
            申请日期
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.TaskItemInfo.FormType">
            <summary>
            单据类型
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.TaskItemInfo.FormNumber">
            <summary>
            单据编号
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.TaskItemInfo.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.TaskItemInfo.Url">
            <summary>
            单据页面的Url
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.TaskItemInfo.ApproversUrl">
            <summary>
            显示所有审核人的页面的Url
            </summary>
        </member>
        <member name="T:ESP.Framework.BusinessLogic.RoleManager">
            <summary>
            Role 访问控制类
            </summary>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.RoleManager.Get(System.Int32)">
            <summary>
            获取指定ID的角色
            </summary>
            <param name="id">角色ID</param>
            <returns>角色对象</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.RoleManager.GetByEntity(System.Int32,ESP.Framework.Entity.RoleOwnerType)">
            <summary>
            获取指定实体所属于的角色列表
            </summary>
            <param name="entityID">实体ID</param>
            <param name="entityType">实体类型</param>
            <returns>角色列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.RoleManager.GetDepartmentsInRole(System.Int32)">
            <summary>
            获取加入到指定ID的角色中的部门的列表
            </summary>
            <param name="roleId">角色ID</param>
            <returns>部门列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.RoleManager.GetUsersInRole(System.Int32)">
            <summary>
            获取加入到指定ID的角色中的用户的列表
            </summary>
            <param name="roleId">角色ID</param>
            <returns>用户列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.RoleManager.GetEmployeesInRole(System.Int32)">
            <summary>
            获取加入到指定ID的角色中的员工的列表
            </summary>
            <param name="roleId">角色ID</param>
            <returns>员工列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.RoleManager.GetAll">
            <summary>
            获取所有的角色的列表
            </summary>
            <returns>角色列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.RoleManager.Create(ESP.Framework.Entity.RoleInfo)">
            <summary>
            创建新的角色
            </summary>
            <param name="role">要创建的角色对象</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.RoleManager.Update(ESP.Framework.Entity.RoleInfo)">
            <summary>
            更新角色
            </summary>
            <param name="role">要更新的角色对象</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.RoleManager.Delete(System.Int32)">
            <summary>
            删除指定ID的角色
            </summary>
            <param name="id">要删除的角色的ID</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.RoleManager.AddDepartmentToRole(System.Int32,System.Int32)">
            <summary>
            将指定ID的部门添加到角色
            </summary>
            <param name="departmentID">部门ID</param>
            <param name="roleId">角色ID</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.RoleManager.AddUserToRole(System.Int32,System.Int32)">
            <summary>
            将指定ID的用户添加到角色
            </summary>
            <param name="userId">用户ID</param>
            <param name="roleId">角色ID</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.RoleManager.AddEntityToRole(System.Int32,System.Int32,ESP.Framework.Entity.RoleOwnerType)">
            <summary>
            将指定的实体添加到角色
            </summary>
            <param name="entityID">实体ID</param>
            <param name="roleId">角色ID</param>
            <param name="type">实体类型</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.RoleManager.RemoveEntityFromRole(System.Int32,System.Int32,ESP.Framework.Entity.RoleOwnerType)">
            <summary>
            将指定的实体从角色中删除
            </summary>
            <param name="entityID">实体ID</param>
            <param name="roleId">角色ID</param>
            <param name="type">实体类型</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.RoleManager.GetUserRoleIDs(System.Int32)">
            <summary>
            获取用户所属于的角色的ID列表，包含该用户所属的部门所拥有的角色
            </summary>
            <param name="userId">用户ID</param>
            <returns>角色ID列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.RoleManager.GetUserRoles(System.Int32)">
            <summary>
            获取用户所属于的角色的ID列表，包含该用户所属的部门所拥有的角色
            </summary>
            <param name="userId">用户ID</param>
            <returns>角色ID列表</returns>
        </member>
        <member name="T:ESP.Framework.DataAccess.ISettingsDataProvider">
            <summary>
            系统设置抽象数据访问接口
            </summary>
        </member>
        <member name="M:ESP.Framework.DataAccess.ISettingsDataProvider.GetSettings(System.Int32,System.Boolean)">
            <summary>
            获取站点的所有设置
            </summary>
            <param name="webSiteId">设置所属的站点ID，如果为0表示返回公共设置</param>
            <param name="includeSystemSettings">如果站点不为0， 该参数指定是否同时返回公共设置</param>
            <returns>站点的所有设置项</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.ISettingsDataProvider.GetSetting(System.Int32,System.String,System.Boolean)">
            <summary>
            获取站点指定名称的设置项
            </summary>
            <param name="webSiteId">设置所属的站点ID，如果为0表示返回公共设置</param>
            <param name="settingName">设置的名称</param>
            <param name="includeSystemSettings">如果站点不为0， 该参数指定是否同时返回公共设置</param>
            <returns>站点指定名称的设置项</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.ISettingsDataProvider.AddDefinition(ESP.Framework.Entity.SettingDefinitionInfo)">
            <summary>
            添加设置定义
            </summary>
            <param name="definition">设置定义</param>
            <return>新定义的标识ID</return>
        </member>
        <member name="M:ESP.Framework.DataAccess.ISettingsDataProvider.GetDefinitions(System.Int32)">
            <summary>
            获取站点的所有设置定义
            </summary>
            <param name="webSiteId">站点ID</param>
            <returns>所有设置定义的列表</returns>
            <remarks>
            返回值中包括公共设置定义中可重载的定义。
            </remarks>
        </member>
        <member name="M:ESP.Framework.DataAccess.ISettingsDataProvider.SaveSetting(ESP.Framework.Entity.SettingInfo,System.Int32)">
            <summary>
            保存设置
            </summary>
            <param name="value">设置项信息</param>
            <param name="webSiteId">设置所属的站点的ID，如果为0， 则表示是公共设置</param>
        </member>
        <member name="T:ESP.Framework.DataAccess.IOperationAuditorDataProvider">
            <summary>
            审核人管理
            </summary>
        </member>
        <member name="M:ESP.Framework.DataAccess.IOperationAuditorDataProvider.Add(ESP.Framework.Entity.OperationAuditorInfo)">
            <summary>
            增加一条数据
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IOperationAuditorDataProvider.Delete(System.Int32)">
            <summary>
            删除一条数据
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IOperationAuditorDataProvider.Exists(System.Int32)">
            <summary>
            是否存在该记录
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IOperationAuditorDataProvider.GetAllAttendanceIds">
            <summary>
            获得考勤审批人的sysids
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IOperationAuditorDataProvider.GetAllCEOIds">
            <summary>
            获得CEO的sysids
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IOperationAuditorDataProvider.GetAllDirectorIds">
            <summary>
            获得总监的sysids
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IOperationAuditorDataProvider.GetAllHRIds">
            <summary>
            获得HR审批人的sysids
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IOperationAuditorDataProvider.GetAllManagerIds">
            <summary>
            获得总经理的sysids
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IOperationAuditorDataProvider.GetAllADManagerIds">
            <summary>
            获得行政管理员的sysids
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IOperationAuditorDataProvider.GetList(System.String)">
            <summary>
            获得数据列表
            </summary>
            <param name="strWhere">The STR where.</param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IOperationAuditorDataProvider.GetModel(System.Int32)">
            <summary>
            得到一个对象实体
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IOperationAuditorDataProvider.GetModelByDepId(System.Int32)">
            <summary>
            根据部门ID获得一个对象实体
            </summary>
            <param name="departmentId">The dep id.</param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IOperationAuditorDataProvider.Update(ESP.Framework.Entity.OperationAuditorInfo)">
            <summary>
            更新一条数据
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="T:ESP.Framework.SqlDataAccess.AuditBackUpDataProvider">
            <summary>
            代理审核人数据访问类
            </summary>
        </member>
        <member name="T:ESP.Framework.DataAccess.IAuditBackUpDataProvider">
            <summary>
            代理审核人数据访问接口
            </summary>
        </member>
        <member name="M:ESP.Framework.DataAccess.IAuditBackUpDataProvider.Add(ESP.Framework.Entity.AuditBackUpInfo)">
            <summary>
            增加一条数据
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IAuditBackUpDataProvider.Update(ESP.Framework.Entity.AuditBackUpInfo)">
            <summary>
            更新一条数据
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IAuditBackUpDataProvider.Delete(System.Int32)">
            <summary>
            删除一条数据
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IAuditBackUpDataProvider.GetModel(System.Int32)">
            <summary>
            得到一个对象实体
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IAuditBackUpDataProvider.GetModelByUserID(System.Int32)">
            <summary>
            得到一个对象实体
            </summary>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IAuditBackUpDataProvider.GetLayOffModelByUserID(System.Int32)">
            <summary>
            获取离职委托实例
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IAuditBackUpDataProvider.IsBackUpUser(System.Int32)">
            <summary>
            检查是否是可用代初审人
            </summary>
            <param name="sysUserId">The sys user id.</param>
            <returns>
            	<c>true</c> if [is back up user] [the specified sys user id]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IAuditBackUpDataProvider.GetList(System.String)">
            <summary>
            获得数据列表
            </summary>
            <param name="strWhere">The STR where.</param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IAuditBackUpDataProvider.GetModelsByBackUpUserID(System.Int32)">
            <summary>
            根据BackUpUserID获取代理设置对象列表
            </summary>
            <param name="backUpUserId">要获取的代理设置记录的BackUpUserID</param>
            <returns>代理设置记录对象列表</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IAuditBackUpDataProvider.GetLayOffModelsByBackUpUserID(System.Int32)">
            <summary>
             获取离职委托列表
            </summary>
            <param name="backUpUserId"></param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.AuditBackUpDataProvider.Add(ESP.Framework.Entity.AuditBackUpInfo)">
            <summary>
            增加一条数据
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.AuditBackUpDataProvider.Update(ESP.Framework.Entity.AuditBackUpInfo)">
            <summary>
            更新一条数据
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.AuditBackUpDataProvider.Delete(System.Int32)">
            <summary>
            删除一条数据
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.AuditBackUpDataProvider.GetModel(System.Int32)">
            <summary>
            得到一个对象实体
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.AuditBackUpDataProvider.GetModelByUserID(System.Int32)">
            <summary>
            得到一个对象实体
            </summary>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.AuditBackUpDataProvider.IsBackUpUser(System.Int32)">
            <summary>
            检查是否是可用代初审人
            </summary>
            <param name="sysUserId">The sys user id.</param>
            <returns>
            	<c>true</c> if [is back up user] [the specified sys user id]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.AuditBackUpDataProvider.GetList(System.String)">
            <summary>
            获得数据列表
            </summary>
            <param name="strWhere">The STR where.</param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.AuditBackUpDataProvider.GetModelsByBackUpUserID(System.Int32)">
            <summary>
            根据BackUpUserID获取代理设置对象列表
            </summary>
            <param name="backUpUserId">要获取的代理设置记录的BackUpUserID</param>
            <returns>代理设置记录对象列表</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.AuditBackUpDataProvider.GetLayOffModelByUserID(System.Int32)">
            <summary>
            获取离职委托实例
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.AuditBackUpDataProvider.GetLayOffModelsByBackUpUserID(System.Int32)">
            <summary>
            获取离职委托列表
            </summary>
            <param name="backUpUserId"></param>
            <returns></returns>
        </member>
        <member name="T:ESP.Framework.BusinessLogic.OperationAuditorManager">
            <summary>
            审核人管理
            </summary>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.OperationAuditorManager.Add(ESP.Framework.Entity.OperationAuditorInfo)">
            <summary>
            增加一条数据
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.OperationAuditorManager.Delete(System.Int32)">
            <summary>
            删除一条数据
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.OperationAuditorManager.Exists(System.Int32)">
            <summary>
            是否存在该记录
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.OperationAuditorManager.GetAllAttendanceIds">
            <summary>
            获得考勤审批人的sysids
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.OperationAuditorManager.GetAllCEOIds">
            <summary>
            获得CEO的sysids
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.OperationAuditorManager.GetAllDirectorIds">
            <summary>
            获得总监的sysids
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.OperationAuditorManager.GetAllHRIds">
            <summary>
            获得HR审批人的sysids
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.OperationAuditorManager.GetAllManagerIds">
            <summary>
            获得总经理的sysids
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.OperationAuditorManager.GetAllADManagerIds">
            <summary>
            获得行政管理员的sysids
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.OperationAuditorManager.GetHRId">
            <summary>
            获得HR审批人的sysids
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.OperationAuditorManager.GetCEOIds">
            <summary>
            获得CEO的sysids
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.OperationAuditorManager.GetAttendanceId">
            <summary>
            获得考勤审批人的sysids
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.OperationAuditorManager.GetManagerIds">
            <summary>
            获得总经理的sysids
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.OperationAuditorManager.GetDirectorIds">
            <summary>
            获得总监的sysids
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.OperationAuditorManager.GetADManagerIds">
            <summary>
            获得行政管理员的sysids
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.OperationAuditorManager.GetList(System.String)">
            <summary>
            获得数据列表
            </summary>
            <param name="strWhere">The STR where.</param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.OperationAuditorManager.GetModel(System.Int32)">
            <summary>
            得到一个对象实体
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.OperationAuditorManager.GetModelByDepId(System.Int32)">
            <summary>
            根据部门ID获得一个对象实体
            </summary>
            <param name="departmentId">The dep id.</param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.OperationAuditorManager.Update(ESP.Framework.Entity.OperationAuditorInfo)">
            <summary>
            更新一条数据
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="T:ESP.Data.QueryableExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESP.Data.QueryableExtensions.WhereContains``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.ICollection{``1})">
            <summary>
            
            </summary>
            <typeparam name="TElement"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="query"></param>
            <param name="valueSelector"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="T:ESP.Web.CaptchaManager">
            <summary>
            验证码管理类。
            </summary>
        </member>
        <member name="M:ESP.Web.CaptchaManager.Generate">
            <summary>
            生成验证码图片。
            </summary>
            <returns>验证码图片。</returns>
        </member>
        <member name="M:ESP.Web.CaptchaManager.Regenerate">
            <summary>
            重新生成验证码图片。
            </summary>
            <returns>验证码图片。</returns>
        </member>
        <member name="M:ESP.Web.CaptchaManager.Check(System.String)">
            <summary>
            检查验证是否正确。
            </summary>
            <param name="code">要检查的验证码。</param>
            <returns>验证码是否正确。</returns>
        </member>
        <member name="P:ESP.UserPoint.Entity.UserPointInfo.UserID">
            <summary>
            用户编号
            </summary>
        </member>
        <member name="P:ESP.UserPoint.Entity.UserPointInfo.SP">
            <summary>
            供应链积分
            </summary>
        </member>
        <member name="P:ESP.UserPoint.Entity.UserPointInfo.TimeStamp">
            <summary>
            时间戳（避免出现积分修改脏数据）
            </summary>
        </member>
        <member name="T:ESP.Triplet`3">
            <summary>
            用于存储三个相关元素的类。
            </summary>
            <typeparam name="TFirst">第一个元素的类型</typeparam>
            <typeparam name="TSecond">第二个元素的类型</typeparam>
            <typeparam name="TThird">第三个元素的类型</typeparam>
        </member>
        <member name="M:ESP.Triplet`3.#ctor">
            <summary>
            默认构造方法
            </summary>
        </member>
        <member name="M:ESP.Triplet`3.#ctor(`0,`1,`2)">
            <summary>
            构造一个三元对象
            </summary>
            <param name="first">第一个元素</param>
            <param name="second">第二个元素</param>
            <param name="third">第三个元素</param>
        </member>
        <member name="P:ESP.Triplet`3.First">
            <summary>
            获取或设置第一个元素
            </summary>
        </member>
        <member name="P:ESP.Triplet`3.Second">
            <summary>
            获取或设置第二个元素
            </summary>
        </member>
        <member name="P:ESP.Triplet`3.Third">
            <summary>
            获取或设置第三个元素
            </summary>
        </member>
        <member name="T:ESP.Framework.Entity.MaritalStatus">
            <summary>
            婚姻状况
            </summary>
        </member>
        <member name="F:ESP.Framework.Entity.MaritalStatus.Unknown">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:ESP.Framework.Entity.MaritalStatus.Married">
            <summary>
            已婚
            </summary>
        </member>
        <member name="F:ESP.Framework.Entity.MaritalStatus.Unmarried">
            <summary>
            未婚
            </summary>
        </member>
        <member name="F:ESP.Framework.Entity.MaritalStatus.Single">
            <summary>
            单身
            </summary>
        </member>
        <member name="F:ESP.Framework.Entity.MaritalStatus.Double">
            <summary>
            非单身
            </summary>
        </member>
        <member name="T:ESP.Framework.Entity.Gender">
            <summary>
            性别
            </summary>
        </member>
        <member name="F:ESP.Framework.Entity.Gender.Unknown">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:ESP.Framework.Entity.Gender.Male">
            <summary>
            男
            </summary>
        </member>
        <member name="F:ESP.Framework.Entity.Gender.Female">
            <summary>
            女
            </summary>
        </member>
        <member name="T:ESP.Framework.Entity.EmployeeInfo">
            <summary>
            员工信息
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.Phone1">
            <summary>
            电话1
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.Phone2">
            <summary>
            电话2
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.MobilePhone">
            <summary>
            移动电话
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.HomePhone">
            <summary>
            家庭电话
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.EmergencyContact">
            <summary>
            紧急联络人
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.EmergencyContactPhone">
            <summary>
            紧急联络电话
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.PostCode">
            <summary>
            邮政编码
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.Address2">
            <summary>
            地址2
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.City2">
            <summary>
            城市2
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.Province2">
            <summary>
            省份2
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.Country2">
            <summary>
            国家2
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.PostCode2">
            <summary>
            邮政编码2
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.MaritalStatus">
            <summary>
            婚姻状况
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.Gender">
            <summary>
            性别
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.Birthday">
            <summary>
            生日
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.BirthPlace">
            <summary>
            出生地
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.DomicilePlace">
            <summary>
            现居住地
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.IDNumber">
            <summary>
            身份证件号码
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.Photo">
            <summary>
            照片(图片路径)
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.Degree">
            <summary>
            学位
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.Education">
            <summary>
            学历
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.GraduateFrom">
            <summary>
            毕业院校
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.Major">
            <summary>
            专业/主修课程
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.GraduatedDate">
            <summary>
            毕业时间
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.Health">
            <summary>
            健康状况
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.DiseaseInSixMonths">
            <summary>
            6个月内患过何种疾病
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.DiseaseInSixMonthsInfo">
            <summary>
            6个月内所患疾病信息
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.WorkExperience">
            <summary>
            工作经历
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.WorkSpecialty">
            <summary>
            工作特长
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.ThisYearSalary">
            <summary>
            本年薪资
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.WorkPostCode">
            <summary>
            工作地邮政编码
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.BaseInfoOK">
            <summary>
            基本信息是否完整
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.ContractInfoOK">
            <summary>
            合同是否完整
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.InsuranceInfoOK">
            <summary>
            社会保险信息是否完整
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.ArchiveInfoOK">
            <summary>
            档案信息是否完整
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.Memo">
            <summary>
            备注事项
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.UserID">
            <summary>
            用记ID
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.Username">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.Code">
            <summary>
            员工编号
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.FirstNameCN">
            <summary>
            中文名字
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.LastNameCN">
            <summary>
            中文姓氏
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.FullNameCN">
            <summary>
            中文全名
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.FirstNameEN">
            <summary>
            英文名字
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.LastNameEN">
            <summary>
            英文姓氏
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.FullNameEN">
            <summary>
            英文命名
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.TypeID">
            <summary>
            员工类型ID（全职、兼职）
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.TypeName">
            <summary>
            员工类型名称（全职、兼职）
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.Fax">
            <summary>
            员工传真号码
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.Address">
            <summary>
            员工家庭住址
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.City">
            <summary>
            员工居住城市
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.Province">
            <summary>
            员工居住省份
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.Country">
            <summary>
            员工居住国家
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.WorkAddress">
            <summary>
            员工工作地址
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.WorkCity">
            <summary>
            员工工作城市
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.WorkProvince">
            <summary>
            员工工作省份
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.WorkCountry">
            <summary>
            员工工作国家
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.InternalEmail">
            <summary>
            员工内部电子邮件地址
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.IM">
            <summary>
            员工即时通信帐户
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.Status">
            <summary>
            员工状态
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.Creator">
            <summary>
            创建者
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.LastModifier">
            <summary>
            最后修改者
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.CreatedTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.LastModifiedTime">
            <summary>
            最后修改时间
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.CreatorName">
            <summary>
            创建人用户名
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.LastModifierName">
            <summary>
            最后修改人用户名
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.Email">
            <summary>
            用户安全Email
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.RowVersion">
            <summary>
            数据记录版本
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.Resume">
            <summary>
            简历
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.IsForeign">
            <summary>
            是否外藉员工
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.IsCertification">
            <summary>
            是否有劳工证
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.WageMonths">
            <summary>
            工资月数
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeeInfo.IPCode">
            <summary>
            IP电话号码
            </summary>
        </member>
        <member name="T:ESP.Framework.DataAccess.IEmployeeDataProvider">
            <summary>
            员工数据抽象访问类
            </summary>
        </member>
        <member name="M:ESP.Framework.DataAccess.IEmployeeDataProvider.Get(System.Int32)">
            <summary>
            获取指定ID的员工信息
            </summary>
            <param name="id">员工ID</param>
            <returns>员工信息</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IEmployeeDataProvider.GetByCode(System.String)">
            <summary>
            获取指定员工编号的员工信息
            </summary>
            <param name="code">员工编号</param>
            <returns>员工信息</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IEmployeeDataProvider.GetAll">
            <summary>
            获取所有的员工信息
            </summary>
            <returns>所有员工信息的列表</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IEmployeeDataProvider.GetByType(System.Int32)">
            <summary>
            获取指定类型的员工列表
            </summary>
            <param name="typeId">员工类型ID</param>
            <returns>员工列表</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IEmployeeDataProvider.Update(ESP.Framework.Entity.EmployeeInfo)">
            <summary>
            更新员工信息
            </summary>
            <param name="employee">员工信息</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IEmployeeDataProvider.Delete(System.Int32)">
            <summary>
            删除指定ID的员工信息
            </summary>
            <param name="id">要删除的员工信息的ID</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IEmployeeDataProvider.CreateEmployeeCode(System.String,System.String)">
            <summary>
            生成员工代码
            </summary>
            <param name="pattern">员工代码的生成模式，其中由"{"和"}"界定的令牌会被替换个时间或自动编号。</param>
            <param name="numberType">编号类型。</param>
            <returns>员工代码</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IEmployeeDataProvider.Create(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,ESP.Framework.Entity.EmployeeInfo)">
            <summary>
            创建新员工，同时创建关联用户
            </summary>
            <param name="userName">用户名</param>
            <param name="firstNameCN">中文名</param>
            <param name="lastNameCN">中文姓氏</param>
            <param name="firstNameEN">英文名</param>
            <param name="lastNameEN">英文姓氏</param>
            <param name="email">安全Email</param>
            <param name="isApproved">用户是否通过审核</param>
            <param name="password">密码</param>
            <param name="employee">员工信息</param>
            <returns>
            操作错误状态
            如果创建用户成功，返回 EmployeeCreateStatus.Success;
            如果用户名效，返回 EmployeeCreateStatus.InvalidUserName;
            如果密码无效，返回 EmployeeCreateStatus.InvalidPassword;
            如果Email无效，返回 EmployeeCreateStatus.InvalidEmail;
            如果用户名已经存在，返回 EmployeeCreateStatus.DuplicateUserName;
            如果Email已经存在且配置了Email唯一，返回 EmployeeCreateStatus.DuplicateEmail;
            如果员工类型ID无效，返回 EmployeeCreateStatus.InvalidTypeId;
            如果员工代码无效，返回 EmployeeCreateStatus.InvalidCode;
            如果员工代码已经存在，返回 EmployeeCreateStatus.DuplicateCode;
            如果发生未知错误，返回 EmployeeCreateStatus.ProviderError;
            </returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IEmployeeDataProvider.Search(System.Int32,System.Int32,System.String,System.String,ESP.Framework.DataAccess.Utilities.DbDataParameter[])">
            <summary>
            查询符合相关条件的员工记录，并按指定的排序规则排序后分页返回
            </summary>
            <param name="pageSize">分页大小</param>
            <param name="pageIndex">要返回的页码，索引从0开始</param>
            <param name="orderBy">
            排序规则（对用户表中列的引用须使用u.前缀，
            对员工表中列的引用须使用e.前缀，
            如 “u.UserName ASC” 即按UserName列升序排列）
            </param>
            <param name="where">
            查询条件（对Users表中列名的引用须使用u.前缀，对员工表中列的引用须使用e.前缀）
            </param>
            <param name="paras">
            查询条件中要使用到的参数，对于SQL Server，这里的参数名不带前辍符号 "@"，
            例如对于命名参数 @EmployeeName， 只需标识为 EmployeeName 即可。
            _PageIndex和_PageSize两个参数为本方法内部分页保留使用。
            </param>
            <returns>查询到的员工记录列表</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IEmployeeDataProvider.GetTypes">
            <summary>
            获取职工类型列表
            </summary>
            <returns>职工类型列表，Key为类型ID，Value为类型名称</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IEmployeeDataProvider.AddType(System.String)">
            <summary>
            添加职工类型
            </summary>
            <param name="type">类型名称</param>
            <returns>类型ID</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IEmployeeDataProvider.RemoveType(System.String)">
            <summary>
            删除职工类型
            </summary>
            <param name="type">要删除的类型名称</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IEmployeeDataProvider.RemoveType(System.Int32)">
            <summary>
            删除职工类型
            </summary>
            <param name="typeId">要删除的类型ID</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IEmployeeDataProvider.GetTypeName(System.Int32)">
            <summary>
            获得职工类型
            </summary>
            <param name="typeId">类型ID</param>
            <returns>类型名称</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IEmployeeDataProvider.GetDictionary">
            <summary>
            获取所有员工的列表，并以字典返回
            </summary>
            <returns>所有员工的字典列表</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IEmployeeDataProvider.GetEmployeesByDepartment(System.Int32)">
            <summary>
            根据部门ID获取员工列表
            </summary>
            <param name="departmentId">部门ID</param>
            <returns>员工列表</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IEmployeeDataProvider.Search(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            搜索员工，并分页返回记录集合
            </summary>
            <param name="keyword">关键字</param>
            <param name="pageIndex">要获取的记录的页码</param>
            <param name="pageSize">分页大小</param>
            <param name="recordCount">总记录数，用于计算总页数</param>
            <returns>匹配的员工列表</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IEmployeeDataProvider.SearchByChineseName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            根据中文名字搜索员工，并分页返回记录集合
            </summary>
            <param name="name">关键字</param>
            <param name="pageIndex">要获取的记录的页码</param>
            <param name="pageSize">分页大小</param>
            <param name="recordCount">总记录数，用于计算总页数</param>
            <returns>匹配的员工列表</returns>
        </member>
        <member name="T:ESP.Framework.BusinessLogic.PermissionManager">
            <summary>
            权限访问控制类
            </summary>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.PermissionManager.HasWebPagePermission(System.String,System.Int32,System.Int32)">
            <summary>
            判断指定ID的用户对指定ID的页面是否拥有指定权限
            </summary>
            <param name="permission">请求的权限</param>
            <param name="pageID">页面ID</param>
            <param name="userId">用户ID</param>
            <returns>如果指定的用户对页面拥有该权限，则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.PermissionManager.HasModulePermission(System.String,System.Int32,System.Int32)">
            <summary>
            判断指定ID的用户对指定ID的模块是否拥有指定权限
            </summary>
            <param name="permission">请求的权限</param>
            <param name="moduleId">模块ID</param>
            <param name="userId">用户ID</param>
            <returns>如果指定的用户对模块拥有该权限，则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.PermissionManager.HasWebSitePermission(System.String,System.Int32,System.Int32)">
            <summary>
            判断指定ID的用户对指定ID的站点是否拥有指定权限
            </summary>
            <param name="permission">请求的权限</param>
            <param name="webSiteId">站点ID</param>
            <param name="userId">用户ID</param>
            <returns>如果指定的用户对站点拥有该权限，则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.PermissionManager.HasPermission(System.String,ESP.Framework.Entity.EntityType,System.Int32,System.Int32)">
            <summary>
            判断指定的用户对指定的实体是否拥有指定的权限
            </summary>
            <param name="permission">请求的权限</param>
            <param name="entityType">实体类型</param>
            <param name="entityID">实体ID</param>
            <param name="userId">用户ID</param>
            <returns>如果指定的用户对实体拥有该权限，则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.PermissionManager.Get(System.Int32)">
            <summary>
            获得取指定ID的权限的详细信息
            </summary>
            <param name="id">权限ID</param>
            <returns>权限信息对象</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.PermissionManager.Add(ESP.Framework.Entity.PermissionInfo)">
            <summary>
            添加新的权限，即将指定的权限分配给指定的权限持有者（角色、用户等）
            </summary>
            <param name="permission">权限对象</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.PermissionManager.Remove(System.Int32)">
            <summary>
            删除指定的权限分配
            </summary>
            <param name="id">要删除的权限分配的ID</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.PermissionManager.GetRolePermisssions(System.Int32,System.Boolean)">
            <summary>
            获取角色拥有的权限
            </summary>
            <param name="roleId">角色</param>
            <param name="isFakeRole">是否为内置的伪角色</param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.PermissionManager.GetDefinition(System.Int32)">
            <summary>
            获取指定ID的权限定义
            </summary>
            <param name="id">权限定义ID</param>
            <returns>权限定义对象</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.PermissionManager.GetDefinitions(ESP.Framework.Entity.EntityType,System.Int32)">
            <summary>
            获取与指定实体关联的所有权限定义
            </summary>
            <param name="entityType">实体类型</param>
            <param name="entityID">实体ID</param>
            <returns>权限定义对象列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.PermissionManager.GetAllDefinitions">
            <summary>
            获取所有的权限定义
            </summary>
            <returns>所有权限定义的列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.PermissionManager.RemoveDefinition(System.Int32)">
            <summary>
            删除指定ID的权限定义
            </summary>
            <param name="id">要删除的权限定义的ID</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.PermissionManager.AddDefinition(ESP.Framework.Entity.PermissionDefinitionInfo)">
            <summary>
            添加新的权限定义
            </summary>
            <param name="permissionDefinition">要添加的权限定义</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.PermissionManager.GetPermissions(ESP.Framework.Entity.EntityType,System.Int32,ESP.Framework.Entity.PermissionOwnerTypes,System.Int32)">
            <summary>
            获取指定的权限持有者（角色、用户等）对指定的实体对象拥有的权限列表
            </summary>
            <param name="entityType">权限控制的实体的类型</param>
            <param name="entityID">权限控制的实体的ID</param>
            <param name="ownerType">权限持有者类型</param>
            <param name="ownerID">权限持有者ID</param>
            <returns>权限名字的列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.PermissionManager.UpdateRolePermissions(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.Int32,System.Int32}},System.Int32,System.Boolean)">
            <summary>
            更新角色的权限（只针对模块）
            </summary>
            <param name="list">权限列表， key为权限定义， value为模块ID</param>
            <param name="roleId">角色的ID</param>
            <param name="isFakeRole">roleId是否为系统内置的伪角色</param>
        </member>
        <member name="T:ESP.Framework.SqlDataAccess.SettingsDataProvider">
            <summary>
            系统设置数据访问实现类
            </summary>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.SettingsDataProvider.GetSettings(System.Int32,System.Boolean)">
            <summary>
            获取站点的所有设置
            </summary>
            <param name="webSiteId">设置所属的站点ID，如果为0表示返回公共设置</param>
            <param name="includeSystemSettings">如果站点不为0， 该参数指定是否同时返回公共设置</param>
            <returns>站点的所有设置项</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.SettingsDataProvider.GetSetting(System.Int32,System.String,System.Boolean)">
            <summary>
            获取站点指定名称的设置项
            </summary>
            <param name="webSiteId">设置所属的站点ID，如果为0表示返回公共设置</param>
            <param name="settingName">设置的名称</param>
            <param name="includeSystemSettings">如果站点不为0， 该参数指定是否同时返回公共设置</param>
            <returns>站点指定名称的设置项</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.SettingsDataProvider.AddDefinition(ESP.Framework.Entity.SettingDefinitionInfo)">
            <summary>
            添加设置定义
            </summary>
            <param name="definition">设置定义</param>
            <return>新定义的标识ID</return>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.SettingsDataProvider.GetDefinitions(System.Int32)">
            <summary>
            获取站点的所有设置定义
            </summary>
            <param name="webSiteId">站点ID</param>
            <returns>所有设置定义的列表</returns>
            <remarks>
            返回值中包括公共设置定义中可重载的定义。
            </remarks>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.SettingsDataProvider.SaveSetting(ESP.Framework.Entity.SettingInfo,System.Int32)">
            <summary>
            保存设置
            </summary>
            <param name="value">设置项信息</param>
            <param name="webSiteId">设置所属的站点的ID，如果为0， 则表示是公共设置</param>
        </member>
        <member name="T:ESP.Data.DbConnectionHolder">
            <summary>
            对 DbConnection 的包装。
            </summary>
            <remarks>
            当在环境事务中创建 DbConnectionHolder 实例时， 将首先检索当前环境事务中是否
            有相同连接字符串的连接存在， 如果有， 则使用现有连接， 否则创建新的连接并存
            储到当前环境事务的连接列表中。 当对实例调用 Dispose 时并不关闭数据库连接，
            而等到当前环境事务结束时， 才关闭连接。
            
            如果不在环境事务中创建实例， 则总是创建新的连接对象。 当对实例调用 Dispose
            时总是释放数据库连接。
            </remarks>
        </member>
        <member name="F:ESP.Data.DbConnectionHolder.transactionConnections">
            <summary>
            连接列表的字典
            </summary>
        </member>
        <member name="M:ESP.Data.DbConnectionHolder.GetConnection(System.String)">
            <summary>
            获取当前环境事务中与连接字符串匹配的现有连接对象， 如果没有则创建一个， 如果不前不存在环境事务， 则返回空。 
            </summary>
            <param name="connectionString">连接字符串。</param>
            <returns>如果存在环境事务， 则返回相应的连接对象， 否则返回空。</returns>
        </member>
        <member name="M:ESP.Data.DbConnectionHolder.OnTransactionCompleted(System.Object,System.Transactions.TransactionEventArgs)">
            <summary>
            环境事务结束事件响应程序， 负责释放与环境事件相关的数据库连接。
            </summary>
            <param name="sender">事件源。</param>
            <param name="e">事件参数。</param>
        </member>
        <member name="F:ESP.Data.DbConnectionHolder._DisposeConnection">
            <summary>
            是否需要在 Dispose 时释放被包装的 DbConnection 连接对象。
            </summary>
        </member>
        <member name="M:ESP.Data.DbConnectionHolder.#ctor">
            <summary>
            用ESP配置节的 Entity Framework 设置构造实例。总是打开连接，即使没有环境事务。
            </summary>
        </member>
        <member name="M:ESP.Data.DbConnectionHolder.#ctor(System.String)">
            <summary>
            用连接字符串和数据提供程序名称构造实例。。总是打开连接，即使没有环境事务。
            </summary>
            <param name="connectionStringSettingsName">连接字符串配置项名称。</param>
        </member>
        <member name="M:ESP.Data.DbConnectionHolder.#ctor(System.String,System.String)">
            <summary>
            用连接字符串和数据提供程序名称构造实例。总是打开连接，即使没有环境事务。
            </summary>
            <param name="connectionString">连接字符串。</param>
            <param name="providerName">数据提供程序名称。</param>
        </member>
        <member name="M:ESP.Data.DbConnectionHolder.Initialize(System.String,System.String)">
            <summary>
            用连接字符串和数据提供程序名称初始化实例，并允许指定是否在 Dispose 时
            释放不在事务中创建的新的 DbConnection 对象。
            </summary>
            <param name="connectionString">连接字符串。</param>
            <param name="providerName">数据提供程序名称。</param>
        </member>
        <member name="M:ESP.Data.DbConnectionHolder.GetNewConnection(System.String)">
            <summary>
            创建一个新的数据库连接。
            </summary>
            <param name="connectionString">连接字符串。</param>
            <returns>新创建的数据库连接，其连接字符串已经被设置为 connectionString 参数的值，并已经打开。</returns>
        </member>
        <member name="M:ESP.Data.DbConnectionHolder.CreateCommand(System.String,System.Data.CommandType)">
            <summary>
            创建一个与连接匹配的数据库命令对象。
            </summary>
            <param name="commandText">命令字符串。</param>
            <param name="commandType">命令类型。</param>
            <returns>数据库命令对象， 其 Connection 和 CommandText 属性已经设置。</returns>
        </member>
        <member name="M:ESP.Data.DbConnectionHolder.CreateDataAdapter(System.String,System.Data.CommandType)">
            <summary>
            用 selectCommandText 参数作为 SelectCommand 构造数据适配器对象。
            </summary>
            <param name="selectCommandText">要创建的数据适配器对象的 SelectCommand 的命令文本。</param>
            <param name="commandType">命令类型。</param>
            <returns>新创建的数据适配器对象。</returns>
        </member>
        <member name="M:ESP.Data.DbConnectionHolder.CreateParameter">
            <summary>
            创建与当前数据库连接匹配的查询参数实例。
            </summary>
            <returns>新创建的查询参数对象。</returns>
        </member>
        <member name="M:ESP.Data.DbConnectionHolder.CreateParameter(System.String,System.Object)">
            <summary>
            创建与当前数据库连接匹配的查询参数实例。
            </summary>
            <param name="name">参数名称。</param>
            <param name="value">参数值。</param>
            <returns>新创建的查询参数对象。</returns>
        </member>
        <member name="M:ESP.Data.DbConnectionHolder.CreateParameter(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            创建与当前数据库连接匹配的查询参数实例。
            </summary>
            <param name="name">参数名称。</param>
            <param name="value">参数值。</param>
            <param name="direction">参数的传递方向。</param>
            <returns>新创建的查询参数对象。</returns>
        </member>
        <member name="M:ESP.Data.DbConnectionHolder.CreateParameter(System.String,System.Object,System.Data.ParameterDirection,System.Data.DbType)">
            <summary>
            创建与当前数据库连接匹配的查询参数实例。
            </summary>
            <param name="name">参数名称。</param>
            <param name="value">参数值。</param>
            <param name="direction">参数的传递方向。</param>
            <param name="dbType">参数的类型。</param>
            <returns>新创建的查询参数对象。</returns>
        </member>
        <member name="M:ESP.Data.DbConnectionHolder.CreateParameter(System.String,System.Object,System.Data.ParameterDirection,System.Data.DbType,System.Int32)">
            <summary>
            创建与当前数据库连接匹配的查询参数实例。
            </summary>
            <param name="name">参数名称。</param>
            <param name="value">参数值。</param>
            <param name="direction">参数的传递方向。</param>
            <param name="dbType">参数的类型。</param>
            <param name="size">参数的长度。</param>
            <returns>新创建的查询参数对象。</returns>
        </member>
        <member name="M:ESP.Data.DbConnectionHolder.Dispose">
            <summary>
            释放当前实例，如果连接不在环境事务中， 则同时释放数据库连接。
            </summary>
        </member>
        <member name="M:ESP.Data.DbConnectionHolder.GetObjectContext``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ESP.Data.DbConnectionHolder.HookConnection">
            <summary>
            把当前对象的连接添加到当前事务的连接列表中。
            如果当前无环境事务， 或列表中已经存在相同连接字符串的连接， 
            则方法引发 System.InvalidOperationException 类型的异常。
            </summary>
            <returns>
            记录本次操作信息， 用于在事务结束前将连接从事务的连接
            列表中移除。
            </returns>
        </member>
        <member name="P:ESP.Data.DbConnectionHolder.DbConnection">
            <summary>
            被包装的 DbConnection 对象。
            </summary>
        </member>
        <member name="P:ESP.Data.DbConnectionHolder.Factory">
            <summary>
            数据源提供程序工厂实例。
            </summary>
        </member>
        <member name="P:ESP.Data.DbConnectionHolder.ConnectionString">
            <summary>
            连接字符串。
            </summary>
        </member>
        <member name="P:ESP.Data.DbConnectionHolder.ProviderName">
            <summary>
            数据源提供程序名称。
            </summary>
        </member>
        <member name="T:ESP.Data.Linq.ObjectQueryDescriptor`2">
            <summary>
            
            </summary>
            <typeparam name="TObjectContext"></typeparam>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:ESP.Data.Linq.ObjectQueryDescriptor`2.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESP.Data.Linq.ObjectQueryDescriptor`2.CreateContext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESP.Data.Linq.ObjectQueryDescriptor`2.CreateQuery(System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:ESP.Web.UI.CaptchaImageHandler">
            <summary>
            响应验证码图片请求的 HttpHandler。
            </summary>
        </member>
        <member name="M:ESP.Web.UI.CaptchaImageHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            己重载。处理请求。
            </summary>
            <param name="context">当前请求的上下文。</param>
        </member>
        <member name="P:ESP.Web.UI.CaptchaImageHandler.IsReusable">
            <summary>
            己重载。是否可重用。
            </summary>
        </member>
        <member name="T:ESP.Security.PassportAuthentication">
            <summary>
            Passport登录控制类
            </summary>
        </member>
        <member name="M:ESP.Security.PassportAuthentication.GetLoginUrl">
            <summary>
            获取用于登录按钮的Url
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESP.Security.PassportAuthentication.GetLoginUrl(System.Int32,System.String)">
            <summary>
            获取登录页面
            </summary>
            <returns>登录页面</returns>
        </member>
        <member name="M:ESP.Security.PassportAuthentication.GetLogoutUrl">
            <summary>
            获取用于退出登录按钮的Url
            </summary>
            <returns>退出登录的Url</returns>
        </member>
        <member name="M:ESP.Security.PassportAuthentication.GetLogoutUrl(System.String)">
            <summary>
            获取用于退出登录按钮的Url
            </summary>
            <param name="returnUrl">退出登录后返回的Url</param>
            <returns>退出登录的Url</returns>
        </member>
        <member name="M:ESP.Security.PassportAuthentication.GetLogoutPage">
            <summary>
            获取退出页面
            </summary>
            <returns>退出页面</returns>
        </member>
        <member name="M:ESP.Security.PassportAuthentication.EncryptTicket(ESP.Security.PassportAuthenticationTicket,System.String)">
            <summary>
            加密票据
            </summary>
            <param name="ticket">要加密的票据</param>
            <param name="key">密钥</param>
            <returns>加密结果</returns>
        </member>
        <member name="M:ESP.Security.PassportAuthentication.DecryptTicket(System.String,System.String)">
            <summary>
            解密票据
            </summary>
            <param name="token">加密后的票据</param>
            <param name="key">密钥</param>
            <returns>解密出的票据</returns>
        </member>
        <member name="M:ESP.Security.PassportAuthentication.SetAuthCookie(System.Int32,System.String)">
            <summary>
            设置认证票据
            </summary>
            <param name="userId">用户ID</param>
            <param name="username">用户名</param>
        </member>
        <member name="M:ESP.Security.PassportAuthentication.SetAuthCookie(ESP.Security.PassportAuthenticationTicket)">
            <summary>
            设置认证Cookie
            </summary>
            <param name="tiket">认证票据</param>
        </member>
        <member name="M:ESP.Security.PassportAuthentication.UpdateAuthCookie(ESP.Security.PassportAuthenticationTicket)">
            <summary>
            如有必要则更新认证Cookie
            </summary>
            <param name="tiket">认证票据</param>
        </member>
        <member name="M:ESP.Security.PassportAuthentication.RemoveAuthCookie">
            <summary>
            移除认证Cookie
            </summary>
        </member>
        <member name="P:ESP.Security.PassportAuthentication.AuthTokenExpiredInSeconds">
            <summary>
            令牌过期时间（秒）
            </summary>
        </member>
        <member name="P:ESP.Security.PassportAuthentication.AuthCookieExpiredInSeconds">
            <summary>
            票据过期时间（秒，但精确到分钟）
            </summary>
        </member>
        <member name="P:ESP.Security.PassportAuthentication.AuthTokenName">
            <summary>
            登录的Url查询参数名称
            </summary>
        </member>
        <member name="P:ESP.Security.PassportAuthentication.SignOutQueryName">
            <summary>
            退出登录的Url查询参数名称
            </summary>
        </member>
        <member name="P:ESP.Security.PassportAuthentication.AuthCookieName">
            <summary>
            认证Cookie的名字
            </summary>
        </member>
        <member name="T:ESP.Mail.AspxMail">
            <summary>
            Asp.Net 页面格式的邮件模板基类。
            </summary>
        </member>
        <member name="M:ESP.Mail.AspxMail.OnPreInit(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:ESP.Mail.AspxMail.Render(System.IO.TextWriter,System.Object,System.Net.Mail.MailMessage,System.String@)">
            <summary>
            初始化模板实例
            </summary>
            <param name="output">用于输出的文本流。</param>
            <param name="dataSource">数据源。</param>
            <param name="mailMessage">要发送的邮件。</param>
            <param name="subject">返回邮件的主题。</param>
        </member>
        <member name="P:ESP.Mail.AspxMail.DataSource">
            <summary>
            要绑定到邮件内容中的数据源。
            </summary>
        </member>
        <member name="P:ESP.Mail.AspxMail.MailMessage">
            <summary>
            要发送的邮件，其中主题和内容尚未设置。
            </summary>
        </member>
        <member name="T:ESP.Framework.Entity.RoleGroupInfo">
            <summary>
            角色组（方便角色管理）
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.RoleGroupInfo.RoleGroupID">
            <summary>
            标识列
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.RoleGroupInfo.RoleGroupName">
            <summary>
            角色组名称
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.RoleGroupInfo.ParentID">
            <summary>
            上一级分组的标识
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.RoleGroupInfo.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.RoleGroupInfo.RoleGroupLevel">
            <summary>
            在角色组树中的级次
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.RoleGroupInfo.Creator">
            <summary>
            创建者ID
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.RoleGroupInfo.CreatorName">
            <summary>
            创建者用户名
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.RoleGroupInfo.CreatedTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.RoleGroupInfo.LastModifier">
            <summary>
            最后修改人用户ID
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.RoleGroupInfo.LastModifierName">
            <summary>
            最后修改人用户名
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.RoleGroupInfo.LastModifiedTime">
            <summary>
            最后修改时间
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.RoleGroupInfo.RowVersion">
            <summary>
            记录版本
            </summary>
        </member>
        <member name="T:ESP.Framework.Entity.PermissionDefinitionInfo">
            <summary>
            权限定义表
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.PermissionDefinitionInfo.PermissionDefinitionID">
            <summary>
            标识列
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.PermissionDefinitionInfo.PermissionName">
            <summary>
            权限的名字
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.PermissionDefinitionInfo.ReferredEntityID">
            <summary>
            权限控制的对象的ID
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.PermissionDefinitionInfo.ReferredEntityType">
            <summary>
            权限控制的对象的类型（站点、页面、模块）
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.PermissionDefinitionInfo.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.PermissionDefinitionInfo.Creator">
            <summary>
            创建者ID
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.PermissionDefinitionInfo.CreatedTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="T:ESP.Framework.Entity.DepartmentTypeInfo">
            <summary>
            部门分类
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.DepartmentTypeInfo.DepartmentTypeID">
            <summary>
            标识列
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.DepartmentTypeInfo.DepartmentTypeName">
            <summary>
            部门类别名称
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.DepartmentTypeInfo.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.DepartmentTypeInfo.IsSaleDepartment">
            <summary>
            是否是销售部门
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.DepartmentTypeInfo.IsSubCompany">
            <summary>
            是否是子公司
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.DepartmentTypeInfo.Status">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.DepartmentTypeInfo.RowVersion">
            <summary>
            记录版本
            </summary>
        </member>
        <member name="T:ESP.Framework.Entity.DepartmentPositionInfo">
            <summary>
            部门职务表
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.DepartmentPositionInfo.DepartmentPositionID">
            <summary>
            标识列
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.DepartmentPositionInfo.DepartmentPositionName">
            <summary>
            职务名称
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.DepartmentPositionInfo.PositionCode">
            <summary>
            部门代码
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.DepartmentPositionInfo.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.DepartmentPositionInfo.DepartmentID">
            <summary>
            所属部门ID
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.DepartmentPositionInfo.DepartmentName">
            <summary>
            所属部门名称
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.DepartmentPositionInfo.PositionLevel">
            <summary>
            职务级别
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.DepartmentPositionInfo.RowVersion">
            <summary>
            记录版本
            </summary>
        </member>
        <member name="T:ESP.Framework.DataAccess.IWebPageDataProvider">
            <summary>
            页面数据访问接口
            </summary>
        </member>
        <member name="M:ESP.Framework.DataAccess.IWebPageDataProvider.Get(System.Int32)">
            <summary>
            获取指定ID页面的信息
            </summary>
            <param name="id">页面的ID</param>
            <returns>页面信息</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IWebPageDataProvider.GetAll">
            <summary>
            获取所有页面的信息列表
            </summary>
            <returns>所有页面的信息列表</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IWebPageDataProvider.GetByPath(System.Int32,System.String)">
            <summary>
            获取指定路径的页面
            </summary>
            <param name="webSiteId">站点ID</param>
            <param name="appRelativePath">页面对站点根目录的相对路径</param>
            <returns>页面信息</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IWebPageDataProvider.Create(ESP.Framework.Entity.WebPageInfo)">
            <summary>
            创建新的页面
            </summary>
            <param name="webPage">要创建的页面</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IWebPageDataProvider.Update(ESP.Framework.Entity.WebPageInfo)">
            <summary>
            更新页面信息
            </summary>
            <param name="webPage">要更新的页面</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IWebPageDataProvider.Delete(System.Int32)">
            <summary>
            删除指定ID的页面
            </summary>
            <param name="id">要删除的页面的ID</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IWebPageDataProvider.GetByWebSite(System.Int32)">
            <summary>
            获取指定站点的所有页面的列表
            </summary>
            <param name="webSiteId">站点ID</param>
            <returns>页面信息列表</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IWebPageDataProvider.GetByModule(System.Int32)">
            <summary>
            获取指定模块的所有页面的列表
            </summary>
            <param name="moduleId">模块ID</param>
            <returns>页面信息列表</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IWebPageDataProvider.GetModuleIDsByPath(System.Int32,System.String)">
            <summary>
            获取指定路径的页面所属的所有模块的Id
            </summary>
            <param name="webSiteId">站点ID</param>
            <param name="appRelativePath">页面对站点根目录的相对路径</param>
            <returns>模块ID列表</returns>
        </member>
        <member name="T:ESP.Framework.SqlDataAccess.EmployeeDataProvider">
            <summary>
            员工数据访问类
            </summary>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.EmployeeDataProvider.Get(System.Int32)">
            <summary>
            获取指定ID的员工信息
            </summary>
            <param name="id">员工ID</param>
            <returns>员工信息</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.EmployeeDataProvider.GetAll">
            <summary>
            获取所有的员工信息
            </summary>
            <returns>所有员工信息的列表</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.EmployeeDataProvider.GetByCode(System.String)">
            <summary>
            获取指定员工编号的员工信息
            </summary>
            <param name="code">员工编号</param>
            <returns>员工信息</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.EmployeeDataProvider.GetByType(System.Int32)">
            <summary>
            获取指定类型的员工列表
            </summary>
            <param name="typeId">员工类型ID</param>
            <returns>员工列表</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.EmployeeDataProvider.Update(ESP.Framework.Entity.EmployeeInfo)">
            <summary>
            更新员工信息
            </summary>
            <param name="employee">员工信息</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.EmployeeDataProvider.Delete(System.Int32)">
            <summary>
            删除指定ID的员工信息
            </summary>
            <param name="id">要删除的员工信息的ID</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.EmployeeDataProvider.CreateEmployeeCode(System.String,System.String)">
            <summary>
            生成员工代码
            </summary>
            <param name="pattern">员工代码的生成模式，其中由"{"和"}"界定的令牌会被替换个时间或自动编号。</param>
            <param name="numberType">编号类型。</param>
            <returns>员工代码</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.EmployeeDataProvider.Create(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,ESP.Framework.Entity.EmployeeInfo)">
            <summary>
            创建新员工，同时创建关联用户
            </summary>
            <param name="username">用户名</param>
            <param name="firstNameCN">中文名</param>
            <param name="lastNameCN">中文姓氏</param>
            <param name="firstNameEN">英文名</param>
            <param name="lastNameEN">英文姓氏</param>
            <param name="email">安全Email</param>
            <param name="isApproved">用户是否通过审核</param>
            <param name="password">密码</param>
            <param name="employee">员工信息</param>
            <returns>
            操作错误状态
            如果创建用户成功，返回 EmployeeCreateStatus.Success;
            如果用户名效，返回 EmployeeCreateStatus.InvalidUserName;
            如果密码无效，返回 EmployeeCreateStatus.InvalidPassword;
            如果Email无效，返回 EmployeeCreateStatus.InvalidEmail;
            如果用户名已经存在，返回 EmployeeCreateStatus.DuplicateUserName;
            如果Email已经存在且配置了Email唯一，返回 EmployeeCreateStatus.DuplicateEmail;
            如果员工类型ID无效，返回 EmployeeCreateStatus.InvalidTypeID;
            如果员工代码无效，返回 EmployeeCreateStatus.InvalidCode;
            如果员工代码已经存在，返回 EmployeeCreateStatus.DuplicateCode;
            如果发生未知错误，返回 EmployeeCreateStatus.ProviderError;
            </returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.EmployeeDataProvider.Search(System.Int32,System.Int32,System.String,System.String,ESP.Framework.DataAccess.Utilities.DbDataParameter[])">
            <summary>
            查询符合相关条件的员工记录，并按指定的排序规则排序后分页返回
            </summary>
            <param name="pageSize">分页大小</param>
            <param name="pageIndex">要返回的页码，索引从0开始</param>
            <param name="orderBy">
            排序规则（对用户表中列的引用须使用u.前缀，
            对员工表中列的引用须使用e.前缀，
            如 “u.Username ASC” 即按Username列升序排列）
            </param>
            <param name="where">
            查询条件（对Users表中列名的引用须使用u.前缀，对员工表中列的引用须使用e.前缀）
            </param>
            <param name="paras">
            查询条件中要使用到的参数，对于SQL Server，这里的参数名不带前辍符号 "@"，
            例如对于命名参数 @EmployeeName， 只需标识为 EmployeeName 即可。
            _PageIndex和_PageSize两个参数为本方法内部分页保留使用。
            </param>
            <returns>查询到的员工记录列表</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.EmployeeDataProvider.GetTypes">
            <summary>
            获取职工类型列表
            </summary>
            <returns>职工类型列表，Key为类型ID，Value为类型名称</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.EmployeeDataProvider.GetTypeName(System.Int32)">
            <summary>
            获得职工类型
            </summary>
            <param name="typeId">类型ID</param>
            <returns>类型名称</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.EmployeeDataProvider.AddType(System.String)">
            <summary>
            添加职工类型
            </summary>
            <param name="type">类型名称</param>
            <returns>类型ID</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.EmployeeDataProvider.RemoveType(System.String)">
            <summary>
            删除职工类型
            </summary>
            <param name="type">要删除的类型名称</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.EmployeeDataProvider.RemoveType(System.Int32)">
            <summary>
            删除职工类型
            </summary>
            <param name="typeId">要删除的类型ID</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.EmployeeDataProvider.GetDictionary">
            <summary>
            获取所有员工的列表，并以字典返回
            </summary>
            <returns>所有员工的字典列表</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.EmployeeDataProvider.GetEmployeesByDepartment(System.Int32)">
            <summary>
            根据部门ID获取员工列表
            </summary>
            <param name="departmentId">部门ID</param>
            <returns>员工列表</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.EmployeeDataProvider.Search(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            搜索员工，并分页返回记录集合
            </summary>
            <param name="keyword">关键字</param>
            <param name="pageIndex">要获取的记录的页码</param>
            <param name="pageSize">分页大小</param>
            <param name="recordCount">总记录数，用于计算总页数</param>
            <returns>匹配的员工列表</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.EmployeeDataProvider.SearchByChineseName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            根据中文名字搜索员工，并分页返回记录集合
            </summary>
            <param name="name">关键字</param>
            <param name="pageIndex">要获取的记录的页码</param>
            <param name="pageSize">分页大小</param>
            <param name="recordCount">总记录数，用于计算总页数</param>
            <returns>匹配的员工列表</returns>
        </member>
        <member name="T:ESP.Framework.SqlDataAccess.RoleGroupDataProvider">
            <summary>
            角色数据访问类
            </summary>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.RoleGroupDataProvider.Get(System.Int32)">
            <summary>
            获取指定ID的角色组
            </summary>
            <param name="id">角色组ID</param>
            <returns>角色组信息</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.RoleGroupDataProvider.GetAll">
            <summary>
            获取所有角色组的列表
            </summary>
            <returns>角色组信息列表</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.RoleGroupDataProvider.Update(ESP.Framework.Entity.RoleGroupInfo)">
            <summary>
            更新角色组信息
            </summary>
            <param name="roleGroup">要更新的角色组</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.RoleGroupDataProvider.Create(ESP.Framework.Entity.RoleGroupInfo)">
            <summary>
            创建新的角色组
            </summary>
            <param name="roleGroup">要创建的角色组</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.RoleGroupDataProvider.Delete(System.Int32)">
            <summary>
            删除指定ID的角色组
            </summary>
            <param name="id">要删除的角色组的ID</param>
        </member>
        <member name="T:ESP.Framework.Entity.MemberInfo">
            <summary>
            成员信息
            用户（目前就是员工）登录后就应该建立这个对象
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.MemberInfo.UserInfomation">
            <summary>
            基础信息
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.MemberInfo.EmployeeInformation">
            <summary>
            员工信息
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.MemberInfo.EmployeePositionInfomationList">
            <summary>
            员工部门职务信息
            </summary>
        </member>
        <member name="T:ESP.Framework.BusinessLogic.TaskItemManager">
            <summary>
            工作项控制类
            </summary>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.TaskItemManager.GetTaskItems(System.String,System.Int32)">
            <summary>
            获取指定ID的用户的待办事宜列表
            从Web缓存中
            </summary>
            <param name="key">缓存Key</param>
            <param name="userId">用户ID</param>
            <returns>待办事宜列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.TaskItemManager.GetAllTaskItems">
            <summary>
            获取所有人的所有代办事宜
            存入Web缓存中
            </summary>
            <returns>待办事宜列表</returns>
        </member>
        <member name="T:ESP.DataAccessAuthorization.BusinessLogic.DataAccessAction">
            <summary>
            权限操作业务类
            </summary>
        </member>
        <member name="M:ESP.DataAccessAuthorization.BusinessLogic.DataAccessAction.NewAction(ESP.DataAccessAuthorization.Entity.DataAccessAction)">
            <summary>
            新建权限操作
            如果新建重复的权限操作会捕捉到相应的异常，并返回（-1）
            </summary>
            <param name="model"></param>
            <returns>如果新建成功返回新建立的权限操作序号，如果新建失败也没有引发异常则返回（0），插入重复数据则会引发异常返回（-1）</returns>
        </member>
        <member name="M:ESP.DataAccessAuthorization.BusinessLogic.DataAccessAction.UpdateAction(ESP.DataAccessAuthorization.Entity.DataAccessAction)">
            <summary>
            更新权限操作
            如果更新的数据量不等于1都视为失败，由于没有规范的处理方法，所以抛出异常
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:ESP.DataAccessAuthorization.BusinessLogic.DataAccessAction.Get(System.Int32)">
            <summary>
            根据主键获取一个权限操作实例对象
            </summary>
            <param name="actionId"></param>
            <returns></returns>
        </member>
        <member name="M:ESP.DataAccessAuthorization.BusinessLogic.DataAccessAction.GetActionListBySettings(System.Collections.Generic.IList{System.Int32})">
            <summary>
            根据设定获取AccessActionList
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="T:ESP.Configuration.Utility">
            <summary>
            配置辅助类
            </summary>
        </member>
        <member name="M:ESP.Configuration.Utility.GetXmlStringAtribute(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            获取配置节中指定名称的属性的值。
            </summary>
            <param name="section">配置节。</param>
            <param name="name">属性名称。</param>
            <param name="isRequired">
            是否不可为空。如果要访问的属性的值为空字符串或空引用
            且 isRequired 参数为 true，则该方法引发
            <see cref="T:System.Configuration.ConfigurationErrorsException"/>
            类型的异常。
            </param>
            <returns>属性的值。</returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">
            属性的值为空字符串或空引用，且 isRequired 参数为 true。
            </exception>
        </member>
        <member name="T:ESP.UserPoint.DataAccess.Utilities.SqlUtil">
            <summary>
            SQL操作工具
            </summary>
        </member>
        <member name="M:ESP.UserPoint.DataAccess.Utilities.SqlUtil.SetParameters(System.Data.Common.DbCommand,System.Data.Common.DbParameter[])">
            <summary>
            向DbCommand内添加DbParameter数组
            </summary>
            <param name="cmd"></param>
            <param name="dbps"></param>
        </member>
        <member name="T:ESP.UserPoint.BusinessLogic.UserPointFacade">
             <summary>
            根据员工的日常操作，获取相应的积分
             </summary>
        </member>
        <member name="M:ESP.UserPoint.BusinessLogic.UserPointFacade.AddSupplier(System.Int32,System.String)">
            <summary>
            在供应链系统中添加供应商时获得积分
            </summary>
            <param name="userid">添加供应商的员工ID</param>
            <param name="keycode">t_userpointrule表中对应的规则代码，格式类似Supplier_Add</param>
            <returns></returns>
        </member>
        <member name="M:ESP.UserPoint.BusinessLogic.UserPointFacade.ModifySupplier(System.Int32,System.String)">
            <summary>
            在供应链系统中修改供应商时获得积分
            </summary>
            <param name="userid">修改供应商的员工ID</param>
            <param name="keycode">t_userpointrule表中对应的规则代码，格式类似Supplier_Modify</param>
            <returns></returns>
        </member>
        <member name="M:ESP.UserPoint.BusinessLogic.UserPointFacade.SearchSupplier(System.Int32,System.String)">
            <summary>
            在供应链系统中查询供应商时获得积分
            </summary>
            <param name="userid">查询供应商的员工ID</param>
            <param name="keycode">t_userpointrule表中对应的规则代码，格式类似Supplier_Search</param>
            <returns></returns>
        </member>
        <member name="M:ESP.UserPoint.BusinessLogic.UserPointFacade.ShareSupplier(System.Int32,System.String)">
            <summary>
            在供应链系统中分享供应商时获得积分
            </summary>
            <param name="userid">分享供应商的员工ID</param>
            <param name="keycode">t_userpointrule表中对应的规则代码，格式类似Supplier_Share</param>
            <returns></returns>
        </member>
        <member name="M:ESP.UserPoint.BusinessLogic.GiftManager.Add(ESP.UserPoint.Entity.GiftInfo)">
            <summary>
            增加一条数据
            </summary>
        </member>
        <member name="M:ESP.UserPoint.BusinessLogic.GiftManager.Update(ESP.UserPoint.Entity.GiftInfo)">
            <summary>
            更新一条数据
            </summary>
        </member>
        <member name="M:ESP.UserPoint.BusinessLogic.GiftManager.Delete(System.Int32)">
            <summary>
            删除一条数据
            </summary>
        </member>
        <member name="M:ESP.UserPoint.BusinessLogic.GiftManager.GetModel(System.Int32)">
            <summary>
            得到一个对象实体
            </summary>
        </member>
        <member name="M:ESP.UserPoint.BusinessLogic.GiftManager.GetList(System.String)">
            <summary>
            获得数据列表
            </summary>
        </member>
        <member name="T:ESP.Logging.Linq2EntitiesLogProvider">
            <summary>
            日志操作提供程序类
            </summary>
        </member>
        <member name="M:ESP.Logging.Linq2EntitiesLogProvider.Add(System.String,System.String,ESP.Logging.LogLevel,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            记录一条日志
            </summary>
            <param name="message">消息</param>
            <param name="category">日志类别</param>
            <param name="logLevel">日志级别</param>
            <param name="processId">当前进程ID</param>
            <param name="threadId">当前线程ID</param>
            <param name="applicationName">当前应用程序名称</param>
            <param name="applicationVersion">当前应用程序版本</param>
            <param name="url">当前请求的Url</param>
            <param name="pagePath">当前正在执行的页面的路径</param>
            <param name="userId">当前用户ID</param>
            <param name="serverHostName">服务器名称</param>
            <param name="serverAddress">服务器站IP，如果主机为多IP配置，则该参数指定当前请求发生的IP</param>
            <param name="serverPort">当前请求的端口号</param>
            <param name="clientHostName">客户机名称</param>
            <param name="clientAddress">客户机IP地址</param>
            <param name="clientPort">客户端端口</param>
            <param name="userAgent">客户端浏览器</param>
            <param name="requestMethod">HTTP请求方法（GET, POST, ...）</param>
            <param name="exceptionType">异常类型</param>
            <param name="exceptionInfo">异常的详细信息</param>
            <param name="extendedProperties">其它信息</param>
        </member>
        <member name="M:ESP.Logging.Linq2EntitiesLogProvider.Search(System.Int64,System.Int32,System.String,ESP.Logging.LogLevel,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.DateTime,System.DateTime,System.Int64@)">
            <summary>
            
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="category"></param>
            <param name="logLevel"></param>
            <param name="applicationName"></param>
            <param name="applicationVersion"></param>
            <param name="pagePath"></param>
            <param name="userId"></param>
            <param name="serverAddress"></param>
            <param name="serverPort"></param>
            <param name="clientAddress"></param>
            <param name="clientPort"></param>
            <param name="userAgent"></param>
            <param name="requestMethod"></param>
            <param name="exceptionType"></param>
            <param name="logTimeStart"></param>
            <param name="logTimeEnd"></param>
            <param name="recordCount"></param>
            <returns></returns>
        </member>
        <member name="M:ESP.Logging.Linq2EntitiesLogProvider.Get(System.Int64)">
            <summary>
            
            </summary>
            <param name="logId"></param>
            <returns></returns>
        </member>
        <member name="T:ESP.Framework.Entity.DepartmentInfo">
            <summary>
            部门
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.DepartmentInfo.DepartmentID">
            <summary>
            标识列
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.DepartmentInfo.DepartmentName">
            <summary>
            部门名称
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.DepartmentInfo.DepartmentCode">
            <summary>
            部门代码
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.DepartmentInfo.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.DepartmentInfo.ParentID">
            <summary>
            上级一部门ID
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.DepartmentInfo.DepartmentLevel">
            <summary>
            部门级别
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.DepartmentInfo.DepartmentTypeID">
            <summary>
            部门分类
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.DepartmentInfo.DepartmentTypeName">
            <summary>
            部门分类名称
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.DepartmentInfo.Ordinal">
            <summary>
            部门排序
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.DepartmentInfo.IsSaleDepartment">
            <summary>
            是否是销售部门
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.DepartmentInfo.IsSubCompany">
            <summary>
            是否是子公司
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.DepartmentInfo.Status">
            <summary>
            部门状态
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.DepartmentInfo.RowVersion">
            <summary>
            行版本号
            </summary>
        </member>
        <member name="T:ESP.Framework.DataAccess.IWebSiteDataProvider">
            <summary>
            站点数据访问接口
            </summary>
        </member>
        <member name="M:ESP.Framework.DataAccess.IWebSiteDataProvider.Get(System.Int32)">
            <summary>
            获取指定ID的站点的信息
            </summary>
            <param name="id">站点的ID</param>
            <returns>站点信息</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IWebSiteDataProvider.GetAll">
            <summary>
            获取所有站点的列表
            </summary>
            <returns>站点列表</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IWebSiteDataProvider.Update(ESP.Framework.Entity.WebSiteInfo)">
            <summary>
            更新站点信息
            </summary>
            <param name="webSite">要更新的站点的信息</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IWebSiteDataProvider.Create(ESP.Framework.Entity.WebSiteInfo)">
            <summary>
            创建新的站点
            </summary>
            <param name="webSite">要创建的站点</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IWebSiteDataProvider.Delete(System.Int32)">
            <summary>
            删除指定ID的站点
            </summary>
            <param name="id">要删除的站点的ID</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IWebSiteDataProvider.GetByUser(System.Int32)">
            <summary>
            获取指定ID的用户可以访问的站点的列表
            </summary>
            <param name="userId">用户ID</param>
            <returns>可访问的站点列表</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IWebSiteDataProvider.GetByUrlPrefix(System.String)">
            <summary>
            获取指定Url前缀的站点
            </summary>
            <param name="urlPrefix">站点的Url前缀(不包含http://或https://，也不包含最后的反斜杠)</param>
            <returns>站点信息对象</returns>
        </member>
        <member name="T:ESP.Framework.SqlDataAccess.WebPageDataProvider">
            <summary>
            页面数据访问类
            </summary>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.WebPageDataProvider.Get(System.Int32)">
            <summary>
            获取指定ID页面的信息
            </summary>
            <param name="id">页面的ID</param>
            <returns>页面信息</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.WebPageDataProvider.GetAll">
            <summary>
            获取所有页面的信息列表
            </summary>
            <returns>所有页面的信息列表</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.WebPageDataProvider.GetByWebSite(System.Int32)">
            <summary>
            获取指定站点的所有页面的列表
            </summary>
            <param name="webSiteId">站点ID</param>
            <returns>页面信息列表</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.WebPageDataProvider.GetByModule(System.Int32)">
            <summary>
            获取指定模块的所有页面的列表
            </summary>
            <param name="moduleId">模块ID</param>
            <returns>页面信息列表</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.WebPageDataProvider.Delete(System.Int32)">
            <summary>
            删除指定ID的页面
            </summary>
            <param name="id">要删除的页面的ID</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.WebPageDataProvider.GetByPath(System.Int32,System.String)">
            <summary>
            获取指定路径的页面
            </summary>
            <param name="webSiteId">站点ID</param>
            <param name="appRelativePath">页面对站点根目录的相对路径</param>
            <returns>页面信息</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.WebPageDataProvider.Update(ESP.Framework.Entity.WebPageInfo)">
            <summary>
            更新页面信息
            </summary>
            <param name="webPage">要更新的页面</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.WebPageDataProvider.Create(ESP.Framework.Entity.WebPageInfo)">
            <summary>
            创建新的页面
            </summary>
            <param name="webPage">要创建的页面</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.WebPageDataProvider.GetModuleIDsByPath(System.Int32,System.String)">
            <summary>
            获取指定路径的页面所属的所有模块的ID
            </summary>
            <param name="webSiteId">站点ID</param>
            <param name="appRelativePath">页面对站点根目录的相对路径</param>
            <returns>模块ID列表</returns>
        </member>
        <member name="T:ESP.Framework.DataAccess.Utilities.CBOUtil">
            <summary>
            OR转换辅助类
            </summary>
        </member>
        <member name="M:ESP.Framework.DataAccess.Utilities.CBOUtil.GetBoolean(System.Data.IDataReader,System.String,System.Boolean)">
            <summary>
            从DataReader中指定字段读取Boolean型值，如果该字段为空，返回默认值
            </summary>
            <param name="reader">DataReader对象</param>
            <param name="field">要读取的字段</param>
            <param name="defaultValue">默认值</param>
            <returns>字段的值</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.Utilities.CBOUtil.GetByte(System.Data.IDataReader,System.String,System.Byte)">
            <summary>
            从DataReader中指定字段读取Byte型值，如果该字段为空，返回默认值
            </summary>
            <param name="reader">DataReader对象</param>
            <param name="field">要读取的字段</param>
            <param name="defaultValue">默认值</param>
            <returns>字段的值</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.Utilities.CBOUtil.GetBytes(System.Data.IDataReader,System.String,System.Byte[])">
            <summary>
            从DataReader中指定字段读取Byte型数组，如果该字段为空，返回默认值
            </summary>
            <param name="reader">DataReader对象</param>
            <param name="field">要读取的字段</param>
            <param name="defaultValue">默认值</param>
            <returns>字段的值</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.Utilities.CBOUtil.GetChar(System.Data.IDataReader,System.String,System.Char)">
            <summary>
            从DataReader中指定字段读取Char型值，如果该字段为空，返回默认值
            </summary>
            <param name="reader">DataReader对象</param>
            <param name="field">要读取的字段</param>
            <param name="defaultValue">默认值</param>
            <returns>字段的值</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.Utilities.CBOUtil.GetChars(System.Data.IDataReader,System.String,System.Char[])">
            <summary>
            从DataReader中指定字段读取Char型数组，如果该字段为空，返回默认值
            </summary>
            <param name="reader">DataReader对象</param>
            <param name="field">要读取的字段</param>
            <param name="defaultValue">默认值</param>
            <returns>字段的值</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.Utilities.CBOUtil.GetDateTime(System.Data.IDataReader,System.String,System.DateTime)">
            <summary>
            从DataReader中指定字段读取DateTime型值，如果该字段为空，返回默认值
            </summary>
            <param name="reader">DataReader对象</param>
            <param name="field">要读取的字段</param>
            <param name="defaultValue">默认值</param>
            <returns>字段的值</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.Utilities.CBOUtil.GetDecimal(System.Data.IDataReader,System.String,System.Decimal)">
            <summary>
            从DataReader中指定字段读取Decimal型值，如果该字段为空，返回默认值
            </summary>
            <param name="reader">DataReader对象</param>
            <param name="field">要读取的字段</param>
            <param name="defaultValue">默认值</param>
            <returns>字段的值</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.Utilities.CBOUtil.GetDouble(System.Data.IDataReader,System.String,System.Double)">
            <summary>
            从DataReader中指定字段读取Double型值，如果该字段为空，返回默认值
            </summary>
            <param name="reader">DataReader对象</param>
            <param name="field">要读取的字段</param>
            <param name="defaultValue">默认值</param>
            <returns>字段的值</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.Utilities.CBOUtil.GetFloat(System.Data.IDataReader,System.String,System.Single)">
            <summary>
            从DataReader中指定字段读取Single型值，如果该字段为空，返回默认值
            </summary>
            <param name="reader">DataReader对象</param>
            <param name="field">要读取的字段</param>
            <param name="defaultValue">默认值</param>
            <returns>字段的值</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.Utilities.CBOUtil.GetGuid(System.Data.IDataReader,System.String,System.Guid)">
            <summary>
            从DataReader中指定字段读取Guid型值，如果该字段为空，返回默认值
            </summary>
            <param name="reader">DataReader对象</param>
            <param name="field">要读取的字段</param>
            <param name="defaultValue">默认值</param>
            <returns>字段的值</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.Utilities.CBOUtil.GetInt16(System.Data.IDataReader,System.String,System.Int16)">
            <summary>
            从DataReader中指定字段读取Int16型值，如果该字段为空，返回默认值
            </summary>
            <param name="reader">DataReader对象</param>
            <param name="field">要读取的字段</param>
            <param name="defaultValue">默认值</param>
            <returns>字段的值</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.Utilities.CBOUtil.GetInt32(System.Data.IDataReader,System.String,System.Int32)">
            <summary>
            从DataReader中指定字段读取Int32型值，如果该字段为空，返回默认值
            </summary>
            <param name="reader">DataReader对象</param>
            <param name="field">要读取的字段</param>
            <param name="defaultValue">默认值</param>
            <returns>字段的值</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.Utilities.CBOUtil.GetInt64(System.Data.IDataReader,System.String,System.Int64)">
            <summary>
            从DataReader中指定字段读取Int64型值，如果该字段为空，返回默认值
            </summary>
            <param name="reader">DataReader对象</param>
            <param name="field">要读取的字段</param>
            <param name="defaultValue">默认值</param>
            <returns>字段的值</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.Utilities.CBOUtil.GetString(System.Data.IDataReader,System.String,System.String)">
            <summary>
            从DataReader中指定字段读取String型值，如果该字段为空，返回默认值
            </summary>
            <param name="reader">DataReader对象</param>
            <param name="field">要读取的字段</param>
            <param name="defaultValue">默认值</param>
            <returns>字段的值</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.Utilities.CBOUtil.GetValue(System.Data.IDataReader,System.String)">
            <summary>
            从DataReader中指定字段读取任意类型的值，如果该字段为空，返回默认值
            </summary>
            <param name="reader">DataReader对象</param>
            <param name="field">要读取的字段</param>
            <returns>字段的值</returns>
        </member>
        <member name="T:ESP.Framework.DataAccess.Utilities.CBO">
            <summary>
            OR映射类
            </summary>
        </member>
        <member name="F:ESP.Framework.DataAccess.Utilities.CBO.NullValues">
            <summary>
            逻辑空值
            </summary>
        </member>
        <member name="M:ESP.Framework.DataAccess.Utilities.CBO.LoadList``1(System.Data.IDataReader)">
            <summary>
            从DataReader中加载对象列表
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="reader">DataReader对象</param>
            <returns>对象列表</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.Utilities.CBO.LoadScalarList``1(System.Data.IDataReader)">
            <summary>
            从DataReader中加载标量值列表
            </summary>
            <typeparam name="T">标量类型</typeparam>
            <param name="reader">DataReader对象</param>
            <returns>标量值列表</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.Utilities.CBO.LoadScalarList``1(System.Data.IDataReader,System.Boolean)">
            <summary>
            从DataReader中加载标量值列表
            </summary>
            <typeparam name="T">标量类型</typeparam>
            <param name="reader">DataReader对象</param>
            <param name="withNull">是否包含空值记录</param>
            <returns>标量值列表</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.Utilities.CBO.FillObject``1(System.Data.IDataReader,``0@)">
            <summary>
            用DataReader中的数据填充对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="reader">DataReader对象</param>
            <param name="target">要填充的对象</param>
            <returns>填充好的对象</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.Utilities.CBO.LoadObject``1(System.Data.IDataReader,System.Object@)">
            <summary>
            从DataReader中的加载对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="reader">DataReader对象</param>
            <param name="internalContext">内部文本参数</param>
            <returns>加载的对象</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.Utilities.CBO.LoadObject``1(System.Data.IDataReader)">
            <summary>
            从DataReader中的加载对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="reader">DataReader对象</param>
            <returns>加载的对象</returns>
        </member>
        <member name="T:ESP.Framework.DataAccess.Utilities.NullValues">
            <summary>
            逻辑空值
            </summary>
        </member>
        <member name="F:ESP.Framework.DataAccess.Utilities.NullValues.Boolean">
            <summary>
            空Boolean
            </summary>
        </member>
        <member name="F:ESP.Framework.DataAccess.Utilities.NullValues.Byte">
            <summary>
            空Byte
            </summary>
        </member>
        <member name="F:ESP.Framework.DataAccess.Utilities.NullValues.Char">
            <summary>
            空字符
            </summary>
        </member>
        <member name="F:ESP.Framework.DataAccess.Utilities.NullValues.Decimal">
            <summary>
            空Decimal
            </summary>
        </member>
        <member name="F:ESP.Framework.DataAccess.Utilities.NullValues.Double">
            <summary>
            空Double
            </summary>
        </member>
        <member name="F:ESP.Framework.DataAccess.Utilities.NullValues.Int16">
            <summary>
            空Int16
            </summary>
        </member>
        <member name="F:ESP.Framework.DataAccess.Utilities.NullValues.Int32">
            <summary>
            空Int32
            </summary>
        </member>
        <member name="F:ESP.Framework.DataAccess.Utilities.NullValues.Int64">
            <summary>
            空Int64
            </summary>
        </member>
        <member name="F:ESP.Framework.DataAccess.Utilities.NullValues.Single">
            <summary>
            空浮点
            </summary>
        </member>
        <member name="F:ESP.Framework.DataAccess.Utilities.NullValues.String">
            <summary>
            空字符串
            </summary>
        </member>
        <member name="F:ESP.Framework.DataAccess.Utilities.NullValues.DateTime">
            <summary>
            空DateTime
            </summary>
        </member>
        <member name="F:ESP.Framework.DataAccess.Utilities.NullValues.Guid">
            <summary>
            空Guid
            </summary>
        </member>
        <member name="F:ESP.Framework.DataAccess.Utilities.NullValues.ByteArray">
            <summary>
            空字节数组
            </summary>
        </member>
        <member name="F:ESP.Framework.DataAccess.Utilities.NullValues.CharArray">
            <summary>
            空字符数组
            </summary>
        </member>
        <member name="F:ESP.Framework.DataAccess.Utilities.NullValues.Object">
            <summary>
            空对象
            </summary>
        </member>
        <member name="P:ESP.Framework.DataAccess.Utilities.NullValues.Item(System.Type)">
            <summary>
            根据类型获取逻辑空值
            </summary>
            <param name="key">类型</param>
            <returns>指定类型的逻辑空值</returns>
        </member>
        <member name="T:ESP.Framework.SqlDataAccess.DepartmentTypeDataProvider">
            <summary>
            部门类型数据访问类
            </summary>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.DepartmentTypeDataProvider.Get(System.Int32)">
            <summary>
            获取指定ID的部门类型
            </summary>
            <param name="id">类型ID</param>
            <returns>部门类型信息对象</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.DepartmentTypeDataProvider.GetAll">
            <summary>
            获取所有部门类型列表
            </summary>
            <returns>所有部门类型信息的列表</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.DepartmentTypeDataProvider.Update(ESP.Framework.Entity.DepartmentTypeInfo)">
            <summary>
            创建新的部门类型
            </summary>
            <param name="departmentType">要创建的部门类型对象</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.DepartmentTypeDataProvider.Create(ESP.Framework.Entity.DepartmentTypeInfo)">
            <summary>
            更新部门类型信息
            </summary>
            <param name="departmentType">新的部门类型信息</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.DepartmentTypeDataProvider.Delete(System.Int32)">
            <summary>
            删除指定ID的部门类型
            </summary>
            <param name="id">要删除的部门类型的ID</param>
        </member>
        <member name="T:ESP.Framework.BusinessLogic.AuditBackUpManager">
            <summary>
            代理审核人控制类
            </summary>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.AuditBackUpManager.Add(ESP.Framework.Entity.AuditBackUpInfo)">
            <summary>
            增加一条数据
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.AuditBackUpManager.Update(ESP.Framework.Entity.AuditBackUpInfo)">
            <summary>
            更新一条数据
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.AuditBackUpManager.Delete(System.Int32)">
            <summary>
            删除一条数据
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.AuditBackUpManager.GetModel(System.Int32)">
            <summary>
            得到一个对象实体
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.AuditBackUpManager.GetModelByUserID(System.Int32)">
            <summary>
            得到一个对象实体
            </summary>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.AuditBackUpManager.GetModelsByBackUpUserID(System.Int32)">
            <summary>
            根据BackUpUserID获取代理设置对象列表
            </summary>
            <param name="backUpUserId">要获取的代理设置记录的BackUpUserID</param>
            <returns>代理设置记录对象列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.AuditBackUpManager.GetLayOffModelByUserID(System.Int32)">
            <summary>
             根据主用户获取离职委托实例
            </summary>
            <param name="userId">主用户</param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.AuditBackUpManager.GetLayOffModelsByBackUpUserID(System.Int32)">
            <summary>
            根据委托人获取离职委托列表
            </summary>
            <param name="backUpUserId">委托人</param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.AuditBackUpManager.IsBackUpUser(System.Int32)">
            <summary>
            检查是否是可用代初审人
            </summary>
            <param name="userId">The sys user id.</param>
            <returns>
            	<c>true</c> if [is back up user] [the specified sys user id]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.AuditBackUpManager.GetList(System.String)">
            <summary>
            获得数据列表
            </summary>
            <param name="strWhere">The STR where.</param>
            <returns></returns>
        </member>
        <member name="T:ESP.Data.ObjectContextExtensions">
            <summary>
            扩展方法。
            </summary>
        </member>
        <member name="M:ESP.Data.ObjectContextExtensions.GetTable``1(System.Data.Objects.ObjectContext)">
            <summary>
            获取实体类型 T 对应的实体集的查询。
            如果实体类型对应多个实体集， 则返回任意一个。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:ESP.DataAccessAuthorization.SqlDataAccess.DataAccessMember">
            <summary>
            权限成员 SQL Server 操作类
            </summary>
        </member>
        <member name="T:ESP.DataAccessAuthorization.DataAccess.IDataAccessMember">
            <summary>
            权限成员数据操作
            </summary>
        </member>
        <member name="M:ESP.DataAccessAuthorization.DataAccess.IDataAccessMember.Add(ESP.DataAccessAuthorization.Entity.DataAccessMember)">
            <summary>
            增加一条数据
            </summary>
        </member>
        <member name="M:ESP.DataAccessAuthorization.DataAccess.IDataAccessMember.Update(ESP.DataAccessAuthorization.Entity.DataAccessMember)">
            <summary>
            更新一条数据
            </summary>
        </member>
        <member name="M:ESP.DataAccessAuthorization.DataAccess.IDataAccessMember.Delete(System.Int32)">
            <summary>
            删除一条数据
            </summary>
        </member>
        <member name="M:ESP.DataAccessAuthorization.DataAccess.IDataAccessMember.GetModel(System.Int32)">
            <summary>
            得到一个对象实体
            </summary>
        </member>
        <member name="M:ESP.DataAccessAuthorization.DataAccess.IDataAccessMember.GetList(System.String)">
            <summary>
            获得数据列表
            </summary>
        </member>
        <member name="M:ESP.DataAccessAuthorization.SqlDataAccess.DataAccessMember.Add(ESP.DataAccessAuthorization.Entity.DataAccessMember)">
            <summary>
            添加一条记录
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ESP.DataAccessAuthorization.SqlDataAccess.DataAccessMember.Update(ESP.DataAccessAuthorization.Entity.DataAccessMember)">
            <summary>
            更新一条记录
            </summary>
            <param name="model"></param>
            <returns>返回更新数据数量</returns>
        </member>
        <member name="M:ESP.DataAccessAuthorization.SqlDataAccess.DataAccessMember.Delete(System.Int32)">
            <summary>
            删除一条记录
            </summary>
            <param name="DataAccessMemberID"></param>
            <returns>返回删除数据数量</returns>
        </member>
        <member name="M:ESP.DataAccessAuthorization.SqlDataAccess.DataAccessMember.GetModel(System.Int32)">
            <summary>
            获取某个对象
            </summary>
            <param name="DataAccessMemberID">某个主键值</param>
            <returns>返回拥有指定主键的对象</returns>
        </member>
        <member name="M:ESP.DataAccessAuthorization.SqlDataAccess.DataAccessMember.GetList(System.String)">
            <summary>
            根据查询条件获取对象的List
            </summary>
            <param name="strWhere">条件参数（这个函数有安全漏洞，需要严格控制strWhere，不能把用户的输入直接传递给strWhere变量）</param>
            <returns>返回对象List</returns>
        </member>
        <member name="M:ESP.UserPoint.DataAccess.IUserPointRuleDataProvider.Add(ESP.UserPoint.Entity.UserPointRuleInfo)">
            <summary>
            增加一条数据
            </summary>
        </member>
        <member name="M:ESP.UserPoint.DataAccess.IUserPointRuleDataProvider.Update(ESP.UserPoint.Entity.UserPointRuleInfo)">
            <summary>
            更新一条数据
            </summary>
        </member>
        <member name="M:ESP.UserPoint.DataAccess.IUserPointRuleDataProvider.Delete(System.Int32)">
            <summary>
            删除一条数据
            </summary>
        </member>
        <member name="M:ESP.UserPoint.DataAccess.IUserPointRuleDataProvider.GetModel(System.Int32)">
            <summary>
            得到一个对象实体
            </summary>
        </member>
        <member name="M:ESP.UserPoint.DataAccess.IUserPointRuleDataProvider.GetList(System.String)">
            <summary>
            获得数据列表
            </summary>
        </member>
        <member name="T:ESP.Framework.Entity.SettingInfo">
            <summary>
            设置信息
            </summary>
        </member>
        <member name="M:ESP.Framework.Entity.SettingInfo.GetValue``1">
            <summary>
            获取 T 类型的值
            </summary>
            <typeparam name="T">要获取的值的类型，如果该类型与ValueType不一致可能会引发异常。</typeparam>
            <returns>设置值的 T 型转换</returns>
            <exception cref="T:System.InvalidCastException">设置的值无法转换为 T 类型</exception>
        </member>
        <member name="P:ESP.Framework.Entity.SettingInfo.SettingValue">
            <summary>
            设置值
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.SettingInfo.ValueType">
            <summary>
            值类型
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.SettingInfo.DefinitionID">
            <summary>
            设置的标识
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.SettingInfo.SettingName">
            <summary>
            设置名称
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.SettingInfo.IsInherited">
            <summary>
            是否继承自公共设置
            </summary>
        </member>
        <member name="T:ESP.Framework.Entity.SettingDefinitionInfo">
            <summary>
            设置项定义信息
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.SettingDefinitionInfo.DefinitionID">
            <summary>
            设置定义的标识
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.SettingDefinitionInfo.DefinitionName">
            <summary>
            设置名称
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.SettingDefinitionInfo.SettingName">
            <summary>
            设置名称
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.SettingDefinitionInfo.EditorType">
            <summary>
            设置编辑器类型
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.SettingDefinitionInfo.ValueType">
            <summary>
            值类型
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.SettingDefinitionInfo.ValidationExpression">
            <summary>
            验证表达式
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.SettingDefinitionInfo.Description">
            <summary>
            设置描述
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.SettingDefinitionInfo.WebSiteID">
            <summary>
            设置针对的站点的ID，如果为0，则表示是公共设置
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.SettingDefinitionInfo.Ordinal">
            <summary>
            排序系数
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.SettingDefinitionInfo.IsOverridable">
            <summary>
            是否可重载
            </summary>
        </member>
        <member name="T:ESP.Framework.Entity.SettingEditorType">
            <summary>
            设置编辑器类型
            </summary>
        </member>
        <member name="F:ESP.Framework.Entity.SettingEditorType.SingleLine">
            <summary>
            单行
            </summary>
        </member>
        <member name="F:ESP.Framework.Entity.SettingEditorType.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="F:ESP.Framework.Entity.SettingEditorType.MultiLine">
            <summary>
            多行
            </summary>
        </member>
        <member name="T:ESP.Framework.SqlDataAccess.WebSiteDataProvider">
            <summary>
            站点数据访问类
            </summary>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.WebSiteDataProvider.Get(System.Int32)">
            <summary>
            获取指定ID的站点的信息
            </summary>
            <param name="id">站点的ID</param>
            <returns>站点信息</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.WebSiteDataProvider.GetAll">
            <summary>
            获取所有站点的列表
            </summary>
            <returns>站点列表</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.WebSiteDataProvider.GetByUser(System.Int32)">
            <summary>
            获取指定ID的用户可以访问的站点的列表
            </summary>
            <param name="userId">用户ID</param>
            <returns>可访问的站点列表</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.WebSiteDataProvider.Update(ESP.Framework.Entity.WebSiteInfo)">
            <summary>
            更新站点信息
            </summary>
            <param name="webSite">要更新的站点的信息</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.WebSiteDataProvider.Create(ESP.Framework.Entity.WebSiteInfo)">
            <summary>
            创建新的站点
            </summary>
            <param name="webSite">要创建的站点</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.WebSiteDataProvider.Delete(System.Int32)">
            <summary>
            删除指定ID的站点
            </summary>
            <param name="id">要删除的站点的ID</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.WebSiteDataProvider.GetByUrlPrefix(System.String)">
            <summary>
            获取指定Url前缀的站点
            </summary>
            <param name="urlPrefix">站点的Url前缀(不包含http://或https://，也不包含最后的反斜杠)</param>
            <returns>站点信息对象</returns>
        </member>
        <member name="T:ESP.Framework.SqlDataAccess.OperationAuditorDataProvider">
            <summary>
            审核人管理
            </summary>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.OperationAuditorDataProvider.Exists(System.Int32)">
            <summary>
            是否存在该记录
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.OperationAuditorDataProvider.Add(ESP.Framework.Entity.OperationAuditorInfo)">
            <summary>
            增加一条数据
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.OperationAuditorDataProvider.Update(ESP.Framework.Entity.OperationAuditorInfo)">
            <summary>
            更新一条数据
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.OperationAuditorDataProvider.Delete(System.Int32)">
            <summary>
            删除一条数据
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.OperationAuditorDataProvider.GetModel(System.Int32)">
            <summary>
            得到一个对象实体
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.OperationAuditorDataProvider.GetModelByDepId(System.Int32)">
            <summary>
            根据部门ID获得一个对象实体
            </summary>
            <param name="departmentId">The dep id.</param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.OperationAuditorDataProvider.GetList(System.String)">
            <summary>
            获得数据列表
            </summary>
            <param name="strWhere">The STR where.</param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.OperationAuditorDataProvider.GetAllDirectorIds">
            <summary>
            获得总监的sysids
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.OperationAuditorDataProvider.GetAllManagerIds">
            <summary>
            获得总经理的sysids
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.OperationAuditorDataProvider.GetAllAttendanceIds">
            <summary>
            获得考勤审批人的sysids
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.OperationAuditorDataProvider.GetAllCEOIds">
            <summary>
            获得CEO的sysids
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.OperationAuditorDataProvider.GetAllHRIds">
            <summary>
            获得HR审批人的sysids
            </summary>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.OperationAuditorDataProvider.GetAllADManagerIds">
            <summary>
            获得行政管理员的sysids
            </summary>
            <returns></returns>
        </member>
        <member name="T:ESP.DataForm.IMainDataFormEntity">
            <summary>
            标准主数据表单接口
            </summary>
        </member>
        <member name="P:ESP.DataForm.IMainDataFormEntity.DataFormID">
            <summary>
            数据表单序号
            </summary>
        </member>
        <member name="P:ESP.DataForm.IMainDataFormEntity.DataFormName">
            <summary>
            数据表单名称
            </summary>
        </member>
        <member name="P:ESP.DataForm.IMainDataFormEntity.Creator">
            <summary>
            创建人
            </summary>
        </member>
        <member name="P:ESP.DataForm.IMainDataFormEntity.CreatorName">
            <summary>
            创建人姓名
            </summary>
        </member>
        <member name="P:ESP.DataForm.IMainDataFormEntity.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:ESP.DataForm.IMainDataFormEntity.LastModifier">
            <summary>
            最后修订人
            </summary>
        </member>
        <member name="P:ESP.DataForm.IMainDataFormEntity.LastModifierName">
            <summary>
            最后修订人姓名
            </summary>
        </member>
        <member name="P:ESP.DataForm.IMainDataFormEntity.LastModifierTime">
            <summary>
            最后修订时间
            </summary>
        </member>
        <member name="P:ESP.DataForm.IMainDataFormEntity.LastModifierIPAddress">
            <summary>
            最后修订人IP地址
            </summary>
        </member>
        <member name="P:ESP.DataForm.IMainDataFormEntity.RowVersion">
            <summary>
            数据版本
            </summary>
        </member>
        <member name="T:ESP.Utilities.CryptoUtility">
            <summary>
            加密辅助类
            </summary>
        </member>
        <member name="M:ESP.Utilities.CryptoUtility.GetRandomSequence">
            <summary>
            生成高度随机字节序列
            </summary>
            <returns>高度随机字节序列</returns>
        </member>
        <member name="M:ESP.Utilities.CryptoUtility.EncryptData(System.Byte[],System.String)">
            <summary>
            用AES算法加密数据
            </summary>
            <param name="data">要加密的数据</param>
            <param name="key">密钥</param>
            <returns>加密后的数据</returns>
        </member>
        <member name="M:ESP.Utilities.CryptoUtility.DecryptData(System.Byte[],System.String)">
            <summary>
            用AES算法解密数据
            </summary>
            <param name="data">要解密的数据</param>
            <param name="key">密钥</param>
            <returns>解密后的数据</returns>
        </member>
        <member name="M:ESP.Utilities.CryptoUtility.Int32FromBytes(System.Byte[],System.Int32@)">
            <summary>
            将字节数组转换成Int32值。
            </summary>
            <param name="bytes">包含Int32值的数组</param>
            <param name="start">bytes中的起启位置，操作成功后，该参数返回下一个字节的位置</param>
            <returns>转换成的Int32值</returns>
        </member>
        <member name="M:ESP.Utilities.CryptoUtility.Int64FromBytes(System.Byte[],System.Int32@)">
            <summary>
            将字节数组转换成Int64值。
            </summary>
            <param name="bytes">包含Int64值的数组</param>
            <param name="start">bytes中的起启位置，操作成功后，该参数返回下一个字节的位置</param>
            <returns>转换成的Int64值</returns>
        </member>
        <member name="M:ESP.Utilities.CryptoUtility.Int32ToBytes(System.Int32)">
            <summary>
            将Int32值转换成字节数组。
            </summary>
            <param name="value">Int32值</param>
            <returns>转换成的字节数组</returns>
        </member>
        <member name="M:ESP.Utilities.CryptoUtility.Int64ToBytes(System.Int64)">
            <summary>
            将Int64值转换成字节数组。
            </summary>
            <param name="value">Int64值</param>
            <returns>转换成的字节数组</returns>
        </member>
        <member name="M:ESP.UserPoint.BusinessLogic.UserPointRuleManager.Add(ESP.UserPoint.Entity.UserPointRuleInfo)">
            <summary>
            增加一条数据
            </summary>
        </member>
        <member name="M:ESP.UserPoint.BusinessLogic.UserPointRuleManager.Update(ESP.UserPoint.Entity.UserPointRuleInfo)">
            <summary>
            更新一条数据
            </summary>
        </member>
        <member name="M:ESP.UserPoint.BusinessLogic.UserPointRuleManager.Delete(System.Int32)">
            <summary>
            删除一条数据
            </summary>
        </member>
        <member name="M:ESP.UserPoint.BusinessLogic.UserPointRuleManager.GetModel(System.Int32)">
            <summary>
            得到一个对象实体
            </summary>
        </member>
        <member name="M:ESP.UserPoint.BusinessLogic.UserPointRuleManager.GetList(System.String)">
            <summary>
            获得数据列表
            </summary>
        </member>
        <member name="M:ESP.UserPoint.BusinessLogic.UserPointManager.Add(ESP.UserPoint.Entity.UserPointInfo)">
            <summary>
            增加一条数据
            </summary>
        </member>
        <member name="M:ESP.UserPoint.BusinessLogic.UserPointManager.Update(ESP.UserPoint.Entity.UserPointInfo)">
            <summary>
            更新一条数据
            </summary>
        </member>
        <member name="M:ESP.UserPoint.BusinessLogic.UserPointManager.Delete(System.Int32)">
            <summary>
            删除一条数据
            </summary>
        </member>
        <member name="M:ESP.UserPoint.BusinessLogic.UserPointManager.GetModel(System.Int32)">
            <summary>
            得到一个对象实体
            </summary>
        </member>
        <member name="M:ESP.UserPoint.BusinessLogic.UserPointManager.GetList(System.String)">
            <summary>
            获得数据列表
            </summary>
        </member>
        <member name="T:ESP.Logging.LoggingEntities">
            <summary>
            架构中不存在 LoggingEntities 的注释。
            </summary>
        </member>
        <member name="M:ESP.Logging.LoggingEntities.#ctor">
            <summary>
            请使用应用程序配置文件的“LoggingEntities”部分中的连接字符串初始化新 LoggingEntities 对象。
            </summary>
        </member>
        <member name="M:ESP.Logging.LoggingEntities.#ctor(System.String)">
            <summary>
            初始化新的 LoggingEntities 对象。
            </summary>
        </member>
        <member name="M:ESP.Logging.LoggingEntities.#ctor(System.Data.EntityClient.EntityConnection)">
            <summary>
            初始化新的 LoggingEntities 对象。
            </summary>
        </member>
        <member name="M:ESP.Logging.LoggingEntities.AddToLogEntries(ESP.Logging.LogEntryInfo)">
            <summary>
            架构中不存在 LogEntries 的注释。
            </summary>
        </member>
        <member name="P:ESP.Logging.LoggingEntities.LogEntries">
            <summary>
            架构中不存在 LogEntries 的注释。
            </summary>
        </member>
        <member name="T:ESP.Logging.LogEntryInfo">
            <summary>
            架构中不存在 ESP.Logging.LogEntryInfo 的注释。
            </summary>
            <KeyProperties>
            LogID
            </KeyProperties>
        </member>
        <member name="M:ESP.Logging.LogEntryInfo.CreateLogEntryInfo(System.Int64,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            创建新的 LogEntryInfo 对象。
            </summary>
            <param name="logID">LogID 的初始值。</param>
            <param name="logLevel">LogLevel 的初始值。</param>
            <param name="processID">ProcessID 的初始值。</param>
            <param name="threadID">ThreadID 的初始值。</param>
            <param name="userID">UserID 的初始值。</param>
        </member>
        <member name="P:ESP.Logging.LogEntryInfo.ApplicationName">
            <summary>
            架构中不存在属性 ApplicationName 的注释。
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntryInfo.ApplicationVersion">
            <summary>
            架构中不存在属性 ApplicationVersion 的注释。
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntryInfo.Category">
            <summary>
            架构中不存在属性 Category 的注释。
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntryInfo.ClientAddress">
            <summary>
            架构中不存在属性 ClientAddress 的注释。
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntryInfo.ClientHostName">
            <summary>
            架构中不存在属性 ClientHostName 的注释。
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntryInfo.ClientPort">
            <summary>
            架构中不存在属性 ClientPort 的注释。
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntryInfo.ExceptionInfo">
            <summary>
            架构中不存在属性 ExceptionInfo 的注释。
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntryInfo.ExceptionType">
            <summary>
            架构中不存在属性 ExceptionType 的注释。
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntryInfo.ExtendedProperties">
            <summary>
            架构中不存在属性 ExtendedProperties 的注释。
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntryInfo.LogID">
            <summary>
            架构中不存在属性 LogID 的注释。
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntryInfo.LogLevel">
            <summary>
            架构中不存在属性 LogLevel 的注释。
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntryInfo.LogTime">
            <summary>
            架构中不存在属性 LogTime 的注释。
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntryInfo.Message">
            <summary>
            架构中不存在属性 Message 的注释。
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntryInfo.PagePath">
            <summary>
            架构中不存在属性 PagePath 的注释。
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntryInfo.ProcessID">
            <summary>
            架构中不存在属性 ProcessID 的注释。
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntryInfo.RequestMethod">
            <summary>
            架构中不存在属性 RequestMethod 的注释。
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntryInfo.ServerAddress">
            <summary>
            架构中不存在属性 ServerAddress 的注释。
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntryInfo.ServerHostName">
            <summary>
            架构中不存在属性 ServerHostName 的注释。
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntryInfo.ServerPort">
            <summary>
            架构中不存在属性 ServerPort 的注释。
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntryInfo.ThreadID">
            <summary>
            架构中不存在属性 ThreadID 的注释。
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntryInfo.Url">
            <summary>
            架构中不存在属性 Url 的注释。
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntryInfo.UserAgent">
            <summary>
            架构中不存在属性 UserAgent 的注释。
            </summary>
        </member>
        <member name="P:ESP.Logging.LogEntryInfo.UserID">
            <summary>
            架构中不存在属性 UserID 的注释。
            </summary>
        </member>
        <member name="T:ESP.Framework.BusinessLogic.UserManager">
            <summary>
            用户信息访问控制类
            </summary>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.UserManager.Get(System.Int32,System.Boolean)">
            <summary>
            获取指定ID的用户信息
            </summary>
            <param name="id">用户ID</param>
            <param name="isUserOnline">是否更新用户的最后活动时间</param>
            <returns>用户信息</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.UserManager.Get(System.Int32)">
            <summary>
            获取指定ID的用户信息
            </summary>
            <param name="id">用户ID</param>
            <returns>用户信息</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.UserManager.Get(System.String)">
            <summary>
            获取指定用户名的用户信息
            </summary>
            <param name="username">用户名</param>
            <returns>用户信息</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.UserManager.GetCurrentUserID">
            <summary>
            获取当前用户的ID
            </summary>
            <returns>当前用户的ID，如果当前上下文不存在用户ID则返回0</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.UserManager.Get">
            <summary>
            获取当前用户的用户信息并更新最后活动时间
            </summary>
            <returns>当前用户的信息</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.UserManager.GetAll">
            <summary>
            获取所有注册用户的信息列表
            </summary>
            <returns>系统中所有用户的信息列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.UserManager.GetMember(ESP.Framework.Entity.UserInfo)">
            <summary>
            获取MemberInfo
            包含UserInfo、EmployeeInfo和EmployeePositionList。
            用于判断数据权限
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.UserManager.Search(System.Int32,System.Int32,System.String,System.String,ESP.Framework.DataAccess.Utilities.DbDataParameter[])">
            <summary>
            搜索用户
            </summary>
            <param name="pageSize">分页大小</param>
            <param name="pageIndex">页索引</param>
            <param name="orderBy">排序规则</param>
            <param name="where">查询条件</param>
            <param name="paras">查询条件中使用的参数</param>
            <returns>匹配条件的用户的列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.UserManager.Update(ESP.Framework.Entity.UserInfo)">
            <summary>
            更新用户信息
            </summary>
            <param name="user">新的用户信息</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.UserManager.Delete(System.Int32)">
            <summary>
            删除指定ID的用户
            </summary>
            <param name="id">要删除的用户ID</param>
            <remarks>
            该操作并不执行实际的删除操作，
            仅设置IsDeleted标志字段
            </remarks>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.UserManager.Create(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Int32@)">
            <summary>
            创建新用户
            </summary>
            <param name="username">用户名</param>
            <param name="firstNameCN">中文名</param>
            <param name="lastNameCN">中文姓氏</param>
            <param name="firstNameEN">英文名</param>
            <param name="lastNameEN">英文姓氏</param>
            <param name="email">用户的安全email</param>
            <param name="isApproved">新用户是否通过审核</param>
            <param name="password">密码</param>
            <param name="newUserID">返回新用户的ID</param>
            <returns>
            操作错误状态
            如果创建用户成功，返回 UserCreateStatus.Success;
            如果用户名效，返回 UserCreateStatus.InvalidUserName;
            如果密码无效，返回 UserCreateStatus.InvalidPassword;
            如果Email无效，返回 UserCreateStatus.InvalidEmail;
            如果用户名已经存在，返回 UserCreateStatus.DuplicateUserName;
            如果Email已经存在且配置了Email唯一，返回 UserCreateStatus.DuplicateEmail;
            如果发生未知错误，返回 UserCreateStatus.ProviderError;
            </returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.UserManager.ValidateUser(System.String,System.String)">
            <summary>
            验证用户名密码是否匹配
            </summary>
            <param name="username">用户名</param>
            <param name="password">密码</param>
            <returns>
            如果用户名密码不匹配则返回 UserErrorCodes.UnmatchedUserPassword;
            如果用户已经被锁定，则返回 UserErrorCodes.UserLockedOut;
            否则返回成功 UserErrorCodes.Success
            </returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.UserManager.ChangePassword(System.String,System.String,System.String)">
            <summary>
            变更用户密码
            要检查用户原始密码正确性
            更新用户密码时还要检测username、userid和old password是否全部一致
            </summary>
            <param name="username">要修改密码的用户名</param>
            <param name="oldPassword">旧密码</param>
            <param name="newPassword">新密码</param>
            <returns>
            如果用户名密码不匹配则返回 UserErrorCodes.UnmatchedUserPassword;
            如果用户已经被锁定，则返回 UserErrorCodes.UserLockedOut;
            否则返回成功 UserErrorCodes.Success
            </returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.UserManager.ResetPassword(System.String,System.String)">
            <summary>
            强制修改用户密码，用于管理员操作，或密码重置操作
            </summary>
            <param name="username">用户名</param>
            <param name="password">新的密码</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.UserManager.SetResetPasswordCode(System.String,System.String)">
            <summary>
            设置重置密码操作中的验证码
            </summary>
            <param name="username">用户名</param>
            <param name="code">验证码</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.UserManager.GetResetPasswordCode(System.String)">
            <summary>
            获取最后一封重置密码邮件中使用的验证码
            </summary>
            <param name="username">用户名</param>
            <returns>验证码</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.UserManager.LockUser(System.Int32)">
            <summary>
            锁定用户
            </summary>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.UserManager.UnlockUser(System.Int32)">
            <summary>
            取消锁定用户
            </summary>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.UserManager.GetLockedoutUsers">
            <summary>
            获取所有被锁定用户
            </summary>
            <returns>所有被锁定用户的列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.UserManager.GetLatestRegistered(System.Int32)">
            <summary>
            获取最后注册的count名用户
            </summary>
            <param name="count">要获取的用户数量</param>
            <returns>用户列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.UserManager.GetLatestSignedIn(System.Int32)">
            <summary>
            获取最后登录过的count名用户
            </summary>
            <param name="count">要获取的用户数量</param>
            <returns>用户列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.UserManager.GetLatestActivity(System.Int32)">
            <summary>
            获取最后活动过的count名用户
            </summary>
            <param name="count">要获取的用户数量</param>
            <returns>用户列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.UserManager.SearchUsersByChineseName(System.String)">
            <summary>
            根据中文名模糊查询用户
            </summary>
            <param name="nameKeyword">中文名关键字</param>
            <returns>用户列表</returns>
        </member>
        <member name="T:ESP.Framework.BusinessLogic.UserCreateStatus">
            <summary>
            用户创建结果
            </summary>
        </member>
        <member name="F:ESP.Framework.BusinessLogic.UserCreateStatus.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:ESP.Framework.BusinessLogic.UserCreateStatus.InvalidUserName">
            <summary>
            无效的用户名
            </summary>
        </member>
        <member name="F:ESP.Framework.BusinessLogic.UserCreateStatus.InvalidPassword">
            <summary>
            无效的密码
            </summary>
        </member>
        <member name="F:ESP.Framework.BusinessLogic.UserCreateStatus.InvalidEmail">
            <summary>
            无效的邮件地址
            </summary>
        </member>
        <member name="F:ESP.Framework.BusinessLogic.UserCreateStatus.DuplicateUserName">
            <summary>
            重复的用户名
            </summary>
        </member>
        <member name="F:ESP.Framework.BusinessLogic.UserCreateStatus.DuplicateEmail">
            <summary>
            重复的邮件地址
            </summary>
        </member>
        <member name="F:ESP.Framework.BusinessLogic.UserCreateStatus.UserRejected">
            <summary>
            用户被驳回
            </summary>
        </member>
        <member name="F:ESP.Framework.BusinessLogic.UserCreateStatus.ProviderError">
            <summary>
            未知的提供程序错误
            </summary>
        </member>
        <member name="T:ESP.DataAccessAuthorization.BusinessLogic.DataAccessAuthorization">
            <summary>
            WebPage要求某些权限（按照所有权限要求的并集去检查，不满足全部权限就不可进入，并提示错误）
            WebPage要求某个具体权限时都需要指定一个具体的AccessMember对象，如果同一个权限允许多个AccessMember对象访问，那么应该配置多条
            </summary>
        </member>
        <member name="M:ESP.DataAccessAuthorization.BusinessLogic.DataAccessAuthorization.Authorization(ESP.Framework.Entity.MemberInfo,System.Collections.Generic.IList{ESP.DataAccessAuthorization.Entity.DataAccessAction})">
            <summary>
            检查权限并返回当前用户可以进行的Action，以及当前Action允许的Member定义
            注意：页面需要声明自己支持的操作（Action），
            然后配置允许此种Action的Member，
            而以下判断规则是根据配置决定的，
            如果没有配置相应的Member则不进行检查。
            1.判断是否属于允许的部门（无数据库操作，完全从配置中读取）
            2.判断是否属于允许的角色（读取sep_UsersInRoles，完全从配置中读取）
            3.判断是否大于某个职务级别（无数据库操作，完全从配置中读取）
            4.判断是否属于允许的职务（无数据库操作，完全从配置中读取）
            以下需要业务关联，目前完全由业务逻辑负责检查
            ×.判断是否为Owner（无数据库操作，需要定义公共属性）
            ×.判断是否属于支持方（读取F_ProjectMember，与业务相关）
            ×.判断是否属于审批人员（读取MODELTASK，与业务相关）
            </summary>
            <param name="member"></param>
            <param name="actionList"></param>
            <returns></returns>
        </member>
        <member name="T:ESP.Security.UrlAuthorization">
             <summary>
            Url授权控制类
             </summary>
        </member>
        <member name="M:ESP.Security.UrlAuthorization.IsUserAllowed(System.Security.Principal.IPrincipal,System.Uri,System.String)">
            <summary>
            判断用户是否有权限访问指定的Url
            </summary>
            <param name="user">用户</param>
            <param name="url">路径</param>
            <param name="verb">动作</param>
            <returns>如果有权访问返回true，否则返回false。</returns>
        </member>
        <member name="T:ESP.Framework.Entity.TaskScheduleInfo">
            <summary>
            任务计划表
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.TaskScheduleInfo.TaskScheduleID">
            <summary>
            标识列
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.TaskScheduleInfo.WebSiteID">
            <summary>
            站点ID
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.TaskScheduleInfo.TaskScheduleName">
            <summary>
            任务名字
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.TaskScheduleInfo.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.TaskScheduleInfo.TaskScheduleType">
            <summary>
            任务的类型
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.TaskScheduleInfo.StartTime">
            <summary>
            第一次执行时间
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.TaskScheduleInfo.StopTime">
            <summary>
            最后一次执行时间
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.TaskScheduleInfo.Interval">
            <summary>
            执行时间间隔
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.TaskScheduleInfo.EventName">
            <summary>
            在哪些事件中执行（如Application_Start），多个事件用逗号分隔
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.TaskScheduleInfo.Enabled">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.TaskScheduleInfo.EntryClass">
            <summary>
            负责执行任务的类的程序集限定类名
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.TaskScheduleInfo.Creator">
            <summary>
            任务创建者
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.TaskScheduleInfo.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.TaskScheduleInfo.LastActivityTime">
            <summary>
            最后一次执行时间
            </summary>
        </member>
        <member name="T:ESP.Framework.Entity.PermissionInfo">
            <summary>
            权限分配表
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.PermissionInfo.PermissionID">
            <summary>
            标识列
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.PermissionInfo.PermissionDefinitionID">
            <summary>
            权限定义ID
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.PermissionInfo.ReferredEntityID">
            <summary>
            权限控制的对象的ID
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.PermissionInfo.ReferredEntityType">
            <summary>
            权限控制的对象的类型
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.PermissionInfo.OwnerID">
            <summary>
            权限的所有者的ID
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.PermissionInfo.OwnerType">
            <summary>
            权限的所有者的类型（用户、角色）
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.PermissionInfo.Creator">
            <summary>
            创建者ID
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.PermissionInfo.CreatedTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="T:ESP.Framework.Entity.EntityType">
            <summary>
            实体类型
            </summary>
        </member>
        <member name="F:ESP.Framework.Entity.EntityType.WebSite">
            <summary>
            站点
            </summary>
        </member>
        <member name="F:ESP.Framework.Entity.EntityType.Module">
            <summary>
            模块
            </summary>
        </member>
        <member name="F:ESP.Framework.Entity.EntityType.WebPage">
            <summary>
            页面
            </summary>
        </member>
        <member name="T:ESP.Framework.Entity.PermissionOwnerTypes">
            <summary>
            权限所有者类型
            </summary>
        </member>
        <member name="F:ESP.Framework.Entity.PermissionOwnerTypes.FakeRole">
            <summary>
            伪角色
            </summary>
        </member>
        <member name="F:ESP.Framework.Entity.PermissionOwnerTypes.Role">
            <summary>
            角色
            </summary>
        </member>
        <member name="F:ESP.Framework.Entity.PermissionOwnerTypes.User">
            <summary>
            用户
            </summary>
        </member>
        <member name="T:ESP.Framework.Entity.FakeRoles">
            <summary>
            伪角色(内置角色)
            </summary>
        </member>
        <member name="F:ESP.Framework.Entity.FakeRoles.Everyone">
            <summary>
            所有访问者
            </summary>
        </member>
        <member name="F:ESP.Framework.Entity.FakeRoles.Anonymous">
            <summary>
            匿名访问者
            </summary>
        </member>
        <member name="F:ESP.Framework.Entity.FakeRoles.Registered">
            <summary>
            注册用户
            </summary>
        </member>
        <member name="T:ESP.Framework.BusinessLogic.WebPageManager">
            <summary>
            页面控制类
            </summary>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.WebPageManager.Get(System.Int32)">
            <summary>
            获取指定ID页面的信息
            </summary>
            <param name="id">页面的ID</param>
            <returns>页面信息</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.WebPageManager.GetAll">
            <summary>
            获取所有页面的信息列表
            </summary>
            <returns>所有页面的信息列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.WebPageManager.Create(ESP.Framework.Entity.WebPageInfo)">
            <summary>
            创建新的页面
            </summary>
            <param name="webPage">要创建的页面</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.WebPageManager.Update(ESP.Framework.Entity.WebPageInfo)">
            <summary>
            更新页面信息
            </summary>
            <param name="webPage">要更新的页面</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.WebPageManager.Delete(System.Int32)">
            <summary>
            删除指定ID的页面
            </summary>
            <param name="id">要删除的页面的ID</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.WebPageManager.GetByPath(System.Int32,System.String)">
            <summary>
            获取指定路径的页面
            </summary>
            <param name="webSiteId">站点ID</param>
            <param name="appRelativePath">页面对站点根目录的相对路径</param>
            <returns>页面信息</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.WebPageManager.GetModuleIDsByPath(System.Int32,System.String)">
            <summary>
            获取指定路径的页面所属的所有模块的ID
            </summary>
            <param name="webSiteId">站点ID</param>
            <param name="appRelativePath">页面对站点根目录的相对路径</param>
            <returns>模块ID列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.WebPageManager.GetByModule(System.Int32)">
            <summary>
            获取指定模块的所有页面的列表
            </summary>
            <param name="moduleId">模块ID</param>
            <returns>页面信息列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.WebPageManager.GetByWebSite(System.Int32)">
            <summary>
            获取指定站点的所有页面的列表
            </summary>
            <param name="webSiteId">站点ID</param>
            <returns>页面信息列表</returns>
        </member>
        <member name="T:ESP.Framework.SqlDataAccess.ModuleDataProvider">
            <summary>
            模块定义数据访问类
            </summary>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.ModuleDataProvider.Get(System.Int32)">
            <summary>
            获取指定ID的模块定义
            </summary>
            <param name="id">要获取的模块定义的ID</param>
            <returns>模块定义信息</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.ModuleDataProvider.GetByWebSite(System.Int32)">
            <summary>
            获取指定站点的所有模块定义列表
            </summary>
            <param name="webSiteId">要获取的模块列表的站点ID</param>
            <returns>该站点所有模块的列表</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.ModuleDataProvider.Update(ESP.Framework.Entity.ModuleInfo)">
            <summary>
            更新模块定义
            </summary>
            <param name="module">要更新的模块</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.ModuleDataProvider.Create(ESP.Framework.Entity.ModuleInfo)">
            <summary>
            创建新的模块定义
            </summary>
            <param name="module">要创建的模块定义信息</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.ModuleDataProvider.Delete(System.Int32)">
            <summary>
            删除指定ID的模块定义
            </summary>
            <param name="id">要删除的模块的ID</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.ModuleDataProvider.GetByUser(System.Int32,System.Int32)">
            <summary>
            获取指定站点中指定用户可访问的模块列表
            </summary>
            <param name="webSiteId">站点ID</param>
            <param name="userId">用户ID</param>
            <returns>可访问模块列表</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.ModuleDataProvider.GetAll">
            <summary>
            获取系统中所有的模块定义的列表
            </summary>
            <returns>所有模块定义的列表</returns>
        </member>
        <member name="T:ESP.Configuration.ConfigurationManager">
            <summary>
            配置管理类
            </summary>
        </member>
        <member name="M:ESP.Configuration.ConfigurationManager.Dispose">
            <summary>
            释放配置
            </summary>
        </member>
        <member name="M:ESP.Configuration.ConfigurationManager.Create">
            <summary>
            初始化配置
            </summary>
        </member>
        <member name="M:ESP.Configuration.ConfigurationManager.CreateProvider(System.Type)">
            <summary>
            创建指定的提供程序类实例
            </summary>
            <param name="providerType">提供程序接口类型</param>
            <returns>提供程序实例</returns>
        </member>
        <member name="P:ESP.Configuration.ConfigurationManager.EntityFrameworkConnectionString">
            <summary>
            ADO.Net Entity Framework 数据提供程序的连接字符串。
            </summary>
        </member>
        <member name="P:ESP.Configuration.ConfigurationManager.WorkflowTimerCallbackPage">
            <summary>
            工作流定时服务回调入口页面。
            </summary>
        </member>
        <member name="P:ESP.Configuration.ConfigurationManager.WebSiteID">
            <summary>
            站点的ID
            </summary>
        </member>
        <member name="P:ESP.Configuration.ConfigurationManager.ConnectionString">
            <summary>
            ESP 连接字符串
            </summary>
        </member>
        <member name="P:ESP.Configuration.ConfigurationManager.ConnectionStringName">
            <summary>
            ESP 连接字符串的名字
            </summary>
        </member>
        <member name="P:ESP.Configuration.ConfigurationManager.Items">
            <summary>
            自定义配置项集合
            </summary>
        </member>
        <member name="P:ESP.Configuration.ConfigurationManager.IsCacheEnabled">
            <summary>
            是否启用缓存
            </summary>
        </member>
        <member name="P:ESP.Configuration.ConfigurationManager.EmployeeCodePattern">
            <summary>
            员工代码生成模式
            </summary>
            <remarks>
            可以包含除“{”、“}”之外的任意常量字符，和以“{”与“}”定界的替换令牌
            如 A-{auto:0000} 指定的员工编号模式为 A-0000, A-0001, A-0002
            </remarks>
        </member>
        <member name="P:ESP.Configuration.ConfigurationManager.UsernameRegularExpression">
            <summary>
            用户名的验证表达式
            </summary>
        </member>
        <member name="P:ESP.Configuration.ConfigurationManager.EmailRegularExpression">
            <summary>
            邮件的验证表达式
            </summary>
        </member>
        <member name="P:ESP.Configuration.ConfigurationManager.PasswordStrengthRegularExpression">
            <summary>
            密码的验证表达式
            </summary>
        </member>
        <member name="P:ESP.Configuration.ConfigurationManager.MaxInvalidPasswordAttempts">
            <summary>
            最大密码重试次数
            </summary>
        </member>
        <member name="P:ESP.Configuration.ConfigurationManager.PasswordAttemptWindow">
            <summary>
            密码重试间隔
            </summary>
        </member>
        <member name="P:ESP.Configuration.ConfigurationManager.IsUniqueEmailRequired">
            <summary>
            邮件是否要求唯一
            </summary>
        </member>
        <member name="P:ESP.Configuration.ConfigurationManager.SafeConnectionStrings">
            <summary>
            对 System.Configuration.ConfigurationManager.ConnectionStrings 的包装
            </summary>
        </member>
        <member name="P:ESP.Configuration.ConfigurationManager.SafeAppSettings">
            <summary>
            对 System.Configuration.ConfigurationManager.AppSettings 的包装
            </summary>
        </member>
        <member name="T:ESP.Configuration.ConfigurationManager.AppSettingsWrapper">
            <summary>
            对 System.Configuration.ConfigurationManager.AppSettings 的包装
            </summary>
        </member>
        <member name="P:ESP.Configuration.ConfigurationManager.AppSettingsWrapper.Item(System.String)">
            <summary>
            对 System.Configuration.ConfigurationManager.AppSettings 的包装
            </summary>
            <param name="key">设置的键</param>
            <returns>设置的值</returns>
        </member>
        <member name="T:ESP.Configuration.ConfigurationManager.ConnectionStringsWrapper">
            <summary>
            对 System.Configuration.ConfigurationManager.ConnectionStrings 的包装
            </summary>
        </member>
        <member name="P:ESP.Configuration.ConfigurationManager.ConnectionStringsWrapper.Item(System.String)">
            <summary>
            对 System.Configuration.ConfigurationManager.ConnectionStrings 的包装
            </summary>
            <param name="name">连接字符串的名称</param>
            <returns>连接字符串</returns>
        </member>
        <member name="T:ESP.Framework.BusinessLogic.AuditorManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.AuditorManager.GetAuditor(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="departmentId"></param>
            <param name="auditorType"></param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.AuditorManager.GetAuditorId(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="departmentId"></param>
            <param name="auditorType"></param>
            <returns></returns>
        </member>
        <member name="T:ESP.Web.UI.UserControlBase">
            <summary>
            用户控件的扩展基类
            </summary>
        </member>
        <member name="P:ESP.Web.UI.UserControlBase.UserID">
            <summary>
            当前用户的ID
            </summary>
        </member>
        <member name="P:ESP.Web.UI.UserControlBase.SEPPage">
            <summary>
            当前控件所在的页面（如果页面不是PageBase类型，则返回空引用）。
            </summary>
        </member>
        <member name="P:ESP.Web.UI.UserControlBase.UserInfo">
            <summary>
            当前用户信息
            </summary>
        </member>
        <member name="T:ESP.Web.UI.CaptchaExtender">
            <summary>
            控制验证码显示的扩展控件。
            </summary>
        </member>
        <member name="M:ESP.Web.UI.CaptchaExtender.OnPreRender(System.EventArgs)">
            <summary>
            已重载。引发 System.Web.UI.Control.PreRender 事件。
            </summary>
            <param name="e">包含事件数据的 System.EventArgs 对象。</param>
        </member>
        <member name="P:ESP.Web.UI.CaptchaExtender.InputControl">
            <summary>
            输入框的ID
            </summary>
        </member>
        <member name="P:ESP.Web.UI.CaptchaExtender.ImageControl">
            <summary>
            图片控件的ID
            </summary>
        </member>
        <member name="P:ESP.Web.UI.CaptchaExtender.ChangeImageButton">
            <summary>
            刷新图片的按钮的ID
            </summary>
        </member>
        <member name="P:ESP.Web.UI.CaptchaExtender.Enabled">
            <summary>
            是否进行校验。
            </summary>
        </member>
        <member name="P:ESP.Web.UI.CaptchaExtender.IsValid">
            <summary>
            验证码是否有效。
            </summary>
        </member>
        <member name="M:ESP.UserPoint.DataAccess.IGiftDataProvider.Add(ESP.UserPoint.Entity.GiftInfo)">
            <summary>
            增加一条数据
            </summary>
        </member>
        <member name="M:ESP.UserPoint.DataAccess.IGiftDataProvider.Update(ESP.UserPoint.Entity.GiftInfo)">
            <summary>
            更新一条数据
            </summary>
        </member>
        <member name="M:ESP.UserPoint.DataAccess.IGiftDataProvider.Delete(System.Int32)">
            <summary>
            删除一条数据
            </summary>
        </member>
        <member name="M:ESP.UserPoint.DataAccess.IGiftDataProvider.GetModel(System.Int32)">
            <summary>
            得到一个对象实体
            </summary>
        </member>
        <member name="M:ESP.UserPoint.DataAccess.IGiftDataProvider.GetList(System.String)">
            <summary>
            获得数据列表
            </summary>
        </member>
        <member name="T:ESP.UserPoint.DataAccess.Utilities.CBO">
            <summary>
            OR映射类
            </summary>
        </member>
        <member name="F:ESP.UserPoint.DataAccess.Utilities.CBO.NullValues">
            <summary>
            逻辑空值
            </summary>
        </member>
        <member name="M:ESP.UserPoint.DataAccess.Utilities.CBO.LoadList``1(System.Data.IDataReader)">
            <summary>
            从DataReader中加载对象列表
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="reader">DataReader对象</param>
            <returns>对象列表</returns>
        </member>
        <member name="M:ESP.UserPoint.DataAccess.Utilities.CBO.LoadScalarList``1(System.Data.IDataReader)">
            <summary>
            从DataReader中加载标量值列表
            </summary>
            <typeparam name="T">标量类型</typeparam>
            <param name="reader">DataReader对象</param>
            <returns>标量值列表</returns>
        </member>
        <member name="M:ESP.UserPoint.DataAccess.Utilities.CBO.LoadScalarList``1(System.Data.IDataReader,System.Boolean)">
            <summary>
            从DataReader中加载标量值列表
            </summary>
            <typeparam name="T">标量类型</typeparam>
            <param name="reader">DataReader对象</param>
            <param name="withNull">是否包含空值记录</param>
            <returns>标量值列表</returns>
        </member>
        <member name="M:ESP.UserPoint.DataAccess.Utilities.CBO.FillObject``1(System.Data.IDataReader,``0@)">
            <summary>
            用DataReader中的数据填充对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="reader">DataReader对象</param>
            <param name="target">要填充的对象</param>
            <returns>填充好的对象</returns>
        </member>
        <member name="M:ESP.UserPoint.DataAccess.Utilities.CBO.LoadObject``1(System.Data.IDataReader,System.Object@)">
            <summary>
            从DataReader中的加载对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="reader">DataReader对象</param>
            <param name="internalContext">内部文本参数</param>
            <returns>加载的对象</returns>
        </member>
        <member name="M:ESP.UserPoint.DataAccess.Utilities.CBO.LoadObject``1(System.Data.IDataReader)">
            <summary>
            从DataReader中的加载对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="reader">DataReader对象</param>
            <returns>加载的对象</returns>
        </member>
        <member name="T:ESP.UserPoint.DataAccess.Utilities.NullValues">
            <summary>
            逻辑空值
            </summary>
        </member>
        <member name="F:ESP.UserPoint.DataAccess.Utilities.NullValues.Boolean">
            <summary>
            空Boolean
            </summary>
        </member>
        <member name="F:ESP.UserPoint.DataAccess.Utilities.NullValues.Byte">
            <summary>
            空Byte
            </summary>
        </member>
        <member name="F:ESP.UserPoint.DataAccess.Utilities.NullValues.Char">
            <summary>
            空字符
            </summary>
        </member>
        <member name="F:ESP.UserPoint.DataAccess.Utilities.NullValues.Decimal">
            <summary>
            空Decimal
            </summary>
        </member>
        <member name="F:ESP.UserPoint.DataAccess.Utilities.NullValues.Double">
            <summary>
            空Double
            </summary>
        </member>
        <member name="F:ESP.UserPoint.DataAccess.Utilities.NullValues.Int16">
            <summary>
            空Int16
            </summary>
        </member>
        <member name="F:ESP.UserPoint.DataAccess.Utilities.NullValues.Int32">
            <summary>
            空Int32
            </summary>
        </member>
        <member name="F:ESP.UserPoint.DataAccess.Utilities.NullValues.Int64">
            <summary>
            空Int64
            </summary>
        </member>
        <member name="F:ESP.UserPoint.DataAccess.Utilities.NullValues.Single">
            <summary>
            空浮点
            </summary>
        </member>
        <member name="F:ESP.UserPoint.DataAccess.Utilities.NullValues.String">
            <summary>
            空字符串
            </summary>
        </member>
        <member name="F:ESP.UserPoint.DataAccess.Utilities.NullValues.DateTime">
            <summary>
            空DateTime
            </summary>
        </member>
        <member name="F:ESP.UserPoint.DataAccess.Utilities.NullValues.Guid">
            <summary>
            空Guid
            </summary>
        </member>
        <member name="F:ESP.UserPoint.DataAccess.Utilities.NullValues.ByteArray">
            <summary>
            空字节数组
            </summary>
        </member>
        <member name="F:ESP.UserPoint.DataAccess.Utilities.NullValues.CharArray">
            <summary>
            空字符数组
            </summary>
        </member>
        <member name="F:ESP.UserPoint.DataAccess.Utilities.NullValues.Object">
            <summary>
            空对象
            </summary>
        </member>
        <member name="P:ESP.UserPoint.DataAccess.Utilities.NullValues.Item(System.Type)">
            <summary>
            根据类型获取逻辑空值
            </summary>
            <param name="key">类型</param>
            <returns>指定类型的逻辑空值</returns>
        </member>
        <member name="T:ESP.Security.UrlAuthorizationModule">
             <summary>
            根据Url对请求进行授权的Http模块
             </summary>
        </member>
        <member name="M:ESP.Security.UrlAuthorizationModule.Dispose">
            <summary>
            释放当前对象
            </summary>
        </member>
        <member name="M:ESP.Security.UrlAuthorizationModule.Init(System.Web.HttpApplication)">
            <summary>
            初始化当前对象
            </summary>
            <param name="context">当前的HttpApplication实例</param>
        </member>
        <member name="T:ESP.Framework.Entity.ModuleInfo">
            <summary>
            模块实体类。
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.ModuleInfo.ModuleID">
            <summary>
            模块ID
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.ModuleInfo.WebSiteID">
            <summary>
            模块所属站点ID
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.ModuleInfo.ModuleName">
            <summary>
            模块名
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.ModuleInfo.Description">
            <summary>
            模块描述
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.ModuleInfo.ParentID">
            <summary>
            上一级模块ID
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.ModuleInfo.DefaultPageID">
            <summary>
            默认页ID
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.ModuleInfo.DefaultPageUrl">
            <summary>
            默认页面的Url
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.ModuleInfo.Node">
            <summary>
            节点编号 ("00" -> "99")
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.ModuleInfo.NodePath">
            <summary>
            节点路径
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.ModuleInfo.NodeLevel">
            <summary>
            节点级别
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.ModuleInfo.NodeType">
            <summary>
            节点类型，1为非叶子节点，2为叶子节点
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.ModuleInfo.Ordinal">
            <summary>
            排序次序
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.ModuleInfo.Creator">
            <summary>
            创建者ID
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.ModuleInfo.CreatorName">
            <summary>
            创建者用户名
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.ModuleInfo.CreatedTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.ModuleInfo.LastModifier">
            <summary>
            最后修改人用户ID
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.ModuleInfo.LastModifierName">
            <summary>
            最后修改人用户名
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.ModuleInfo.LastModifiedTime">
            <summary>
            最后修改时间
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.ModuleInfo.RowVersion">
            <summary>
            数据行版本
            </summary>
        </member>
        <member name="T:ESP.Framework.Entity.ModuleType">
            <summary>
            模块类型
            </summary>
        </member>
        <member name="F:ESP.Framework.Entity.ModuleType.Module">
            <summary>
            功能模块
            </summary>
        </member>
        <member name="F:ESP.Framework.Entity.ModuleType.Folder">
            <summary>
            文件夹
            </summary>
        </member>
        <member name="F:ESP.Framework.Entity.ModuleType.WebSite">
            <summary>
            站点
            </summary>
        </member>
        <member name="T:ESP.Framework.BusinessLogic.DepartmentPositionManager">
            <summary>
            部门职位控制类
            </summary>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.DepartmentPositionManager.Get(System.Int32)">
            <summary>
            获取指定ID的部门职务
            </summary>
            <param name="id">职务ID</param>
            <returns>描述职务的DepartmentPositionInfo对象</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.DepartmentPositionManager.GetAll">
            <summary>
            获取所有的职务
            </summary>
            <returns>所有职务的列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.DepartmentPositionManager.GetByDepartment(System.Int32)">
            <summary>
            获取指定ID的部门可用的职务
            </summary>
            <param name="departmentId">部门ID</param>
            <returns>职务列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.DepartmentPositionManager.GetByDepartment(System.Int32,System.Boolean)">
            <summary>
            获取指定ID的部门可用的职务
            </summary>
            <param name="departmentId">部门ID</param>
            <param name="isOnlyPrivate">是否只返回部门私有职务</param>
            <returns>职务列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.DepartmentPositionManager.Create(ESP.Framework.Entity.DepartmentPositionInfo)">
            <summary>
            创建新的职务
            </summary>
            <param name="departmentPosition">描述要创建的职务的DepartmentPositionInfo对象</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.DepartmentPositionManager.Update(ESP.Framework.Entity.DepartmentPositionInfo)">
            <summary>
            更新职务信息
            </summary>
            <param name="departmentPosition">要更新的职务的信息</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.DepartmentPositionManager.Delete(System.Int32)">
            <summary>
            删除指定ID的职务
            </summary>
            <param name="id">要删除的职务的ID</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.DepartmentPositionManager.GetEmployeePositions(System.Int32)">
            <summary>
            获取指定ID的员工的职务信息
            </summary>
            <param name="userId">员工的ID</param>
            <returns>描述员工职务的EmployeePositionInfo对象</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.DepartmentPositionManager.AddEmployeePosition(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            将指定ID的职务授予指定ID的员工
            </summary>
            <param name="userId">员工ID</param>
            <param name="departmentPositionId">职务ID</param>
            <param name="departmentId">职务所属的部门</param>
            <param name="isManager">是否是经理职务</param>
            <param name="isActing">是否是临时职务</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.DepartmentPositionManager.RemoveEmployeePosition(System.Int32,System.Int32,System.Int32)">
            <summary>
            取消指定ID的员工的指定ID的职务
            </summary>
            <param name="userId">员工ID</param>
            <param name="departmentPositionId">职务ID</param>
            <param name="departmentId">职务所属的部门</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.DepartmentPositionManager.GetEmployeePosition(System.Int32,System.Int32,System.Int32)">
            <summary>
            获取员工职位信息
            </summary>
            <param name="employeeID">员工ID</param>
            <param name="departmentPositionID">职位ID</param>
            <param name="departmentID">部门ID</param>
            <returns>员工职位信息</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.DepartmentPositionManager.UpdateEmployeePosition(ESP.Framework.Entity.EmployeePositionInfo)">
            <summary>
            更新员工职位
            </summary>
            <param name="employeePosition">要更新的员工职位信息</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.DepartmentPositionManager.GetByCode(System.String)">
            <summary>
            根据职务代码获取职务信息
            </summary>
            <param name="code">职务代码</param>
            <returns>职务信息</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.DepartmentPositionManager.CodeExists(System.String)">
            <summary>
            检查职务代码是否已经存在
            </summary>
            <param name="code">职务代码</param>
            <returns>存在则返回 true，否则返回 false</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.DepartmentPositionManager.GetByName(System.Int32,System.String)">
            <summary>
            根据名称查询指定部门下的职务。
            </summary>
            <param name="departmentId"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:ESP.DataAccessAuthorization.Entity.DataAccessMember">
            <summary>
            权限成员描述
            </summary>
        </member>
        <member name="P:ESP.DataAccessAuthorization.Entity.DataAccessMember.DataAccessMemberID">
            <summary>
            权限成员序号
            </summary>
        </member>
        <member name="P:ESP.DataAccessAuthorization.Entity.DataAccessMember.MemberName">
            <summary>
            成员名称
            </summary>
        </member>
        <member name="P:ESP.DataAccessAuthorization.Entity.DataAccessMember.MemberType">
            <summary>
            成员类型：（0）特殊个人，无法用逻辑详细描述的群体或角色，根据表单处理事件动态插入；（1）固定角色，关联系统角色表，此角色下的所有人均可进行操作；（2）单一组织，关联到组织机构表，此组织机构下人员均可操作；（3）审批树，此处可以查询WorkFlow表中的相应人员。（4）职位，职位大于某个数值的人员，需要配合人力资源系统进行设置。（5）职位级别，例如大于总监级别，在判定上应该大于总监级别【10】，某些非总监职位的人也拥有10或者10以上的级别
            </summary>
        </member>
        <member name="P:ESP.DataAccessAuthorization.Entity.DataAccessMember.MemberDefinition">
            <summary>
            成员标志，由于部门、角色或审批人列表的ID有可能会发生变化，因此直接写定这些ID会造成灵活性不足。我们将来需要实现一种描述方式来根据成员类型确定成员标志。目前我们可以将这种对应关系，写到一个配置文件中，在这里写入配置文件相应的配置节名称即可，根据这个名称去读取配置文件里面的值来确定成员标志
            </summary>
        </member>
        <member name="P:ESP.DataAccessAuthorization.Entity.DataAccessMember.MemberService">
            <summary>
            提供Member服务的类，可供反射实例化；需要实现IMemberService接口
            </summary>
        </member>
        <member name="P:ESP.DataAccessAuthorization.Entity.DataAccessMember.CreateTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESP.DataAccessAuthorization.Entity.DataAccessMember.Creator">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESP.DataAccessAuthorization.Entity.DataAccessMember.CreatorName">
            <summary>
            
            </summary>
        </member>
        <member name="T:ESP.Framework.DataAccess.IDepartmentPositionDataProvider">
            <summary>
            部门职务数据访问接口
            </summary>
        </member>
        <member name="M:ESP.Framework.DataAccess.IDepartmentPositionDataProvider.Get(System.Int32)">
            <summary>
            获取指定ID的部门职务
            </summary>
            <param name="id">职务ID</param>
            <returns>描述职务的DepartmentPositionInfo对象</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IDepartmentPositionDataProvider.GetAll">
            <summary>
            获取所有的职务
            </summary>
            <returns>所有职务的列表</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IDepartmentPositionDataProvider.Create(ESP.Framework.Entity.DepartmentPositionInfo)">
            <summary>
            创建新的职务
            </summary>
            <param name="departmentPosition">描述要创建的职务的DepartmentPositionInfo对象</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IDepartmentPositionDataProvider.Update(ESP.Framework.Entity.DepartmentPositionInfo)">
            <summary>
            更新职务信息
            </summary>
            <param name="departmentPosition">要更新的职务的信息</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IDepartmentPositionDataProvider.Delete(System.Int32)">
            <summary>
            删除指定ID的职务
            </summary>
            <param name="id">要删除的职务的ID</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IDepartmentPositionDataProvider.GetEmployeePositions(System.Int32)">
            <summary>
            获取指定ID的员工的职务信息
            </summary>
            <param name="userId">员工的ID</param>
            <returns>描述员工职务的EmployeePositionInfo对象</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IDepartmentPositionDataProvider.RemoveEmployeePosition(System.Int32,System.Int32,System.Int32)">
            <summary>
            取消指定ID的员工的指定ID的职务
            </summary>
            <param name="userId">员工ID</param>
            <param name="departmentPositionId">职务ID</param>
            <param name="departmentId">职务所属的部门</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IDepartmentPositionDataProvider.AddEmployeePosition(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            将指定ID的职务授予指定ID的员工
            </summary>
            <param name="userId">员工ID</param>
            <param name="departmentPositionId">职务ID</param>
            <param name="departmentId">职务所属的部门</param>
            <param name="isManager">是否是经理职务</param>
            <param name="isActing">是否是临时职务</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IDepartmentPositionDataProvider.GetByDepartment(System.Int32,System.Boolean)">
            <summary>
            获取指定ID的部门可用的职务
            </summary>
            <param name="departmentId">部门ID</param>
            <param name="isOnlyPrivate">是否只返回部门私有职务</param>
            <returns>职务列表</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IDepartmentPositionDataProvider.GetEmployeePosition(System.Int32,System.Int32,System.Int32)">
            <summary>
            获取员工职位信息
            </summary>
            <param name="employeeId">员工ID</param>
            <param name="departmentPositionId">职位ID</param>
            <param name="departmentId">部门ID</param>
            <returns>员工职位信息</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IDepartmentPositionDataProvider.UpdateEmployeePosition(ESP.Framework.Entity.EmployeePositionInfo)">
            <summary>
            更新员工职位
            </summary>
            <param name="employeePosition">要更新的员工职位信息</param>
        </member>
        <member name="M:ESP.Framework.DataAccess.IDepartmentPositionDataProvider.GetByCode(System.String)">
            <summary>
            根据职务代码获取职务信息
            </summary>
            <param name="code">职务代码</param>
            <returns>职务信息</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IDepartmentPositionDataProvider.CodeExists(System.String)">
            <summary>
            检查职务代码是否已经存在
            </summary>
            <param name="code">职务代码</param>
            <returns>存在则返回 true，否则返回 false</returns>
        </member>
        <member name="M:ESP.Framework.DataAccess.IDepartmentPositionDataProvider.GetByName(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="departmentId"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:ESP.Framework.BusinessLogic.DepartmentManager">
            <summary>
            部门控制类
            </summary>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.DepartmentManager.Get(System.Int32)">
            <summary>
            获取指定ID的部门信息
            </summary>
            <param name="id">部门ID</param>
            <returns>部门信息</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.DepartmentManager.Get(System.String)">
            <summary>
            获取指定名称的部门信息
            </summary>
            <param name="name">部门名称</param>
            <returns>部门信息</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.DepartmentManager.GetAll">
            <summary>
            获取所有部门的信息列表
            </summary>
            <returns>所有部门列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.DepartmentManager.GetChildrenRecursion(System.Int32)">
            <summary>
            获取部门所有子孙部门
            </summary>
            <param name="parentId">部门ID</param>
            <returns>所有部门列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.DepartmentManager.GetChildren(System.Int32)">
            <summary>
            获取指定ID的部门的所有直接子级部门的信息列表
            </summary>
            <param name="id">部门ID</param>
            <returns>所有直接子级部门的信息列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.DepartmentManager.Create(ESP.Framework.Entity.DepartmentInfo)">
            <summary>
            创建新的部门
            </summary>
            <param name="department">要创建的部门的信息</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.DepartmentManager.Update(ESP.Framework.Entity.DepartmentInfo)">
            <summary>
            更新部门信息
            </summary>
            <param name="department">新的部门信息</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.DepartmentManager.Delete(System.Int32)">
            <summary>
            删除具有指定ID的部门
            </summary>
            <param name="id">要删除的部门的ID</param>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.DepartmentManager.GetDepartmentTree">
            <summary>
            获取树形结构的所有部门信息集合
            </summary>
            <returns>包含所有部门信息的ESP.Framework.Tree类型的树形结构</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.DepartmentManager.GetDepartmentListByID(System.Int32,System.Collections.Generic.List{ESP.Framework.Entity.DepartmentInfo})">
            <summary>
            根据指定ID递归方式获得此ID上级各个部门集合
            </summary>
            <param name="id">The id.</param>
            <param name="depList">包含返回值的部门列表</param>
            <returns></returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.DepartmentManager.GetEmployeesByDepartment(System.Int32)">
            <summary>
            根据部门获取员工
            </summary>
            <param name="departmentId">部门ID</param>
            <returns>员工列表</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.DepartmentManager.GetByCode(System.String)">
            <summary>
            根据部门代码获取部门信息
            </summary>
            <param name="code">部门代码</param>
            <returns>部门信息</returns>
        </member>
        <member name="M:ESP.Framework.BusinessLogic.DepartmentManager.CodeExists(System.String)">
            <summary>
            检查部门代码是否已经存在
            </summary>
            <param name="code">部门代码</param>
            <returns>存在则返回 true，否则返回 false</returns>
        </member>
        <member name="T:ESP.Framework.Entity.EmployeePositionInfo">
            <summary>
            员工职务信息
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeePositionInfo.UserID">
            <summary>
            员工ID
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeePositionInfo.Username">
            <summary>
            员工的用户名
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeePositionInfo.PositionLevel">
            <summary>
            职务级别
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeePositionInfo.DepartmentPositionName">
            <summary>
            职务名称
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeePositionInfo.DepartmentPositionID">
            <summary>
            职务ID
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeePositionInfo.DepartmentID">
            <summary>
            部门ID
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeePositionInfo.DepartmentName">
            <summary>
            部门名称
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeePositionInfo.IsManager">
            <summary>
            是否是经理职务
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeePositionInfo.IsActing">
            <summary>
            是否是临时职务
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.EmployeePositionInfo.UsernameCN">
            <summary>
            用户中文名
            </summary>
        </member>
        <member name="T:ESP.Framework.Entity.OperationAuditorInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.OperationAuditorInfo.Id">
            <summary>
            流水号
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:ESP.Framework.Entity.OperationAuditorInfo.DepId">
            <summary>
            部门编号
            </summary>
            <value>The dep id.</value>
        </member>
        <member name="P:ESP.Framework.Entity.OperationAuditorInfo.DirectorId">
            <summary>
            总监编号
            </summary>
            <value>The director id.</value>
        </member>
        <member name="P:ESP.Framework.Entity.OperationAuditorInfo.DirectorName">
            <summary>
            总监姓名
            </summary>
            <value>The name of the director.</value>
        </member>
        <member name="P:ESP.Framework.Entity.OperationAuditorInfo.ManagerId">
            <summary>
            总经理编号
            </summary>
            <value>The manager id.</value>
        </member>
        <member name="P:ESP.Framework.Entity.OperationAuditorInfo.ManagerName">
            <summary>
            总经理姓名
            </summary>
            <value>The name of the manager.</value>
        </member>
        <member name="P:ESP.Framework.Entity.OperationAuditorInfo.CEOId">
            <summary>
            CEO编号
            </summary>
            <value>The CEO id.</value>
        </member>
        <member name="P:ESP.Framework.Entity.OperationAuditorInfo.CEOName">
            <summary>
            CEO姓名
            </summary>
            <value>The name of the CEO.</value>
        </member>
        <member name="P:ESP.Framework.Entity.OperationAuditorInfo.AttendanceId">
            <summary>
            部门考勤审批人编号
            </summary>
            <value>The manager id.</value>
        </member>
        <member name="P:ESP.Framework.Entity.OperationAuditorInfo.AttendanceName">
            <summary>
            部门考勤审批人姓名
            </summary>
            <value>The name of the manager.</value>
        </member>
        <member name="P:ESP.Framework.Entity.OperationAuditorInfo.HRId">
            <summary>
            HR审批人编号
            </summary>
            <value>The CEO id.</value>
        </member>
        <member name="P:ESP.Framework.Entity.OperationAuditorInfo.HRName">
            <summary>
            HR审批人姓名
            </summary>
            <value>The name of the CEO.</value>
        </member>
        <member name="P:ESP.Framework.Entity.OperationAuditorInfo.FAId">
            <summary>
            FA审批人编号
            </summary>
            <value>The CEO id.</value>
        </member>
        <member name="P:ESP.Framework.Entity.OperationAuditorInfo.FAName">
            <summary>
            FA审批人姓名
            </summary>
            <value>The name of the CEO.</value>
        </member>
        <member name="P:ESP.Framework.Entity.OperationAuditorInfo.Hrattendanceid">
            <summary>
            人力考勤审批人ID
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.OperationAuditorInfo.Hrattendancename">
            <summary>
            人力考勤审批人姓名
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.OperationAuditorInfo.ADManagerID">
            <summary>
            行政管理员ID
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.OperationAuditorInfo.ADManagerName">
            <summary>
            行政管理员姓名
            </summary>
        </member>
        <member name="T:ESP.Framework.BusinessLogic.UnmatchedRowVersionException">
            <summary>
            数据版本已更改异常
            </summary>
            <remarks>
            在捕获到该异常后应重新加载数据
            </remarks>
        </member>
        <member name="T:ESP.Framework.BusinessLogic.UnknownSqlException">
            <summary>
            未知的数据库异常
            </summary>
        </member>
        <member name="T:ESP.Framework.Entity.SettingsInfo">
            <summary>
            系统设置信息
            </summary>
        </member>
        <member name="M:ESP.Framework.Entity.SettingsInfo.#ctor(System.Collections.Generic.IList{ESP.Framework.Entity.SettingInfo})">
            <summary>
            根据 SettingInfo 列表构造一个当前类对象
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:ESP.Framework.Entity.SettingsInfo.Value``1(System.String)">
            <summary>
            获取指定名称的设置的值，并以 T 类型返回
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="name">设置名称</param>
            <returns>指定名称的设置的值</returns>
            <exception cref="T:System.InvalidCastException">
            设置的值无法转换为指定的 T 类型
            </exception>
        </member>
        <member name="P:ESP.Framework.Entity.SettingsInfo.Items">
            <summary>
            所有设置项的 名称-设置 字典
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.SettingsInfo.PortalWebSite">
            <summary>
            Portal站点的ID
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.SettingsInfo.SmtpServer">
            <summary>
            邮件服务器地址
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.SettingsInfo.SmtpServerPort">
            <summary>
            邮件服务器端口
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.SettingsInfo.SmtpUsername">
            <summary>
            邮件服务器用户名
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.SettingsInfo.SmtpPassword">
            <summary>
            邮件服务器用户密码
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.SettingsInfo.MailFrom">
            <summary>
            系统邮件地址
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.SettingsInfo.PassportWebSite">
            <summary>
            登录页面ID
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.SettingsInfo.AESKey">
            <summary>
            AES加密密钥
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.SettingsInfo.TopDomain">
            <summary>
            主域
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.SettingsInfo.EmployeeCodePattern">
            <summary>
            员工编号生成模式
            </summary>
            <remarks>
            可以包含除“{”、“}”之外的任意常量字符，和以“{”与“}”定界的替换令牌
            如 A-{auto:0000} 指定的员工编号模式为 A-0000, A-0001, A-0002
            </remarks>
        </member>
        <member name="T:ESP.Framework.Entity.RoleInfo">
            <summary>
            角色表
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.RoleInfo.RoleID">
            <summary>
            标识列
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.RoleInfo.RoleName">
            <summary>
            角色名称
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.RoleInfo.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.RoleInfo.RoleGroupID">
            <summary>
            所属角色组ID
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.RoleInfo.RoleGroupName">
            <summary>
            所属角色组的名字
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.RoleInfo.Creator">
            <summary>
            创建者ID
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.RoleInfo.CreatorName">
            <summary>
            创建者用户名
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.RoleInfo.CreatedTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.RoleInfo.LastModifier">
            <summary>
            最后修改人用户ID
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.RoleInfo.LastModifierName">
            <summary>
            最后修改人用户名
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.RoleInfo.LastModifiedTime">
            <summary>
            最后修改时间
            </summary>
        </member>
        <member name="P:ESP.Framework.Entity.RoleInfo.RowVersion">
            <summary>
            数据版本
            </summary>
        </member>
        <member name="T:ESP.Framework.Entity.RoleOwnerType">
            <summary>
            角色拥有者类型
            </summary>
        </member>
        <member name="F:ESP.Framework.Entity.RoleOwnerType.User">
            <summary>
            用户
            </summary>
        </member>
        <member name="F:ESP.Framework.Entity.RoleOwnerType.Department">
            <summary>
            部门
            </summary>
        </member>
        <member name="T:ESP.Framework.DataAccess.Utilities.DbDataParameter">
            <summary>
            与数据库无关的数据库查询参数类
            </summary>
        </member>
        <member name="M:ESP.Framework.DataAccess.Utilities.DbDataParameter.#ctor(System.Data.DbType,System.String,System.Object)">
            <summary>
            构造查询参数
            </summary>
            <param name="dbType">数据类型</param>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
        </member>
        <member name="P:ESP.Framework.DataAccess.Utilities.DbDataParameter.DbType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="P:ESP.Framework.DataAccess.Utilities.DbDataParameter.Value">
            <summary>
            参数名
            </summary>
        </member>
        <member name="P:ESP.Framework.DataAccess.Utilities.DbDataParameter.Name">
            <summary>
            参数值
            </summary>
        </member>
        <member name="T:ESP.Framework.SqlDataAccess.DepartmentPositionDataProvider">
            <summary>
            部门职务数据访问类
            </summary>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.DepartmentPositionDataProvider.Get(System.Int32)">
            <summary>
            获取指定ID的部门职务
            </summary>
            <param name="id">职务ID</param>
            <returns>描述职务的DepartmentPositionInfo对象</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.DepartmentPositionDataProvider.GetAll">
            <summary>
            获取所有的职务
            </summary>
            <returns>所有职务的列表</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.DepartmentPositionDataProvider.Update(ESP.Framework.Entity.DepartmentPositionInfo)">
            <summary>
            更新职务信息
            </summary>
            <param name="departmentPosition">要更新的职务的信息</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.DepartmentPositionDataProvider.Create(ESP.Framework.Entity.DepartmentPositionInfo)">
            <summary>
            创建新的职务
            </summary>
            <param name="departmentPosition">描述要创建的职务的DepartmentPositionInfo对象</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.DepartmentPositionDataProvider.Delete(System.Int32)">
            <summary>
            删除指定ID的职务
            </summary>
            <param name="id">要删除的职务的ID</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.DepartmentPositionDataProvider.GetEmployeePositions(System.Int32)">
            <summary>
            获取指定ID的员工的职务信息
            </summary>
            <param name="userId">员工的ID</param>
            <returns>描述员工职务的EmployeePositionInfo对象</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.DepartmentPositionDataProvider.AddEmployeePosition(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            将指定ID的职务授予指定ID的员工
            </summary>
            <param name="userId">员工ID</param>
            <param name="departmentPositionId">职务ID</param>
            <param name="departmentId">职务所属的部门</param>
            <param name="isManager">是否是经理职务</param>
            <param name="isActing">是否是临时职务</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.DepartmentPositionDataProvider.RemoveEmployeePosition(System.Int32,System.Int32,System.Int32)">
            <summary>
            取消指定ID的员工的指定ID的职务
            </summary>
            <param name="userId">员工ID</param>
            <param name="departmentPositionId">职务ID</param>
            <param name="departmentId">职务所属的部门</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.DepartmentPositionDataProvider.GetByDepartment(System.Int32,System.Boolean)">
            <summary>
            获取指定ID的部门可用的职务
            </summary>
            <param name="departmentId">部门ID</param>
            <param name="isOnlyPrivate">是否只返回部门私有职务</param>
            <returns>职务列表</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.DepartmentPositionDataProvider.GetEmployeePosition(System.Int32,System.Int32,System.Int32)">
            <summary>
            获取员工职位信息
            </summary>
            <param name="employeeID">员工ID</param>
            <param name="departmentPositionID">职位ID</param>
            <param name="departmentID">部门ID</param>
            <returns>员工职位信息</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.DepartmentPositionDataProvider.UpdateEmployeePosition(ESP.Framework.Entity.EmployeePositionInfo)">
            <summary>
            更新员工职位
            </summary>
            <param name="employeePosition">要更新的员工职位信息</param>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.DepartmentPositionDataProvider.GetByCode(System.String)">
            <summary>
            根据职务代码获取职务信息
            </summary>
            <param name="code">职务代码</param>
            <returns>职务信息</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.DepartmentPositionDataProvider.CodeExists(System.String)">
            <summary>
            检查职务代码是否已经存在
            </summary>
            <param name="code">职务代码</param>
            <returns>存在则返回 true，否则返回 false</returns>
        </member>
        <member name="M:ESP.Framework.SqlDataAccess.DepartmentPositionDataProvider.GetByName(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="departmentId"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
    </members>
</doc>
